; ModuleID = 'gomodule'
source_filename = "gomodule"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22.go_export\22,\22e\22,@progbits"
module asm "\09.ascii \22v2;\5Cn\22"
module asm "\09.ascii \22package \22"
module asm "\09.ascii \22eval\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22pkgpath \22"
module asm "\09.ascii \22command-line-arguments\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22logging\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/ChrisRx/dungeonfs/pkg/logging\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22github.com/ChrisRx/dungeonfs/pkg/logging\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22ast\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go/ast\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22go/ast\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22token\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go/token\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22go/token\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22strings\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strings\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22strings\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22init\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22eval\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22command_line_arguments..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22logging\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_com_ChrisRx_dungeonfs_pkg_logging..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ast\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go_ast..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22scanner\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go_scanner..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22token\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go_token..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22poll\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_poll..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22testlog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_testlog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22filepath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22path_filepath..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sys\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime_internal_sys..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode..import\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22init_graph\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22type \22"
module asm "\09.ascii \22<type 1 \22"
module asm "\09.ascii \22\5C\22Context\5C\22 \22"
module asm "\09.ascii \22<type 2 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.command-line-arguments.fset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 3 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 4 \22"
module asm "\09.ascii \22\5C\22go/token.FileSet\5C\22 \22"
module asm "\09.ascii \22<type 5 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.go/token.mutex\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6 \22"
module asm "\09.ascii \22\5C\22sync.RWMutex\5C\22 \22"
module asm "\09.ascii \22\5C\22\22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22\5C\22 \22"
module asm "\09.ascii \22<type 7 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.sync.w\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 8 \22"
module asm "\09.ascii \22\5C\22sync.Mutex\5C\22 \22"
module asm "\09.ascii \22<type 9 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.sync.state\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.sync.sema\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -7>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 10 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 8>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Lock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 10>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Unlock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.sync.writerSem\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -7>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.sync.readerSem\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -7>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.sync.readerCount\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.sync.readerWait\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22rw\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Unlock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22rw\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22RLocker\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 12 \22"
module asm "\09.ascii \22\5C\22sync.Locker\5C\22 \22"
module asm "\09.ascii \22<type 13 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Lock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Unlock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22rw\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22RLock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22rw\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22RUnlock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22rw\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Lock\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.files\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 14 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 15 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 16 \22"
module asm "\09.ascii \22\5C\22go/token.File\5C\22 \22"
module asm "\09.ascii \22<type 17 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.go/token.set\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.size\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.mutex\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 8>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.lines\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 19 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.infos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 20 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 21 \22"
module asm "\09.ascii \22\5C\22.go/token.lineInfo\5C\22 \22"
module asm "\09.ascii \22<type 22 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Filename\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Line\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 16>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/token.position\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24 \22"
module asm "\09.ascii \22\5C\22go/token.Pos\5C\22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsValid\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22adjusted\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25 \22"
module asm "\09.ascii \22\5C\22go/token.Position\5C\22 \22"
module asm "\09.ascii \22<type 26 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Filename\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Line\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Column\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 27 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsValid\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Offset\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/token.unpack\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22adjusted\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22filename\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22line\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22column\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22LineCount\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Position\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Size\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Base\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MergeLine\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22line\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetLines\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22lines\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 28 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22PositionFor\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22adjusted\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Line\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x22>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetLinesForContent\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22content\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 29 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22AddLineInfo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22filename\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22line\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22AddLine\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 23>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/token.last\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Write\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22encode\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x22>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 31 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Read\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22decode\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x22>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 32 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 33 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Position\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22PositionFor\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22adjusted\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22pos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 25>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22File\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22AddFile\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22filename\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22size\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Iterate\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 34 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Base\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 18>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/token.file\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.command-line-arguments.identifiers\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 35 \22"
module asm "\09.ascii \22map [\22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 36 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.command-line-arguments.returnSet\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.command-line-arguments.returnValue\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 38 \22"
module asm "\09.ascii \22\5C\22reflect.Value\5C\22 \22"
module asm "\09.ascii \22<type 39 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.reflect.typ\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 40 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 41 \22"
module asm "\09.ascii \22\5C\22.reflect.rtype\5C\22 \22"
module asm "\09.ascii \22<type 42 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.reflect.size\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.ptrdata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.hash\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -7>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.kind\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -5>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.align\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -1>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.fieldAlign\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -5>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect._\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -5>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.hashfn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 43 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44 \22"
module asm "\09.ascii \22\5C\22unsafe.Pointer\5C\22 \22"
module asm "\09.ascii \22\5C\22\22"
module asm "\09.ascii \22unsafe\22"
module asm "\09.ascii \22\5C\22 \22"
module asm "\09.ascii \22<type 45 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22any\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.equalfn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 46 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.gcdata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 47 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.string\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 49 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 50 \22"
module asm "\09.ascii \22\5C\22.reflect.uncommonType\5C\22 \22"
module asm "\09.ascii \22<type 51 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.reflect.name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.pkgPath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.methods\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 52 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 53 \22"
module asm "\09.ascii \22\5C\22.reflect.method\5C\22 \22"
module asm "\09.ascii \22<type 54 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.reflect.name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.pkgPath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.mtyp\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 41>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.typ\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.tfn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x32>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 56 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 50>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x32>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 56>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22PkgPath\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 56>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.uncommon\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 56>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.ptrToThis\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Comparable\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ConvertibleTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57 \22"
module asm "\09.ascii \22\5C\22reflect.Type\5C\22 \22"
module asm "\09.ascii \22<type 58 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Align\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22FieldAlign\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Method\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 59 \22"
module asm "\09.ascii \22\5C\22reflect.Method\5C\22 \22"
module asm "\09.ascii \22<type 60 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22PkgPath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Type\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Func\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Index\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22MethodByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 59>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22NumMethod\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22PkgPath\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Size\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.rawString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Kind\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61 \22"
module asm "\09.ascii \22\5C\22reflect.Kind\5C\22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22k\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Implements\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22AssignableTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22ConvertibleTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Comparable\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Bits\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22ChanDir\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 62 \22"
module asm "\09.ascii \22\5C\22reflect.ChanDir\5C\22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22d\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 62>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22IsVariadic\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Elem\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Field\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63 \22"
module asm "\09.ascii \22\5C\22reflect.StructField\5C\22 \22"
module asm "\09.ascii \22<type 64 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22PkgPath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Type\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Tag\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 65 \22"
module asm "\09.ascii \22\5C\22reflect.StructTag\5C\22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tag\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 65>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Lookup\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22key\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22value\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tag\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 65>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Get\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22key\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Offset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Index\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 66 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Anonymous\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22FieldByIndex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22index\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 67 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22FieldByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22FieldByNameFunc\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22match\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 68 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22In\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Key\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Len\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22NumField\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22NumIn\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22NumOut\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Out\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.common\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 69 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 41>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.uncommon\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 49>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Implements\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Out\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22AssignableTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Len\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.common\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.exportedMethods\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 70 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 53>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumMethod\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Kind\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bits\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x42>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22PkgPath\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x32>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.rawString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.pointers\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Method\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 59>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Align\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumOut\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumIn\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Key\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldAlign\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ChanDir\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 62>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MethodByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 59>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x42>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Size\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByIndex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22index\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 71 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsVariadic\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.ptrTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Elem\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumField\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x4a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Field\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22In\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByNameFunc\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22match\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 72 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 63>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.reflect.ptr\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 73 \22"
module asm "\09.ascii \22\5C\22.reflect.flag\5C\22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.mustBeAssignable\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.kind\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.ro\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.mustBe\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22expected\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 73>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.mustBeExported\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Convert\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22t\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Uint\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22TryRecv\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Slice3\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22j\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22k\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Slice\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22j\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetPointer\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetUint\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22TrySend\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetCap\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetComplex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -18>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.setRunes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 74 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Index\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Cap\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Float\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22CallSlice\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22in\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 75 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 76 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22OverflowUint\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Field\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumField\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Elem\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22CanInterface\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bool\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.assignTo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22context\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22dst\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 40>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22target\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.recv\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22nb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22val\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Call\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22in\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 77 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 78 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x2a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 79 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Addr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Interface\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 80 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Kind\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 61>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.send\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22nb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22selected\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.pointer\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 44>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22CanSet\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pointer\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByNameFunc\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22match\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 81 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Complex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -18>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NumMethod\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x2a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.runes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 82 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22InterfaceData\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 83 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Close\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Recv\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22UnsafeAddr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -13>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsNil\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.reflect.call\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22op\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22in\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 84 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 85 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsValid\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FieldByIndex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22index\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 86 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MethodByName\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetLen\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Len\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MapKeys\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 87 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22OverflowComplex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -18>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Type\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22OverflowFloat\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Method\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22OverflowInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Send\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Set\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetFloat\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetBool\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetMapIndex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22key\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22val\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x2a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MapIndex\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22key\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22CanAddr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetBytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 88 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalDecl\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22decl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 90 \22"
module asm "\09.ascii \22\5C\22go/ast.Decl\5C\22 \22"
module asm "\09.ascii \22<type 91 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 92 \22"
module asm "\09.ascii \22\5C\22go/ast.Node\5C\22 \22"
module asm "\09.ascii \22<type 93 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/ast.declNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalFuncDecl\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22decl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 90>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalGenDecl\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22decl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 90>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Eval\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22node\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 92>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalExpr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22expr\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94 \22"
module asm "\09.ascii \22\5C\22go/ast.Expr\5C\22 \22"
module asm "\09.ascii \22<type 95 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 92>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalCallExpr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x10a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 96 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 97 \22"
module asm "\09.ascii \22\5C\22go/ast.CallExpr\5C\22 \22"
module asm "\09.ascii \22<type 98 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Fun\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Lparen\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Args\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 99 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Ellipsis\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Rparen\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 100 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 97>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 100>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 100>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalIdent\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalSelectorExpr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 101 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 102 \22"
module asm "\09.ascii \22\5C\22go/ast.SelectorExpr\5C\22 \22"
module asm "\09.ascii \22<type 103 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22X\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Sel\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 104 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 105 \22"
module asm "\09.ascii \22\5C\22go/ast.Ident\5C\22 \22"
module asm "\09.ascii \22<type 106 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22NamePos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Obj\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 107 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 108 \22"
module asm "\09.ascii \22\5C\22go/ast.Object\5C\22 \22"
module asm "\09.ascii \22<type 109 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Kind\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 110 \22"
module asm "\09.ascii \22\5C\22go/ast.ObjKind\5C\22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22kind\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 110>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Decl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 111 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Data\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 112 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Type\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 113 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22obj\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 114 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 108>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22id\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x22>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 115 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 105>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 115>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 115>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 115>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22id\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 115>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsExported\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 116 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 102>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 116>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 116>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalBinaryExpr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 117 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 118 \22"
module asm "\09.ascii \22\5C\22go/ast.BinaryExpr\5C\22 \22"
module asm "\09.ascii \22<type 119 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22X\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22OpPos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Op\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120 \22"
module asm "\09.ascii \22\5C\22go/token.Token\5C\22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsKeyword\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsOperator\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22op\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Precedence\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22tok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsLiteral\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 121 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 118>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 121>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 121>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalUnaryExpr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x10a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 122 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 123 \22"
module asm "\09.ascii \22\5C\22go/ast.UnaryExpr\5C\22 \22"
module asm "\09.ascii \22<type 124 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22OpPos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Op\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22X\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 125 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 123>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 125>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.exprNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 125>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22stmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 126 \22"
module asm "\09.ascii \22\5C\22go/ast.Stmt\5C\22 \22"
module asm "\09.ascii \22<type 127 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 92>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalExprStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x10a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 128 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 129 \22"
module asm "\09.ascii \22\5C\22go/ast.ExprStmt\5C\22 \22"
module asm "\09.ascii \22<type 130 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22X\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 131 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 129>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 131>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 131>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalAssignStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x18a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 132 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 133 \22"
module asm "\09.ascii \22\5C\22go/ast.AssignStmt\5C\22 \22"
module asm "\09.ascii \22<type 134 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Lhs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 135 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22TokPos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Tok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 120>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Rhs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 136 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 137 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 133>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 137>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 137>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalReturnStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 138 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 139 \22"
module asm "\09.ascii \22\5C\22go/ast.ReturnStmt\5C\22 \22"
module asm "\09.ascii \22<type 140 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Return\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Results\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 141 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 142 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 139>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 142>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 142>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalIfStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x10a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 143 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 144 \22"
module asm "\09.ascii \22\5C\22go/ast.IfStmt\5C\22 \22"
module asm "\09.ascii \22<type 145 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22If\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Init\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 126>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Cond\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 94>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Body\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 146 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 147 \22"
module asm "\09.ascii \22\5C\22go/ast.BlockStmt\5C\22 \22"
module asm "\09.ascii \22<type 148 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Lbrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22List\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 149 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 126>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Rbrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 150 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 147>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 150>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 150>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Else\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 126>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 151 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 144>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.go/ast.stmtNode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 151>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22End\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 151>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Pos\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.command-line-arguments.evalBlockStmt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 146>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 37>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22ErrInvalidValue\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22ErrReturnValue\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22type \22"
module asm "\09.ascii \22<type 152 \22"
module asm "\09.ascii \22\5C\22EvalError\5C\22 \22"
module asm "\09.ascii \22<type 153 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 92>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Type\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Msg\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22e\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 152>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Error\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22False\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22NewContext\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22identifiers\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 154 \22"
module asm "\09.ascii \22map [\22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 155 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 89>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22NewScope\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 156 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 157 \22"
module asm "\09.ascii \22\5C\22Scope\5C\22 \22"
module asm "\09.ascii \22<type 158 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22Objects\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 159 \22"
module asm "\09.ascii \22map [\22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 160 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 161 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 157>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Insert\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22k\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 162 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 161>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Lookup\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22name\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 163 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22Nil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22PkgLogger\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 164 \22"
module asm "\09.ascii \22\5C\22.command-line-arguments.logger\5C\22 \22"
module asm "\09.ascii \22<type 165 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Printf\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22...\22"
module asm "\09.ascii \22<type 166 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22type \22"
module asm "\09.ascii \22<type 157>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22var \22"
module asm "\09.ascii \22True\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22command_line_arguments..init0\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22checksum CF335DA87F53859CBD50AE2DD341145A36213857;\5Cn\22"
module asm "\09.text"

%_type.0 = type { i64, i64, i32, i8, i8, i8, %__go_descriptor.22*, %__go_descriptor.23*, i8*, { i8*, i64 }*, %uncommonType.0*, %_type.0* }
%__go_descriptor.22 = type { i64 (i8*, i8*, i64)* }
%__go_descriptor.23 = type { i8 (i8*, i8*, i8*)* }
%uncommonType.0 = type { { i8*, i64 }*, { i8*, i64 }*, %IPST.20 }
%IPST.20 = type { %method.0*, i64, i64 }
%method.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0*, %_type.0*, i8* }
%SliceType.0 = type { %_type.0, %_type.0* }
%functionDescriptor.0 = type { i64 }
%PtrType.0 = type { %_type.0, %_type.0* }
%StructType.1 = type { %_type.0, %IPST.22 }
%IPST.22 = type { %structField.0*, i64, i64 }
%structField.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0*, { i8*, i64 }*, i64 }
%MapType.1 = type { %_type.0, %_type.0*, %_type.0*, %_type.0*, %_type.0*, i8, i8, i8, i8, i16, i8, i8 }
%InterfaceType.1 = type { %_type.0, %IPST.23 }
%IPST.23 = type { %imethod.0*, i64, i64 }
%imethod.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0* }
%ArrayType.1 = type { %_type.0, %_type.0*, %_type.0*, i64 }
%FuncType.1 = type { %_type.0, i8, %IPST.21, %IPST.21 }
%IPST.21 = type { %_type.0**, i64, i64 }
%Value.0 = type { %.reflect.rtype.0*, i8*, i64 }
%.reflect.rtype.0 = type { i64, i64, i32, i8, i8, i8, i8, %__go_descriptor.0*, %__go_descriptor.1*, i8*, { i8*, i64 }*, %.reflect.uncommonType.0*, %.reflect.rtype.0* }
%__go_descriptor.0 = type { i64 (i8*, i8*, i64)* }
%__go_descriptor.1 = type { i8 (i8*, i8*, i8*)* }
%.reflect.uncommonType.0 = type { { i8*, i64 }*, { i8*, i64 }*, %IPST.18 }
%IPST.18 = type { %.reflect.method.0*, i64, i64 }
%.reflect.method.0 = type { { i8*, i64 }*, { i8*, i64 }*, %.reflect.rtype.0*, %.reflect.rtype.0*, i8* }
%error.0 = type { { %_type.0*, { i64, i64 } (i8*, i8*)* }*, i8* }
%IPST.1 = type { { %_type.0*, i8* }*, i64, i64 }
%.command-line-arguments.logger.0 = type { { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, i8* }
%EvalError.0 = type { %Node.0, { i8*, i64 }, { i8*, i64 } }
%Node.0 = type { { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, i8* }
%SelectorExpr.0 = type { %Expr.0, %Ident.0* }
%Expr.0 = type { { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, i8* }
%Ident.0 = type { i64, { i8*, i64 }, %Object.0* }
%Object.0 = type { i64, { i8*, i64 }, { %_type.0*, i8* }, { %_type.0*, i8* }, { %_type.0*, i8* } }
%NullLogger.0 = type {}
%ReturnStmt.0 = type { i64, %IPST.4 }
%IPST.4 = type { %Expr.0*, i64, i64 }
%BlockStmt.0 = type { i64, %IPST.5, i64 }
%IPST.5 = type { %Stmt.0*, i64, i64 }
%Stmt.0 = type { { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, i8* }
%IPST.0 = type { %Value.0**, i64, i64 }
%Scope.0 = type { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* }
%Context.0 = type { %FileSet.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8, %Value.0* }
%FileSet.0 = type { %RWMutex.0, i64, %IPST.16, %File.1* }
%RWMutex.0 = type { %Mutex.0, i32, i32, i32, i32 }
%Mutex.0 = type { i32, i32 }
%IPST.16 = type { %File.1**, i64, i64 }
%File.1 = type { %FileSet.0*, { i8*, i64 }, i64, i64, %Mutex.0, %IPST.8, %IPST.17 }
%IPST.8 = type { i64*, i64, i64 }
%IPST.17 = type { %".go/token.lineInfo.0"*, i64, i64 }
%".go/token.lineInfo.0" = type { i64, { i8*, i64 }, i64 }
%StructField.0 = type { { i8*, i64 }, { i8*, i64 }, %Type.0, { i8*, i64 }, i64, %IPST.8, i8 }
%Type.0 = type { { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, i8* }
%__go_descriptor.14 = type { i8 (i8*, i64, i64)* }
%Method.0 = type { { i8*, i64 }, { i8*, i64 }, %Type.0, %Value.0, i64 }
%AssignStmt.0 = type { %IPST.4, i64, i64, %IPST.4 }
%BinaryExpr.0 = type { %Expr.0, i64, i64, %Expr.0 }
%CallExpr.0 = type { %Expr.0, i64, %IPST.4, i64, i64 }
%IPST.6 = type { %Value.0*, i64, i64 }
%IPST.7 = type { i8**, i64, i64 }
%UnaryExpr.0 = type { i64, i64, %Expr.0 }
%BasicLit.0 = type { i64, i64, { i8*, i64 } }
%ExprStmt.0 = type { %Expr.0 }
%IfStmt.0 = type { i64, %Stmt.0, %Expr.0, %BlockStmt.0*, %Stmt.0 }
%IPST.2 = type { { i8*, i64 }*, { %_type.0*, i8* }*, i8*, { i64, i8, i8, i16, i32, { [8 x i8], [8 x { i8*, i64 }], [8 x { %_type.0*, i8* }], i8* }*, { [8 x i8], [8 x { i8*, i64 }], [8 x { %_type.0*, i8* }], i8* }*, i64, i8* }*, { [8 x i8], [8 x { i8*, i64 }], [8 x { %_type.0*, i8* }], i8* }*, { [8 x i8], [8 x { i8*, i64 }], [8 x { %_type.0*, i8* }], i8* }*, i8*, i8*, i64, i8, i8, i8, i8, i64, i64 }

$type...6.7uint8 = comdat any

$gcbits..ba = comdat any

$uint8..d = comdat any

$type...1uint8 = comdat any

$string..d = comdat any

$type...1string = comdat any

$bool..d = comdat any

$type...1bool = comdat any

$type..map.6string.7interface.4.5 = comdat any

$type..interface.4.5 = comdat any

$gcbits..da = comdat any

$type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5 = comdat any

$gcbits..kwkEGGpa = comdat any

$type...68x.7uint8 = comdat any

$type...68x.7string = comdat any

$gcbits..wkwa = comdat any

$type...6.7string = comdat any

$type...68x.7interface.4.5 = comdat any

$gcbits..GGGb = comdat any

$type...6.7interface.4.5 = comdat any

$type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5 = comdat any

$gcbits..mb = comdat any

$int..d = comdat any

$type...1int = comdat any

$uint16..d = comdat any

$type...1uint16 = comdat any

$uint32..d = comdat any

$type...1uint32 = comdat any

$type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5 = comdat any

$uintptr..d = comdat any

$type...1uintptr = comdat any

$type...1command_line_arguments.Scope = comdat any

$type..func.8string.3interface.4.5.9.8.9 = comdat any

$type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9 = comdat any

$type..func.8string.9.8interface.4.5.9 = comdat any

$type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9 = comdat any

$type...1.1command_line_arguments.Scope = comdat any

$gcbits..la = comdat any

$type...1command_line_arguments.Context = comdat any

$type..func.8go_ast.Node.9.8.1reflect.Value.3error.9 = comdat any

$error..d = comdat any

$type...1error = comdat any

$type..func.8.9.8string.9 = comdat any

$type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9 = comdat any

$type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9 = comdat any

$type...1.1command_line_arguments.Context = comdat any

$gcbits..ya = comdat any

$type..func.8.9.8go_token.Pos.9 = comdat any

$type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9 = comdat any

$type..func.8command_line_arguments.EvalError.9.8string.9 = comdat any

$type...1command_line_arguments.EvalError = comdat any

$type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9 = comdat any

$type..func.8.1command_line_arguments.EvalError.9.8string.9 = comdat any

$type...1.1command_line_arguments.EvalError = comdat any

$type...61x.7interface.4.5 = comdat any

$type...62x.7interface.4.5 = comdat any

$gcbits..pa = comdat any

$imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError = comdat any

$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr = comdat any

$type...63x.7interface.4.5 = comdat any

$gcbits..Gb = comdat any

$type...64x.7interface.4.5 = comdat any

$gcbits..Gh = comdat any

$type...1command_line_arguments.logger = comdat any

$type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9 = comdat any

$pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger = comdat any

$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt = comdat any

$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt = comdat any

$gcbits..ppppa = comdat any

$gcbits..pppppppppa = comdat any

$gcbits..ha = comdat any

$gcbits..GGaa = comdat any

$gcbits..GGGGGGGGGGGGGGGG = comdat any

$gcbits..GGGa = comdat any

$gcbits..pppa = comdat any

@pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.2.go_ast.exprNode.0func.8.9.8.9.5..go_ast.Ident = external constant { %_type.0*, i8*, i8*, i8* }
@const.0 = private constant [41 x i8] c"Cannot compare, mismatch types %v and %v\00", align 1
@type...6.7uint8 = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 264632103, i8 23, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C1, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d }, comdat
@gcbits..ba = weak constant [1 x i8] c"\01", comdat
@const.2 = private constant [8 x i8] c"[]uint8\00", align 1
@go..C1 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.2, i32 0, i32 0), i64 7 }
@uint8..d = weak constant %_type.0 { i64 1, i64 0, i32 264632089, i8 -120, i8 1, i8 1, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash8..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal8..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C2, %uncommonType.0* @go..C5, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1uint8, i32 0, i32 0) }, comdat
@runtime.memhash8..f = external constant %functionDescriptor.0
@runtime.memequal8..f = external constant %functionDescriptor.0
@const.3 = private constant [6 x i8] c"uint8\00", align 1
@go..C2 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.3, i32 0, i32 0), i64 5 }
@go..C3 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.3, i32 0, i32 0), i64 5 }
@go..C4 = internal global [1 x %method.0] zeroinitializer
@go..C5 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C3, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C4, i32 0, i32 0), i64 0, i64 0 } }
@type...1uint8 = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -60853863, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C6, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d }, comdat
@runtime.memhash64..f = external constant %functionDescriptor.0
@runtime.memequal64..f = external constant %functionDescriptor.0
@const.4 = private constant [7 x i8] c"*uint8\00", align 1
@go..C6 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.4, i32 0, i32 0), i64 6 }
@string..d = weak constant %_type.0 { i64 16, i64 8, i32 -1998952806, i8 24, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.strhash..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.strequal..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C7, %uncommonType.0* @go..C10, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1string, i32 0, i32 0) }, comdat
@runtime.strhash..f = external constant %functionDescriptor.0
@runtime.strequal..f = external constant %functionDescriptor.0
@const.5 = private constant [7 x i8] c"string\00", align 1
@go..C7 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.5, i32 0, i32 0), i64 6 }
@go..C8 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.5, i32 0, i32 0), i64 6 }
@go..C9 = internal global [1 x %method.0] zeroinitializer
@go..C10 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C8, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C9, i32 0, i32 0), i64 0, i64 0 } }
@type...1string = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1918473815, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C11, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d }, comdat
@const.6 = private constant [8 x i8] c"*string\00", align 1
@go..C11 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.6, i32 0, i32 0), i64 7 }
@type...1reflect.Value = external constant %PtrType.0
@const.7 = private constant [23 x i8] c"compare '%+v' is '%v'\0A\00", align 1
@reflect.Value..d = external constant %StructType.1
@bool..d = weak constant %_type.0 { i64 1, i64 0, i32 1537849745, i8 -127, i8 1, i8 1, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash8..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal8..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C12, %uncommonType.0* @go..C15, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1bool, i32 0, i32 0) }, comdat
@const.9 = private constant [5 x i8] c"bool\00", align 1
@go..C12 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.9, i32 0, i32 0), i64 4 }
@go..C13 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.9, i32 0, i32 0), i64 4 }
@go..C14 = internal global [1 x %method.0] zeroinitializer
@go..C15 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C13, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C14, i32 0, i32 0), i64 0, i64 0 } }
@type...1bool = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1164207847, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C16, %uncommonType.0* null, %_type.0* null }, %_type.0* @bool..d }, comdat
@const.10 = private constant [6 x i8] c"*bool\00", align 1
@go..C16 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.10, i32 0, i32 0), i64 5 }
@runtime.writeBarrier = external local_unnamed_addr externally_initialized global i32
@command_line_arguments.types = internal global { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* null
@const.12 = private constant [5 x i8] c"true\00", align 1
@const.13 = private constant [6 x i8] c"false\00", align 1
@const.14 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.12, i32 0, i32 0), i64 4 }
@const.15 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.13, i32 0, i32 0), i64 5 }
@type..map.6string.7interface.4.5 = weak constant %MapType.1 { %_type.0 { i64 8, i64 8, i32 -1998952774, i8 21, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C17, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5, i32 0, i32 0), i8 16, i8 0, i8 16, i8 0, i16 272, i8 1, i8 1 }, comdat
@const.16 = private constant [24 x i8] c"map[string]interface {}\00", align 1
@go..C17 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @const.16, i32 0, i32 0), i64 23 }
@type..interface.4.5 = weak constant %InterfaceType.1 { %_type.0 { i64 16, i64 16, i32 16, i8 20, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.nilinterhash..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.nilinterequal..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0), { i8*, i64 }* @go..C18, %uncommonType.0* null, %_type.0* null }, %IPST.23 { %imethod.0* getelementptr inbounds ([1 x %imethod.0], [1 x %imethod.0]* @go..C19, i32 0, i32 0), i64 0, i64 0 } }, comdat
@runtime.nilinterhash..f = external constant %functionDescriptor.0
@runtime.nilinterequal..f = external constant %functionDescriptor.0
@gcbits..da = weak constant [1 x i8] c"\03", comdat
@const.17 = private constant [13 x i8] c"interface {}\00", align 1
@go..C18 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.17, i32 0, i32 0), i64 12 }
@go..C19 = internal global [1 x %imethod.0] zeroinitializer
@type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5 = weak constant %StructType.1 { %_type.0 { i64 272, i64 272, i32 429210724, i8 25, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @gcbits..kwkEGGpa, i32 0, i32 0), { i8*, i64 }* @go..C20, %uncommonType.0* null, %_type.0* null }, %IPST.22 { %structField.0* getelementptr inbounds ([4 x %structField.0], [4 x %structField.0]* @go..C30, i32 0, i32 0), i64 4, i64 4 } }, comdat
@gcbits..kwkEGGpa = weak constant [5 x i8] c"\AA\AA\FE\FF\03", comdat
@const.18 = private constant [80 x i8] c"struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }\00", align 1
@go..C20 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([80 x i8], [80 x i8]* @const.18, i32 0, i32 0), i64 79 }
@const.19 = private constant [8 x i8] c"topbits\00", align 1
@go..C21 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.19, i32 0, i32 0), i64 7 }
@type...68x.7uint8 = weak constant %ArrayType.1 { %_type.0 { i64 8, i64 0, i32 529264193, i8 -111, i8 1, i8 1, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* null, { i8*, i64 }* @go..C22, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7uint8, i32 0, i32 0), i64 8 }, comdat
@const.20 = private constant [9 x i8] c"[8]uint8\00", align 1
@go..C22 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.20, i32 0, i32 0), i64 8 }
@const.21 = private constant [5 x i8] c"keys\00", align 1
@go..C23 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.21, i32 0, i32 0), i64 4 }
@type...68x.7string = weak constant %ArrayType.1 { %_type.0 { i64 128, i64 120, i32 297061699, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..wkwa, i32 0, i32 0), { i8*, i64 }* @go..C24, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7string, i32 0, i32 0), i64 8 }, comdat
@gcbits..wkwa = weak constant [2 x i8] c"UU", comdat
@const.22 = private constant [10 x i8] c"[8]string\00", align 1
@go..C24 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.22, i32 0, i32 0), i64 9 }
@type...6.7string = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 -1998952792, i8 23, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C25, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d }, comdat
@const.23 = private constant [9 x i8] c"[]string\00", align 1
@go..C25 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.23, i32 0, i32 0), i64 8 }
@const.24 = private constant [7 x i8] c"values\00", align 1
@go..C26 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.24, i32 0, i32 0), i64 6 }
@type...68x.7interface.4.5 = weak constant %ArrayType.1 { %_type.0 { i64 128, i64 128, i32 47, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..GGGb, i32 0, i32 0), { i8*, i64 }* @go..C27, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0), i64 8 }, comdat
@gcbits..GGGb = weak constant [2 x i8] c"\FF\FF", comdat
@const.25 = private constant [16 x i8] c"[8]interface {}\00", align 1
@go..C27 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.25, i32 0, i32 0), i64 15 }
@type...6.7interface.4.5 = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 30, i8 23, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C28, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0) }, comdat
@const.26 = private constant [15 x i8] c"[]interface {}\00", align 1
@go..C28 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.26, i32 0, i32 0), i64 14 }
@const.27 = private constant [9 x i8] c"overflow\00", align 1
@go..C29 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.27, i32 0, i32 0), i64 8 }
@unsafe.Pointer..d = external constant %_type.0
@go..C30 = internal global [4 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C21, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...68x.7uint8, i32 0, i32 0), { i8*, i64 }* null, i64 0 }, %structField.0 { { i8*, i64 }* @go..C23, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...68x.7string, i32 0, i32 0), { i8*, i64 }* null, i64 16 }, %structField.0 { { i8*, i64 }* @go..C26, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...68x.7interface.4.5, i32 0, i32 0), { i8*, i64 }* null, i64 272 }, %structField.0 { { i8*, i64 }* @go..C29, { i8*, i64 }* null, %_type.0* @unsafe.Pointer..d, { i8*, i64 }* null, i64 528 }]
@type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5 = weak constant %StructType.1 { %_type.0 { i64 48, i64 48, i32 -2113349148, i8 25, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..mb, i32 0, i32 0), { i8*, i64 }* @go..C31, %uncommonType.0* null, %_type.0* null }, %IPST.22 { %structField.0* getelementptr inbounds ([9 x %structField.0], [9 x %structField.0]* @go..C62, i32 0, i32 0), i64 9, i64 9 } }, comdat
@gcbits..mb = weak constant [1 x i8] c",", comdat
@const.28 = private constant [286 x i8] c"struct { count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets *struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }; oldbuckets *struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }; nevacuate uintptr; extra * }\00", align 1
@go..C31 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([286 x i8], [286 x i8]* @const.28, i32 0, i32 0), i64 285 }
@const.29 = private constant [6 x i8] c"count\00", align 1
@go..C32 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.29, i32 0, i32 0), i64 5 }
@int..d = weak constant %_type.0 { i64 8, i64 0, i32 876704034, i8 -126, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C33, %uncommonType.0* @go..C36, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1int, i32 0, i32 0) }, comdat
@const.30 = private constant [4 x i8] c"int\00", align 1
@go..C33 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.30, i32 0, i32 0), i64 3 }
@go..C34 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.30, i32 0, i32 0), i64 3 }
@go..C35 = internal global [1 x %method.0] zeroinitializer
@go..C36 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C34, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C35, i32 0, i32 0), i64 0, i64 0 } }
@type...1int = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1142362665, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C37, %uncommonType.0* null, %_type.0* null }, %_type.0* @int..d }, comdat
@const.31 = private constant [5 x i8] c"*int\00", align 1
@go..C37 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.31, i32 0, i32 0), i64 4 }
@const.32 = private constant [6 x i8] c"flags\00", align 1
@go..C38 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.32, i32 0, i32 0), i64 5 }
@const.33 = private constant [2 x i8] c"B\00", align 1
@go..C39 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const.33, i32 0, i32 0), i64 1 }
@const.34 = private constant [10 x i8] c"noverflow\00", align 1
@go..C40 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.34, i32 0, i32 0), i64 9 }
@uint16..d = weak constant %_type.0 { i64 2, i64 0, i32 76732288, i8 -119, i8 2, i8 2, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash16..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal16..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C41, %uncommonType.0* @go..C44, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1uint16, i32 0, i32 0) }, comdat
@runtime.memhash16..f = external constant %functionDescriptor.0
@runtime.memequal16..f = external constant %functionDescriptor.0
@const.35 = private constant [7 x i8] c"uint16\00", align 1
@go..C41 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.35, i32 0, i32 0), i64 6 }
@go..C42 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.35, i32 0, i32 0), i64 6 }
@go..C43 = internal global [1 x %method.0] zeroinitializer
@go..C44 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C42, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C43, i32 0, i32 0), i64 0, i64 0 } }
@type...1uint16 = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1227716617, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C45, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint16..d }, comdat
@const.36 = private constant [8 x i8] c"*uint16\00", align 1
@go..C45 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.36, i32 0, i32 0), i64 7 }
@const.37 = private constant [6 x i8] c"hash0\00", align 1
@go..C46 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.37, i32 0, i32 0), i64 5 }
@uint32..d = weak constant %_type.0 { i64 4, i64 0, i32 278357906, i8 -118, i8 4, i8 4, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash32..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal32..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C47, %uncommonType.0* @go..C50, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1uint32, i32 0, i32 0) }, comdat
@runtime.memhash32..f = external constant %functionDescriptor.0
@runtime.memequal32..f = external constant %functionDescriptor.0
@const.38 = private constant [7 x i8] c"uint32\00", align 1
@go..C47 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.38, i32 0, i32 0), i64 6 }
@go..C48 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.38, i32 0, i32 0), i64 6 }
@go..C49 = internal global [1 x %method.0] zeroinitializer
@go..C50 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C48, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C49, i32 0, i32 0), i64 0, i64 0 } }
@type...1uint32 = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 158759209, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C51, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint32..d }, comdat
@const.39 = private constant [8 x i8] c"*uint32\00", align 1
@go..C51 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.39, i32 0, i32 0), i64 7 }
@const.40 = private constant [8 x i8] c"buckets\00", align 1
@go..C52 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.40, i32 0, i32 0), i64 7 }
@type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5 = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1722562999, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C53, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, i32 0, i32 0) }, comdat
@const.41 = private constant [81 x i8] c"*struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }\00", align 1
@go..C53 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([81 x i8], [81 x i8]* @const.41, i32 0, i32 0), i64 80 }
@const.42 = private constant [11 x i8] c"oldbuckets\00", align 1
@go..C54 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.42, i32 0, i32 0), i64 10 }
@const.43 = private constant [10 x i8] c"nevacuate\00", align 1
@go..C55 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.43, i32 0, i32 0), i64 9 }
@uintptr..d = weak constant %_type.0 { i64 8, i64 0, i32 -1488193301, i8 -116, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* null, { i8*, i64 }* @go..C56, %uncommonType.0* @go..C59, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1uintptr, i32 0, i32 0) }, comdat
@const.44 = private constant [8 x i8] c"uintptr\00", align 1
@go..C56 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.44, i32 0, i32 0), i64 7 }
@go..C57 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.44, i32 0, i32 0), i64 7 }
@go..C58 = internal global [1 x %method.0] zeroinitializer
@go..C59 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C57, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C58, i32 0, i32 0), i64 0, i64 0 } }
@type...1uintptr = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1958710969, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C60, %uncommonType.0* null, %_type.0* null }, %_type.0* @uintptr..d }, comdat
@const.45 = private constant [9 x i8] c"*uintptr\00", align 1
@go..C60 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.45, i32 0, i32 0), i64 8 }
@const.46 = private constant [6 x i8] c"extra\00", align 1
@go..C61 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.46, i32 0, i32 0), i64 5 }
@go..C62 = internal global [9 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C32, { i8*, i64 }* null, %_type.0* @int..d, { i8*, i64 }* null, i64 0 }, %structField.0 { { i8*, i64 }* @go..C38, { i8*, i64 }* null, %_type.0* @uint8..d, { i8*, i64 }* null, i64 16 }, %structField.0 { { i8*, i64 }* @go..C39, { i8*, i64 }* null, %_type.0* @uint8..d, { i8*, i64 }* null, i64 18 }, %structField.0 { { i8*, i64 }* @go..C40, { i8*, i64 }* null, %_type.0* @uint16..d, { i8*, i64 }* null, i64 20 }, %structField.0 { { i8*, i64 }* @go..C46, { i8*, i64 }* null, %_type.0* @uint32..d, { i8*, i64 }* null, i64 24 }, %structField.0 { { i8*, i64 }* @go..C52, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, i32 0, i32 0), { i8*, i64 }* null, i64 32 }, %structField.0 { { i8*, i64 }* @go..C54, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, i32 0, i32 0), { i8*, i64 }* null, i64 48 }, %structField.0 { { i8*, i64 }* @go..C55, { i8*, i64 }* null, %_type.0* @uintptr..d, { i8*, i64 }* null, i64 64 }, %structField.0 { { i8*, i64 }* @go..C61, { i8*, i64 }* null, %_type.0* @unsafe.Pointer..d, { i8*, i64 }* null, i64 80 }]
@command_line_arguments.Scope..d = constant %StructType.1 { %_type.0 { i64 8, i64 8, i32 -338238368, i8 25, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C63, %uncommonType.0* @go..C67, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Scope, i32 0, i32 0) }, %IPST.22 { %structField.0* getelementptr inbounds ([1 x %structField.0], [1 x %structField.0]* @go..C87, i32 0, i32 0), i64 1, i64 1 } }
@const.47 = private constant [35 x i8] c"\09command_line_arguments\09eval.Scope\00", align 1
@go..C63 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @const.47, i32 0, i32 0), i64 34 }
@const.48 = private constant [6 x i8] c"Scope\00", align 1
@go..C64 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.48, i32 0, i32 0), i64 5 }
@const.49 = private constant [23 x i8] c"command-line-arguments\00", align 1
@go..C65 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@go..C66 = internal global [1 x %method.0] zeroinitializer
@go..C67 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C64, { i8*, i64 }* @go..C65, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C66, i32 0, i32 0), i64 0, i64 0 } }
@type...1command_line_arguments.Scope = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1116846583, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C68, %uncommonType.0* @go..C84, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1.1command_line_arguments.Scope, i32 0, i32 0) }, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Scope..d, i32 0, i32 0) }, comdat
@const.50 = private constant [36 x i8] c"*\09command_line_arguments\09eval.Scope\00", align 1
@go..C68 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([36 x i8], [36 x i8]* @const.50, i32 0, i32 0), i64 35 }
@const.51 = private constant [7 x i8] c"Insert\00", align 1
@go..C69 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.51, i32 0, i32 0), i64 6 }
@type..func.8string.3interface.4.5.9.8.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 458020680, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C70, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C71, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C72, i32 0, i32 0), i64 0, i64 0 } }, comdat
@const.52 = private constant [27 x i8] c"func(string, interface {})\00", align 1
@go..C70 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @const.52, i32 0, i32 0), i64 26 }
@go..C71 = internal global [2 x %_type.0*] [%_type.0* @string..d, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0)]
@go..C72 = internal global [1 x %_type.0*] zeroinitializer
@type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -463310936, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C73, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([3 x %_type.0*], [3 x %_type.0*]* @go..C74, i32 0, i32 0), i64 3, i64 3 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C75, i32 0, i32 0), i64 0, i64 0 } }, comdat
@const.53 = private constant [64 x i8] c"func(*\09command_line_arguments\09eval.Scope, string, interface {})\00", align 1
@go..C73 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([64 x i8], [64 x i8]* @const.53, i32 0, i32 0), i64 63 }
@go..C74 = internal global [3 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Scope, i32 0, i32 0), %_type.0* @string..d, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0)]
@go..C75 = internal global [1 x %_type.0*] zeroinitializer
@const.54 = private constant [7 x i8] c"Lookup\00", align 1
@go..C76 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.54, i32 0, i32 0), i64 6 }
@type..func.8string.9.8interface.4.5.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 458020680, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C77, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C78, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C79, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.55 = private constant [26 x i8] c"func(string) interface {}\00", align 1
@go..C77 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @const.55, i32 0, i32 0), i64 25 }
@go..C78 = internal global [1 x %_type.0*] [%_type.0* @string..d]
@go..C79 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -463311960, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C80, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C81, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C82, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.56 = private constant [63 x i8] c"func(*\09command_line_arguments\09eval.Scope, string) interface {}\00", align 1
@go..C80 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @const.56, i32 0, i32 0), i64 62 }
@go..C81 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Scope, i32 0, i32 0), %_type.0* @string..d]
@go..C82 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0)]
@go..C83 = internal global [2 x %method.0] [%method.0 { { i8*, i64 }* @go..C69, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8string.3interface.4.5.9.8.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9, i32 0, i32 0), i8* bitcast (void (i8*, %Scope.0*, i64, i64, i64, i64)* @command_line_arguments.Scope.Insert to i8*) }, %method.0 { { i8*, i64 }* @go..C76, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8string.9.8interface.4.5.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9, i32 0, i32 0), i8* bitcast ({ i64, i64 } (i8*, %Scope.0*, i64, i64)* @command_line_arguments.Scope.Lookup to i8*) }]
@go..C84 = internal constant %uncommonType.0 { { i8*, i64 }* null, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([2 x %method.0], [2 x %method.0]* @go..C83, i32 0, i32 0), i64 2, i64 2 } }
@type...1.1command_line_arguments.Scope = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -689676135, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C85, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Scope, i32 0, i32 0) }, comdat
@const.57 = private constant [37 x i8] c"**\09command_line_arguments\09eval.Scope\00", align 1
@go..C85 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @const.57, i32 0, i32 0), i64 36 }
@const.58 = private constant [8 x i8] c"Objects\00", align 1
@go..C86 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.58, i32 0, i32 0), i64 7 }
@go..C87 = internal global [1 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C86, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i32 0, i32 0), { i8*, i64 }* null, i64 0 }]
@command_line_arguments.NewScope..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (%Scope.0* (i8*)* @command_line_arguments.NewScope to i64) }
@command_line_arguments.Context..d = constant %StructType.1 { %_type.0 { i64 32, i64 32, i32 1700601581, i8 25, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..la, i32 0, i32 0), { i8*, i64 }* @go..C88, %uncommonType.0* @go..C92, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0) }, %IPST.22 { %structField.0* getelementptr inbounds ([4 x %structField.0], [4 x %structField.0]* @go..C224, i32 0, i32 0), i64 4, i64 4 } }
@gcbits..la = weak constant [1 x i8] c"\0B", comdat
@const.61 = private constant [37 x i8] c"\09command_line_arguments\09eval.Context\00", align 1
@go..C88 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @const.61, i32 0, i32 0), i64 36 }
@const.62 = private constant [8 x i8] c"Context\00", align 1
@go..C89 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.62, i32 0, i32 0), i64 7 }
@go..C90 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@go..C91 = internal global [1 x %method.0] zeroinitializer
@go..C92 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C89, { i8*, i64 }* @go..C90, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C91, i32 0, i32 0), i64 0, i64 0 } }
@type...1command_line_arguments.Context = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1439821529, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C93, %uncommonType.0* @go..C214, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1.1command_line_arguments.Context, i32 0, i32 0) }, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Context..d, i32 0, i32 0) }, comdat
@const.63 = private constant [38 x i8] c"*\09command_line_arguments\09eval.Context\00", align 1
@go..C93 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @const.63, i32 0, i32 0), i64 37 }
@const.64 = private constant [5 x i8] c"Eval\00", align 1
@go..C94 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.64, i32 0, i32 0), i64 4 }
@type..func.8go_ast.Node.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -625305720, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C95, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C96, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C107, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.65 = private constant [56 x i8] c"func(\09go_ast\09ast.Node) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C95 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @const.65, i32 0, i32 0), i64 55 }
@go_ast.Node..d = external constant %InterfaceType.1
@go..C96 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i32 0, i32 0)]
@error..d = weak constant %InterfaceType.1 { %_type.0 { i64 16, i64 16, i32 -2128909609, i8 20, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.interhash..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.interequal..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0), { i8*, i64 }* @go..C97, %uncommonType.0* @go..C100, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1error, i32 0, i32 0) }, %IPST.23 { %imethod.0* getelementptr inbounds ([1 x %imethod.0], [1 x %imethod.0]* @go..C106, i32 0, i32 0), i64 1, i64 1 } }, comdat
@runtime.interhash..f = external constant %functionDescriptor.0
@runtime.interequal..f = external constant %functionDescriptor.0
@const.66 = private constant [6 x i8] c"error\00", align 1
@go..C97 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.66, i32 0, i32 0), i64 5 }
@go..C98 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.66, i32 0, i32 0), i64 5 }
@go..C99 = internal global [1 x %method.0] zeroinitializer
@go..C100 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C98, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C99, i32 0, i32 0), i64 0, i64 0 } }
@type...1error = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 297184633, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C101, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0) }, comdat
@const.67 = private constant [7 x i8] c"*error\00", align 1
@go..C101 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.67, i32 0, i32 0), i64 6 }
@const.68 = private constant [6 x i8] c"Error\00", align 1
@go..C102 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.68, i32 0, i32 0), i64 5 }
@type..func.8.9.8string.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 916039304, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C103, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C104, i32 0, i32 0), i64 0, i64 0 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C105, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.69 = private constant [14 x i8] c"func() string\00", align 1
@go..C103 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.69, i32 0, i32 0), i64 13 }
@go..C104 = internal global [1 x %_type.0*] zeroinitializer
@go..C105 = internal global [1 x %_type.0*] [%_type.0* @string..d]
@go..C106 = internal global [1 x %imethod.0] [%imethod.0 { { i8*, i64 }* @go..C102, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8string.9, i32 0, i32 0) }]
@go..C107 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1907867752, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C108, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C109, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C110, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.70 = private constant [95 x i8] c"func(*\09command_line_arguments\09eval.Context, \09go_ast\09ast.Node) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C108 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([95 x i8], [95 x i8]* @const.70, i32 0, i32 0), i64 94 }
@go..C109 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i32 0, i32 0)]
@go..C110 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.71 = private constant [15 x i8] c"evalAssignStmt\00", align 1
@go..C111 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.71, i32 0, i32 0), i64 14 }
@go..C112 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1724129048, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C113, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C114, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C115, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.72 = private constant [63 x i8] c"func(*\09go_ast\09ast.AssignStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C113 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @const.72, i32 0, i32 0), i64 62 }
@type...1go_ast.AssignStmt = external constant %PtrType.0
@go..C114 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.AssignStmt, i32 0, i32 0)]
@go..C115 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -289778904, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C116, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C117, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C118, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.73 = private constant [102 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.AssignStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C116 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @const.73, i32 0, i32 0), i64 101 }
@go..C117 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.AssignStmt, i32 0, i32 0)]
@go..C118 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.74 = private constant [15 x i8] c"evalBinaryExpr\00", align 1
@go..C119 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.74, i32 0, i32 0), i64 14 }
@go..C120 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 334498536, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C121, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C122, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C123, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.75 = private constant [63 x i8] c"func(*\09go_ast\09ast.BinaryExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C121 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @const.75, i32 0, i32 0), i64 62 }
@type...1go_ast.BinaryExpr = external constant %PtrType.0
@go..C122 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BinaryExpr, i32 0, i32 0)]
@go..C123 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -467491032, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C124, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C125, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C126, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.76 = private constant [102 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.BinaryExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C124 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @const.76, i32 0, i32 0), i64 101 }
@go..C125 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BinaryExpr, i32 0, i32 0)]
@go..C126 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.77 = private constant [14 x i8] c"evalBlockStmt\00", align 1
@go..C127 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.77, i32 0, i32 0), i64 13 }
@go..C128 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 628351208, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C129, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C130, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C131, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.78 = private constant [62 x i8] c"func(*\09go_ast\09ast.BlockStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C129 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([62 x i8], [62 x i8]* @const.78, i32 0, i32 0), i64 61 }
@type...1go_ast.BlockStmt = external constant %PtrType.0
@go..C130 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i32 0, i32 0)]
@go..C131 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 120214312, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C132, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C133, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C134, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.79 = private constant [101 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.BlockStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C132 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([101 x i8], [101 x i8]* @const.79, i32 0, i32 0), i64 100 }
@go..C133 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i32 0, i32 0)]
@go..C134 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.80 = private constant [13 x i8] c"evalCallExpr\00", align 1
@go..C135 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.80, i32 0, i32 0), i64 12 }
@go..C136 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1968025368, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C137, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C138, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C139, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.81 = private constant [61 x i8] c"func(*\09go_ast\09ast.CallExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C137 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([61 x i8], [61 x i8]* @const.81, i32 0, i32 0), i64 60 }
@type...1go_ast.CallExpr = external constant %PtrType.0
@go..C138 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.CallExpr, i32 0, i32 0)]
@go..C139 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -777571544, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C140, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C141, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C142, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.82 = private constant [100 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.CallExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C140 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([100 x i8], [100 x i8]* @const.82, i32 0, i32 0), i64 99 }
@go..C141 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.CallExpr, i32 0, i32 0)]
@go..C142 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.83 = private constant [9 x i8] c"evalDecl\00", align 1
@go..C143 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.83, i32 0, i32 0), i64 8 }
@go..C144 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1636413832, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C145, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C146, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C147, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.84 = private constant [56 x i8] c"func(\09go_ast\09ast.Decl) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C145 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @const.84, i32 0, i32 0), i64 55 }
@go_ast.Decl..d = external constant %InterfaceType.1
@go..C146 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i32 0, i32 0)]
@go..C147 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 2136339560, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C148, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C149, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C150, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.85 = private constant [95 x i8] c"func(*\09command_line_arguments\09eval.Context, \09go_ast\09ast.Decl) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C148 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([95 x i8], [95 x i8]* @const.85, i32 0, i32 0), i64 94 }
@go..C149 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i32 0, i32 0)]
@go..C150 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.86 = private constant [9 x i8] c"evalExpr\00", align 1
@go..C151 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.86, i32 0, i32 0), i64 8 }
@go..C152 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1061055960, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C153, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C154, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C155, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.87 = private constant [56 x i8] c"func(\09go_ast\09ast.Expr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C153 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @const.87, i32 0, i32 0), i64 55 }
@go_ast.Expr..d = external constant %InterfaceType.1
@go..C154 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i32 0, i32 0)]
@go..C155 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1036367272, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C156, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C157, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C158, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.88 = private constant [95 x i8] c"func(*\09command_line_arguments\09eval.Context, \09go_ast\09ast.Expr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C156 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([95 x i8], [95 x i8]* @const.88, i32 0, i32 0), i64 94 }
@go..C157 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i32 0, i32 0)]
@go..C158 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.89 = private constant [13 x i8] c"evalExprStmt\00", align 1
@go..C159 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.89, i32 0, i32 0), i64 12 }
@go..C160 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1893840104, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C161, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C162, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C163, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.90 = private constant [61 x i8] c"func(*\09go_ast\09ast.ExprStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C161 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([61 x i8], [61 x i8]* @const.90, i32 0, i32 0), i64 60 }
@type...1go_ast.ExprStmt = external constant %PtrType.0
@go..C162 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ExprStmt, i32 0, i32 0)]
@go..C163 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1643775192, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C164, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C165, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C166, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.91 = private constant [100 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.ExprStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C164 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([100 x i8], [100 x i8]* @const.91, i32 0, i32 0), i64 99 }
@go..C165 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ExprStmt, i32 0, i32 0)]
@go..C166 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.92 = private constant [13 x i8] c"evalFuncDecl\00", align 1
@go..C167 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.92, i32 0, i32 0), i64 12 }
@go..C168 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.93 = private constant [12 x i8] c"evalGenDecl\00", align 1
@go..C169 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.93, i32 0, i32 0), i64 11 }
@go..C170 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.94 = private constant [10 x i8] c"evalIdent\00", align 1
@go..C171 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.94, i32 0, i32 0), i64 9 }
@go..C172 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.95 = private constant [11 x i8] c"evalIfStmt\00", align 1
@go..C173 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.95, i32 0, i32 0), i64 10 }
@go..C174 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 2126730472, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C175, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C176, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C177, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.96 = private constant [59 x i8] c"func(*\09go_ast\09ast.IfStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C175 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @const.96, i32 0, i32 0), i64 58 }
@type...1go_ast.IfStmt = external constant %PtrType.0
@go..C176 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.IfStmt, i32 0, i32 0)]
@go..C177 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1177994456, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C178, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C179, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C180, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.97 = private constant [98 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.IfStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C178 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([98 x i8], [98 x i8]* @const.97, i32 0, i32 0), i64 97 }
@go..C179 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.IfStmt, i32 0, i32 0)]
@go..C180 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.98 = private constant [15 x i8] c"evalReturnStmt\00", align 1
@go..C181 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.98, i32 0, i32 0), i64 14 }
@go..C182 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1172779288, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C183, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C184, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C185, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.99 = private constant [63 x i8] c"func(*\09go_ast\09ast.ReturnStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C183 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @const.99, i32 0, i32 0), i64 62 }
@type...1go_ast.ReturnStmt = external constant %PtrType.0
@go..C184 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ReturnStmt, i32 0, i32 0)]
@go..C185 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 812920616, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C186, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C187, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C188, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.100 = private constant [102 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.ReturnStmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C186 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @const.100, i32 0, i32 0), i64 101 }
@go..C187 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ReturnStmt, i32 0, i32 0)]
@go..C188 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.101 = private constant [17 x i8] c"evalSelectorExpr\00", align 1
@go..C189 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @const.101, i32 0, i32 0), i64 16 }
@go..C190 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 2126392040, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C191, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C192, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C193, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.102 = private constant [65 x i8] c"func(*\09go_ast\09ast.SelectorExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C191 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @const.102, i32 0, i32 0), i64 64 }
@type...1go_ast.SelectorExpr = external constant %PtrType.0
@go..C192 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i32 0, i32 0)]
@go..C193 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1178671320, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C194, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C195, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C196, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.103 = private constant [104 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.SelectorExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C194 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([104 x i8], [104 x i8]* @const.103, i32 0, i32 0), i64 103 }
@go..C195 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i32 0, i32 0)]
@go..C196 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.104 = private constant [9 x i8] c"evalStmt\00", align 1
@go..C197 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.104, i32 0, i32 0), i64 8 }
@go..C198 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -684389432, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C199, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C200, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C201, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.105 = private constant [56 x i8] c"func(\09go_ast\09ast.Stmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C199 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @const.105, i32 0, i32 0), i64 55 }
@go_ast.Stmt..d = external constant %InterfaceType.1
@go..C200 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i32 0, i32 0)]
@go..C201 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1789700328, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C202, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C203, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C204, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.106 = private constant [95 x i8] c"func(*\09command_line_arguments\09eval.Context, \09go_ast\09ast.Stmt) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C202 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([95 x i8], [95 x i8]* @const.106, i32 0, i32 0), i64 94 }
@go..C203 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i32 0, i32 0)]
@go..C204 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@const.107 = private constant [14 x i8] c"evalUnaryExpr\00", align 1
@go..C205 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.107, i32 0, i32 0), i64 13 }
@go..C206 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 2124596968, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C207, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C208, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C209, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.108 = private constant [62 x i8] c"func(*\09go_ast\09ast.UnaryExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C207 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([62 x i8], [62 x i8]* @const.108, i32 0, i32 0), i64 61 }
@type...1go_ast.UnaryExpr = external constant %PtrType.0
@go..C208 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.UnaryExpr, i32 0, i32 0)]
@go..C209 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1182261464, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C210, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C211, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C212, i32 0, i32 0), i64 2, i64 2 } }, comdat
@const.109 = private constant [101 x i8] c"func(*\09command_line_arguments\09eval.Context, *\09go_ast\09ast.UnaryExpr) (*\09reflect\09reflect.Value, error)\00", align 1
@go..C210 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([101 x i8], [101 x i8]* @const.109, i32 0, i32 0), i64 100 }
@go..C211 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0), %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.UnaryExpr, i32 0, i32 0)]
@go..C212 = internal global [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i32 0, i32 0)]
@go..C213 = internal global [16 x %method.0] [%method.0 { { i8*, i64 }* @go..C94, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Node.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.Eval to i8*) }, %method.0 { { i8*, i64 }* @go..C111, { i8*, i64 }* @go..C112, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %AssignStmt.0*)* @command_line_arguments.Context.evalAssignStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C119, { i8*, i64 }* @go..C120, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %BinaryExpr.0*)* @command_line_arguments.Context.evalBinaryExpr to i8*) }, %method.0 { { i8*, i64 }* @go..C127, { i8*, i64 }* @go..C128, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %BlockStmt.0*)* @command_line_arguments.Context.evalBlockStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C135, { i8*, i64 }* @go..C136, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %CallExpr.0*)* @command_line_arguments.Context.evalCallExpr to i8*) }, %method.0 { { i8*, i64 }* @go..C143, { i8*, i64 }* @go..C144, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalDecl to i8*) }, %method.0 { { i8*, i64 }* @go..C151, { i8*, i64 }* @go..C152, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalExpr to i8*) }, %method.0 { { i8*, i64 }* @go..C159, { i8*, i64 }* @go..C160, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %ExprStmt.0*)* @command_line_arguments.Context.evalExprStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C167, { i8*, i64 }* @go..C168, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalFuncDecl to i8*) }, %method.0 { { i8*, i64 }* @go..C169, { i8*, i64 }* @go..C170, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalGenDecl to i8*) }, %method.0 { { i8*, i64 }* @go..C171, { i8*, i64 }* @go..C172, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalIdent to i8*) }, %method.0 { { i8*, i64 }* @go..C173, { i8*, i64 }* @go..C174, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %IfStmt.0*)* @command_line_arguments.Context.evalIfStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C181, { i8*, i64 }* @go..C182, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %ReturnStmt.0*)* @command_line_arguments.Context.evalReturnStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C189, { i8*, i64 }* @go..C190, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %SelectorExpr.0*)* @command_line_arguments.Context.evalSelectorExpr to i8*) }, %method.0 { { i8*, i64 }* @go..C197, { i8*, i64 }* @go..C198, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, i64, i64)* @command_line_arguments.Context.evalStmt to i8*) }, %method.0 { { i8*, i64 }* @go..C205, { i8*, i64 }* @go..C206, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9, i32 0, i32 0), i8* bitcast (void ({ %Value.0*, %error.0 }*, i8*, %Context.0*, %UnaryExpr.0*)* @command_line_arguments.Context.evalUnaryExpr to i8*) }]
@go..C214 = internal constant %uncommonType.0 { { i8*, i64 }* null, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([16 x %method.0], [16 x %method.0]* @go..C213, i32 0, i32 0), i64 16, i64 16 } }
@type...1.1command_line_arguments.Context = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1562307993, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C215, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.Context, i32 0, i32 0) }, comdat
@const.110 = private constant [39 x i8] c"**\09command_line_arguments\09eval.Context\00", align 1
@go..C215 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @const.110, i32 0, i32 0), i64 38 }
@const.111 = private constant [5 x i8] c"fset\00", align 1
@go..C216 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.111, i32 0, i32 0), i64 4 }
@go..C217 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@type...1go_token.FileSet = external constant %PtrType.0
@const.112 = private constant [12 x i8] c"identifiers\00", align 1
@go..C218 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.112, i32 0, i32 0), i64 11 }
@go..C219 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.113 = private constant [10 x i8] c"returnSet\00", align 1
@go..C220 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.113, i32 0, i32 0), i64 9 }
@go..C221 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.114 = private constant [12 x i8] c"returnValue\00", align 1
@go..C222 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.114, i32 0, i32 0), i64 11 }
@go..C223 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@go..C224 = internal global [4 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C216, { i8*, i64 }* @go..C217, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_token.FileSet, i32 0, i32 0), { i8*, i64 }* null, i64 0 }, %structField.0 { { i8*, i64 }* @go..C218, { i8*, i64 }* @go..C219, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i32 0, i32 0), { i8*, i64 }* null, i64 16 }, %structField.0 { { i8*, i64 }* @go..C220, { i8*, i64 }* @go..C221, %_type.0* @bool..d, { i8*, i64 }* null, i64 32 }, %structField.0 { { i8*, i64 }* @go..C222, { i8*, i64 }* @go..C223, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i32 0, i32 0), { i8*, i64 }* null, i64 48 }]
@const.118 = private constant [27 x i8] c"Ident '%s' already exists\0A\00", align 1
@command_line_arguments.NewContext..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (void ({ %Context.0*, %error.0 }*, i8*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*)* @command_line_arguments.NewContext to i64) }
@type...1go_ast.FuncDecl = external constant %PtrType.0
@type...1go_ast.GenDecl = external constant %PtrType.0
@const.121 = private constant [31 x i8] c"unhandled ast.Decl type: '%v'\0A\00", align 1
@command_line_arguments.False = global %Value.0 zeroinitializer
@command_line_arguments.True = global %Value.0 zeroinitializer
@command_line_arguments.Nil = global %Value.0 zeroinitializer
@command_line_arguments.ErrInvalidValue = global %error.0 zeroinitializer
@const.123 = private constant [25 x i8] c"reflect.Value is invalid\00", align 1
@command_line_arguments.ErrReturnValue = global %error.0 zeroinitializer
@const.125 = private constant [20 x i8] c"return value is set\00", align 1
@const.127 = private constant [31 x i8] c"unhandled ast.Node type: '%v'\0A\00", align 1
@command_line_arguments.EvalError..d = constant %StructType.1 { %_type.0 { i64 48, i64 40, i32 -586401556, i8 25, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @command_line_arguments.command_line_arguments.EvalError..hash..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @command_line_arguments.command_line_arguments.EvalError..eq..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ya, i32 0, i32 0), { i8*, i64 }* @go..C225, %uncommonType.0* @go..C241, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.EvalError, i32 0, i32 0) }, %IPST.22 { %structField.0* getelementptr inbounds ([3 x %structField.0], [3 x %structField.0]* @go..C258, i32 0, i32 0), i64 3, i64 3 } }
@command_line_arguments.command_line_arguments.EvalError..hash..f = constant %functionDescriptor.0 { i64 ptrtoint (i64 (i8*, i8*, i64)* @command_line_arguments.command_line_arguments.EvalError..hash to i64) }
@command_line_arguments.command_line_arguments.EvalError..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_line_arguments.command_line_arguments.EvalError..eq to i64) }
@gcbits..ya = weak constant [1 x i8] c"\17", comdat
@const.129 = private constant [39 x i8] c"\09command_line_arguments\09eval.EvalError\00", align 1
@go..C225 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @const.129, i32 0, i32 0), i64 38 }
@const.130 = private constant [10 x i8] c"EvalError\00", align 1
@go..C226 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.130, i32 0, i32 0), i64 9 }
@go..C227 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@const.131 = private constant [4 x i8] c"End\00", align 1
@go..C228 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.131, i32 0, i32 0), i64 3 }
@type..func.8.9.8go_token.Pos.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 321518792, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C229, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C230, i32 0, i32 0), i64 0, i64 0 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C231, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.132 = private constant [27 x i8] c"func() \09go_token\09token.Pos\00", align 1
@go..C229 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @const.132, i32 0, i32 0), i64 26 }
@go..C230 = internal global [1 x %_type.0*] zeroinitializer
@go_token.Pos..d = external constant %_type.0
@go..C231 = internal global [1 x %_type.0*] [%_type.0* @go_token.Pos..d]
@type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -1263461816, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C232, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C233, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C234, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.133 = private constant [65 x i8] c"func(\09command_line_arguments\09eval.EvalError) \09go_token\09token.Pos\00", align 1
@go..C232 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @const.133, i32 0, i32 0), i64 64 }
@go..C233 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i32 0, i32 0)]
@go..C234 = internal global [1 x %_type.0*] [%_type.0* @go_token.Pos..d]
@go..C235 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.68, i32 0, i32 0), i64 5 }
@type..func.8command_line_arguments.EvalError.9.8string.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 -668941304, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C236, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C237, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C238, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.134 = private constant [52 x i8] c"func(\09command_line_arguments\09eval.EvalError) string\00", align 1
@go..C236 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([52 x i8], [52 x i8]* @const.134, i32 0, i32 0), i64 51 }
@go..C237 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i32 0, i32 0)]
@go..C238 = internal global [1 x %_type.0*] [%_type.0* @string..d]
@const.135 = private constant [4 x i8] c"Pos\00", align 1
@go..C239 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.135, i32 0, i32 0), i64 3 }
@go..C240 = internal global [3 x %method.0] [%method.0 { { i8*, i64 }* @go..C228, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8go_token.Pos.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9, i32 0, i32 0), i8* bitcast (i64 (i8*, %EvalError.0*)* @command_line_arguments.EvalError.End..stub to i8*) }, %method.0 { { i8*, i64 }* @go..C235, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8string.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8command_line_arguments.EvalError.9.8string.9, i32 0, i32 0), i8* bitcast ({ i64, i64 } (i8*, %EvalError.0*)* @command_line_arguments.EvalError.Error to i8*) }, %method.0 { { i8*, i64 }* @go..C239, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8go_token.Pos.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9, i32 0, i32 0), i8* bitcast (i64 (i8*, %EvalError.0*)* @command_line_arguments.EvalError.Pos..stub to i8*) }]
@go..C241 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C226, { i8*, i64 }* @go..C227, %IPST.20 { %method.0* getelementptr inbounds ([3 x %method.0], [3 x %method.0]* @go..C240, i32 0, i32 0), i64 3, i64 3 } }
@type...1command_line_arguments.EvalError = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -792490295, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C242, %uncommonType.0* @go..C253, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1.1command_line_arguments.EvalError, i32 0, i32 0) }, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i32 0, i32 0) }, comdat
@const.136 = private constant [40 x i8] c"*\09command_line_arguments\09eval.EvalError\00", align 1
@go..C242 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @const.136, i32 0, i32 0), i64 39 }
@go..C243 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.131, i32 0, i32 0), i64 3 }
@type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 731633128, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C244, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C245, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C246, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.137 = private constant [66 x i8] c"func(*\09command_line_arguments\09eval.EvalError) \09go_token\09token.Pos\00", align 1
@go..C244 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([66 x i8], [66 x i8]* @const.137, i32 0, i32 0), i64 65 }
@go..C245 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.EvalError, i32 0, i32 0)]
@go..C246 = internal global [1 x %_type.0*] [%_type.0* @go_token.Pos..d]
@go..C247 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.68, i32 0, i32 0), i64 5 }
@type..func.8.1command_line_arguments.EvalError.9.8string.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 1326153640, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C248, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C249, i32 0, i32 0), i64 1, i64 1 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C250, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.138 = private constant [53 x i8] c"func(*\09command_line_arguments\09eval.EvalError) string\00", align 1
@go..C248 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @const.138, i32 0, i32 0), i64 52 }
@go..C249 = internal global [1 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.EvalError, i32 0, i32 0)]
@go..C250 = internal global [1 x %_type.0*] [%_type.0* @string..d]
@go..C251 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.135, i32 0, i32 0), i64 3 }
@go..C252 = internal global [3 x %method.0] [%method.0 { { i8*, i64 }* @go..C243, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8go_token.Pos.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9, i32 0, i32 0), i8* bitcast (i64 (i8*, %EvalError.0*)* @command_line_arguments.EvalError.End..stub to i8*) }, %method.0 { { i8*, i64 }* @go..C247, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8string.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.EvalError.9.8string.9, i32 0, i32 0), i8* bitcast ({ i64, i64 } (i8*, %EvalError.0*)* @command_line_arguments.EvalError.Error to i8*) }, %method.0 { { i8*, i64 }* @go..C251, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.9.8go_token.Pos.9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9, i32 0, i32 0), i8* bitcast (i64 (i8*, %EvalError.0*)* @command_line_arguments.EvalError.Pos..stub to i8*) }]
@go..C253 = internal constant %uncommonType.0 { { i8*, i64 }* null, { i8*, i64 }* null, %IPST.20 { %method.0* getelementptr inbounds ([3 x %method.0], [3 x %method.0]* @go..C252, i32 0, i32 0), i64 3, i64 3 } }
@type...1.1command_line_arguments.EvalError = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 205057177, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C254, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.EvalError, i32 0, i32 0) }, comdat
@const.139 = private constant [41 x i8] c"**\09command_line_arguments\09eval.EvalError\00", align 1
@go..C254 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([41 x i8], [41 x i8]* @const.139, i32 0, i32 0), i64 40 }
@const.140 = private constant [5 x i8] c"Node\00", align 1
@go..C255 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.140, i32 0, i32 0), i64 4 }
@const.141 = private constant [5 x i8] c"Type\00", align 1
@go..C256 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.141, i32 0, i32 0), i64 4 }
@const.142 = private constant [4 x i8] c"Msg\00", align 1
@go..C257 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.142, i32 0, i32 0), i64 3 }
@go..C258 = internal global [3 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C255, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i32 0, i32 0), { i8*, i64 }* null, i64 1 }, %structField.0 { { i8*, i64 }* @go..C256, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* null, i64 32 }, %structField.0 { { i8*, i64 }* @go..C257, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* null, i64 64 }]
@const.143 = private constant [14 x i8] c"%s[%d:%d]: %s\00", align 1
@const.145 = private constant %IPST.1 zeroinitializer
@type...1go_ast.Ident = external constant %PtrType.0
@type...1go_ast.BasicLit = external constant %PtrType.0
@go_token.Token..d = external constant %_type.0
@const.147 = private constant [29 x i8] c"unhandled BasicLit type '%s'\00", align 1
@const.149 = private constant [31 x i8] c"unhandled ast.Expr type: '%v'\0A\00", align 1
@const.151 = private constant [18 x i8] c"evalCallExpr: %v\0A\00", align 1
@type...61x.7interface.4.5 = weak constant %ArrayType.1 { %_type.0 { i64 16, i64 16, i32 47, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0), { i8*, i64 }* @go..C259, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0), i64 1 }, comdat
@const.152 = private constant [16 x i8] c"[1]interface {}\00", align 1
@go..C259 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.152, i32 0, i32 0), i64 15 }
@command_line_arguments.PkgLogger = global %.command-line-arguments.logger.0 zeroinitializer
@const.155 = private constant [36 x i8] c"evalCallExpr: invalid return value\0A\00", align 1
@const.157 = private constant [26 x i8] c"evalCallExpr: result=%+v\0A\00", align 1
@const.159 = private constant [42 x i8] c"Expected type '*ast.Ident', received '%v'\00", align 1
@const.161 = private constant [31 x i8] c"evalIdent: %+v, identifer=%+v\0A\00", align 1
@type...62x.7interface.4.5 = weak constant %ArrayType.1 { %_type.0 { i64 32, i64 32, i32 47, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..pa, i32 0, i32 0), { i8*, i64 }* @go..C260, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0), i64 2 }, comdat
@gcbits..pa = weak constant [1 x i8] c"\0F", comdat
@const.162 = private constant [16 x i8] c"[2]interface {}\00", align 1
@go..C260 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.162, i32 0, i32 0), i64 15 }
@const.164 = private constant [16 x i8] c"evalIdent: %+v\0A\00", align 1
@const.166 = private constant [18 x i8] c"UnknownIdentifier\00", align 1
@const.167 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.166, i32 0, i32 0), i64 17 }
@const.168 = private constant [19 x i8] c"no identifier '%s'\00", align 1
@imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError = weak constant { %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* } { %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i32 0, i32 0), { i64, i64 } (i8*, %EvalError.0*)* @command_line_arguments.EvalError.Error }, comdat
@const.170 = private constant [31 x i8] c"evalSelectorExpr: INVALID %+v\0A\00", align 1
@const.172 = private constant [16 x i8] c"InvalidSelector\00", align 1
@const.173 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.172, i32 0, i32 0), i64 15 }
@const.174 = private constant [21 x i8] c"InvalidSelector: %+v\00", align 1
@pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr = weak constant { %_type.0*, i64 (i8*, %SelectorExpr.0*)*, i64 (i8*, %SelectorExpr.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i32 0, i32 0), i64 (i8*, %SelectorExpr.0*)* @go_ast.SelectorExpr.End, i64 (i8*, %SelectorExpr.0*)* @go_ast.SelectorExpr.Pos }, comdat
@const.176 = private constant [46 x i8] c"evalSelectorExpr: (%+v), valid=%t, select=%s\0A\00", align 1
@type...63x.7interface.4.5 = weak constant %ArrayType.1 { %_type.0 { i64 48, i64 48, i32 47, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..Gb, i32 0, i32 0), { i8*, i64 }* @go..C261, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0), i64 3 }, comdat
@gcbits..Gb = weak constant [1 x i8] c"?", comdat
@const.177 = private constant [16 x i8] c"[3]interface {}\00", align 1
@go..C261 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.177, i32 0, i32 0), i64 15 }
@const.179 = private constant [54 x i8] c"evalSelectorExpr: (%+v), type=%v, val=%+v, select=%s\0A\00", align 1
@type...64x.7interface.4.5 = weak constant %ArrayType.1 { %_type.0 { i64 64, i64 64, i32 47, i8 17, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..Gh, i32 0, i32 0), { i8*, i64 }* @go..C262, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0), i64 4 }, comdat
@gcbits..Gh = weak constant [1 x i8] c"\FF", comdat
@const.180 = private constant [16 x i8] c"[4]interface {}\00", align 1
@go..C262 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @const.180, i32 0, i32 0), i64 15 }
@const.182 = private constant [29 x i8] c"evalSelectorExpr: valid %+v\0A\00", align 1
@const.184 = private constant [39 x i8] c"evalSelectorExpr: method=%s not valid\0A\00", align 1
@const.186 = private constant [25 x i8] c"%s %s has no method '%s'\00", align 1
@const.188 = private constant [14 x i8] c"InvalidMethod\00", align 1
@const.189 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.188, i32 0, i32 0), i64 13 }
@const.190 = private constant [13 x i8] c"compare: %t\0A\00", align 1
@const.192 = private constant [27 x i8] c"isn't valid moving on %+v\0A\00", align 1
@const.194 = private constant [12 x i8] c"Op is '%v'\0A\00", align 1
@const.196 = private constant [20 x i8] c"evalUnaryExpr: %+v\0A\00", align 1
@const.198 = private constant [24 x i8] c"unknown unary expr '%v'\00", align 1
@command_line_arguments..command_line_arguments.logger..d = constant %InterfaceType.1 { %_type.0 { i64 16, i64 16, i32 -546930070, i8 20, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.interhash..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.interequal..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0), { i8*, i64 }* @go..C263, %uncommonType.0* @go..C267, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1command_line_arguments.logger, i32 0, i32 0) }, %IPST.23 { %imethod.0* getelementptr inbounds ([1 x %imethod.0], [1 x %imethod.0]* @go..C273, i32 0, i32 0), i64 1, i64 1 } }
@const.200 = private constant [36 x i8] c"\09command_line_arguments\09eval.logger\00", align 1
@go..C263 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([36 x i8], [36 x i8]* @const.200, i32 0, i32 0), i64 35 }
@const.201 = private constant [7 x i8] c"logger\00", align 1
@go..C264 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.201, i32 0, i32 0), i64 6 }
@go..C265 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.49, i32 0, i32 0), i64 22 }
@go..C266 = internal global [1 x %method.0] zeroinitializer
@go..C267 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C264, { i8*, i64 }* @go..C265, %IPST.20 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C266, i32 0, i32 0), i64 0, i64 0 } }
@type...1command_line_arguments.logger = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -160946519, i8 54, i8 8, i8 8, %__go_descriptor.22* bitcast (%functionDescriptor.0* @runtime.memhash64..f to %__go_descriptor.22*), %__go_descriptor.23* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.23*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C268, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @command_line_arguments..command_line_arguments.logger..d, i32 0, i32 0) }, comdat
@const.202 = private constant [37 x i8] c"*\09command_line_arguments\09eval.logger\00", align 1
@go..C268 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @const.202, i32 0, i32 0), i64 36 }
@const.203 = private constant [7 x i8] c"Printf\00", align 1
@go..C269 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.203, i32 0, i32 0), i64 6 }
@type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9 = weak constant %FuncType.1 { %_type.0 { i64 8, i64 8, i32 458021592, i8 19, i8 8, i8 8, %__go_descriptor.22* null, %__go_descriptor.23* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C270, %uncommonType.0* null, %_type.0* null }, i8 1, %IPST.21 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C271, i32 0, i32 0), i64 2, i64 2 }, %IPST.21 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C272, i32 0, i32 0), i64 0, i64 0 } }, comdat
@const.204 = private constant [30 x i8] c"func(string, ...interface {})\00", align 1
@go..C270 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @const.204, i32 0, i32 0), i64 29 }
@go..C271 = internal global [2 x %_type.0*] [%_type.0* @string..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7interface.4.5, i32 0, i32 0)]
@go..C272 = internal global [1 x %_type.0*] zeroinitializer
@go..C273 = internal global [1 x %imethod.0] [%imethod.0 { { i8*, i64 }* @go..C269, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.1, %FuncType.1* @type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9, i32 0, i32 0) }]
@type...1github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger = external constant %PtrType.0
@pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger = weak constant { %_type.0*, void (i8*, %NullLogger.0*, i64, i64, %IPST.1*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger, i32 0, i32 0), void (i8*, %NullLogger.0*, i64, i64, %IPST.1*)* @github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger.Printf }, comdat
@github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger..d = external constant %StructType.1
@command_line_arguments.command_line_arguments..init0..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (void (i8*)* @command_line_arguments.command_line_arguments..init0 to i64) }
@const.207 = private constant [16 x i8] c"Method %v: %+v\0A\00", align 1
@const.209 = private constant [11 x i8] c"WTF!: %+v\0A\00", align 1
@const.211 = private constant [31 x i8] c"unhandled ast.Stmt type: '%v'\0A\00", align 1
@const.213 = private constant [12 x i8] c"ReturnError\00", align 1
@const.214 = private unnamed_addr constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.213, i32 0, i32 0), i64 11 }
@const.215 = private constant [28 x i8] c"not enough return arguments\00", align 1
@pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt = weak constant { %_type.0*, i64 (i8*, %ReturnStmt.0*)*, i64 (i8*, %ReturnStmt.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ReturnStmt, i32 0, i32 0), i64 (i8*, %ReturnStmt.0*)* @go_ast.ReturnStmt.End, i64 (i8*, %ReturnStmt.0*)* @go_ast.ReturnStmt.Pos }, comdat
@const.217 = private constant [21 x i8] c"evalReturnStmt: %+v\0A\00", align 1
@pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt = weak constant { %_type.0*, i64 (i8*, %BlockStmt.0*)*, i64 (i8*, %BlockStmt.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i32 0, i32 0), i64 (i8*, %BlockStmt.0*)* @go_ast.BlockStmt.End, i64 (i8*, %BlockStmt.0*)* @go_ast.BlockStmt.Pos }, comdat
@const.219 = private constant [20 x i8] c"evalBlockStmt: %+v\0A\00", align 1
@const.222 = private constant [16 x i8] c"Block[%d]: %+v\0A\00", align 1
@gcbits..ppppa = weak constant [3 x i8] c"\EF\BD\07", comdat
@gcbits..pppppppppa = weak constant [6 x i8] c"\EF\BD\F7\DE{\0F", comdat
@gcbits..ha = weak constant [1 x i8] c"\07", comdat
@gcbits..GGaa = weak constant [2 x i8] c"\FF\03", comdat
@gcbits..GGGGGGGGGGGGGGGG = weak constant [10 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", comdat
@gcbits..GGGa = weak constant [2 x i8] c"\FF\7F", comdat
@gcbits..pppa = weak constant [2 x i8] c"\EF=", comdat
@go..C0 = internal global { i8*, i64, [87 x { i8*, i64, i64, i8* }] } { i8* null, i64 87, [87 x { i8*, i64, i64, i8* }] [{ i8*, i64, i64, i8* } { i8* bitcast ({ i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** @command_line_arguments.types to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%Value.0* @command_line_arguments.False to i8*), i64 24, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%Value.0* @command_line_arguments.True to i8*), i64 24, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%Value.0* @command_line_arguments.Nil to i8*), i64 24, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%error.0* @command_line_arguments.ErrInvalidValue to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%error.0* @command_line_arguments.ErrReturnValue to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast (%.command-line-arguments.logger.0* @command_line_arguments.PkgLogger to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([4 x %structField.0]* @go..C30 to i8*), i64 160, i64 152, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @gcbits..ppppa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([9 x %structField.0]* @go..C62 to i8*), i64 360, i64 352, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gcbits..pppppppppa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C71 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([3 x %_type.0*]* @go..C74 to i8*), i64 24, i64 24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ha, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C78 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C79 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C81 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C82 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %method.0]* @go..C83 to i8*), i64 80, i64 80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..GGaa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %structField.0]* @go..C87 to i8*), i64 40, i64 32, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..pa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C96 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C105 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %imethod.0]* @go..C106 to i8*), i64 24, i64 24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ha, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C107 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C109 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C110 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C114 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C115 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C117 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C118 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C122 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C123 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C125 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C126 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C130 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C131 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C133 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C134 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C138 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C139 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C141 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C142 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C146 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C147 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C149 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C150 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C154 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C155 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C157 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C158 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C162 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C163 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C165 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C166 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C176 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C177 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C179 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C180 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C184 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C185 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C187 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C188 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C192 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C193 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C195 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C196 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C200 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C201 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C203 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C204 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C208 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C209 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C211 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C212 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([16 x %method.0]* @go..C213 to i8*), i64 640, i64 640, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @gcbits..GGGGGGGGGGGGGGGG, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([4 x %structField.0]* @go..C224 to i8*), i64 160, i64 152, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @gcbits..ppppa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C231 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C233 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C234 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C237 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C238 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([3 x %method.0]* @go..C240 to i8*), i64 120, i64 120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..GGGa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C245 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C246 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C249 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %_type.0*]* @go..C250 to i8*), i64 8, i64 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([3 x %method.0]* @go..C252 to i8*), i64 120, i64 120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..GGGa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([3 x %structField.0]* @go..C258 to i8*), i64 120, i64 112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..pppa, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([2 x %_type.0*]* @go..C271 to i8*), i64 16, i64 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..da, i32 0, i32 0) }, { i8*, i64, i64, i8* } { i8* bitcast ([1 x %imethod.0]* @go..C273 to i8*), i64 24, i64 24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ha, i32 0, i32 0) }] }

define internal fastcc { i64, i64 } @command_line_arguments.checkValues(%IPST.0* byval nocapture readonly %values) unnamed_addr #0 !dbg !176 {
entry:
  call void @llvm.dbg.declare(metadata %IPST.0* %values, metadata !184, metadata !DIExpression()), !dbg !185
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !186, metadata !DIExpression()), !dbg !188
  %tmpv.174.sroa.0.0.cast.779.sroa_idx = getelementptr inbounds %IPST.0, %IPST.0* %values, i64 0, i32 0
  %tmpv.174.sroa.0.0.copyload = load %Value.0**, %Value.0*** %tmpv.174.sroa.0.0.cast.779.sroa_idx, align 8
  %tmpv.174.sroa.2.0.cast.779.sroa_idx5 = getelementptr inbounds %IPST.0, %IPST.0* %values, i64 0, i32 1
  %tmpv.174.sroa.2.0.copyload = load i64, i64* %tmpv.174.sroa.2.0.cast.779.sroa_idx5, align 8
  %icmp.562 = icmp sgt i64 %tmpv.174.sroa.2.0.copyload, 0, !dbg !189
  br i1 %icmp.562, label %else.41, label %else.45

else.41:                                          ; preds = %entry, %else.44
  %tmpv.172.03 = phi i64 [ %add.0, %else.44 ], [ 0, %entry ]
  %ptroff.0 = getelementptr %Value.0*, %Value.0** %tmpv.174.sroa.0.0.copyload, i64 %tmpv.172.03, !dbg !189
  %.ptroff.ld.0 = load %Value.0*, %Value.0** %ptroff.0, align 8, !dbg !189
  call void @llvm.dbg.value(metadata %Value.0* %.ptroff.ld.0, metadata !186, metadata !DIExpression()), !dbg !188
  %call.56 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %.ptroff.ld.0), !dbg !190
  %icmp.53 = icmp ne i8 %call.56, 0, !dbg !191
  %xor.7 = xor i1 %icmp.53, true, !dbg !191
  %zext.53 = zext i1 %xor.7 to i8, !dbg !191
  br i1 %icmp.53, label %then.42, label %fallthrough.42

then.42:                                          ; preds = %else.41
  %call.57 = call i64 @reflect.Value.Kind(i8* nest undef, %Value.0* %.ptroff.ld.0), !dbg !192
  %icmp.54 = icmp eq i64 %call.57, 22, !dbg !193
  br i1 %icmp.54, label %then.43, label %else.44

fallthrough.42:                                   ; preds = %then.43, %else.41
  %tmpv.178.0 = phi i8 [ %zext.53, %else.41 ], [ %call.58, %then.43 ]
  %0 = and i8 %tmpv.178.0, 1, !dbg !194
  %trunc.56 = icmp eq i8 %0, 0, !dbg !194
  br i1 %trunc.56, label %else.44, label %then.44

then.43:                                          ; preds = %then.42
  %call.58 = call i8 @reflect.Value.IsNil(i8* nest undef, %Value.0* %.ptroff.ld.0), !dbg !195
  br label %fallthrough.42

then.44:                                          ; preds = %fallthrough.42
  %call.59 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([25 x i8]* @const.123 to i64), i64 24, %IPST.1* byval nonnull @const.145), !dbg !196
  ret { i64, i64 } %call.59, !dbg !197

else.44:                                          ; preds = %then.42, %fallthrough.42
  %add.0 = add nuw nsw i64 %tmpv.172.03, 1, !dbg !189
  %icmp.56 = icmp slt i64 %add.0, %tmpv.174.sroa.2.0.copyload, !dbg !189
  br i1 %icmp.56, label %else.41, label %else.45

else.45:                                          ; preds = %else.44, %entry
  call void @llvm.dbg.value(metadata i64 0, metadata !198, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !199
  call void @llvm.dbg.value(metadata i64 0, metadata !198, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !199
  ret { i64, i64 } zeroinitializer, !dbg !200
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

declare { i64, i64 } @reflect.Value.Type(i8*, %Value.0*) local_unnamed_addr #0

declare i8 @runtime.ifaceeq(i8*, i64, i64, i64, i64) local_unnamed_addr #0

declare { i64, i64 } @fmt.Errorf(i8*, i64, i64, %IPST.1*) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @runtime.gopanic(i8*, i64, i64) local_unnamed_addr #2

declare { i64, i64 } @reflect.Value.Interface(i8*, %Value.0*) local_unnamed_addr #0

declare %_type.0* @runtime.efacetype(i8*, i64, i64) local_unnamed_addr #0

declare i8 @runtime.ifacetypeeq(i8*, %_type.0*, %_type.0*) local_unnamed_addr #0

declare void @reflect.Value.Bytes({ i8*, i64, i64 }*, i8*, %Value.0*) local_unnamed_addr #0

declare i64 @bytes.Compare(i8*, { i8*, i64, i64 }*, { i8*, i64, i64 }*) local_unnamed_addr #0

declare { i64, i64 } @reflect.Value.String(i8*, %Value.0*) local_unnamed_addr #0

declare i64 @strings.Compare(i8*, i64, i64, i64, i64) local_unnamed_addr #0

declare i8* @runtime.newobject(i8*, %_type.0*) local_unnamed_addr #0

declare void @reflect.ValueOf(%Value.0*, i8*, i64, i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @__go_runtime_error(i8*, i32) local_unnamed_addr #2

declare void @runtime.typedmemmove(i8*, %_type.0*, i8*, i8*) local_unnamed_addr #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

define void @command_line_arguments..import(i8* nest nocapture readnone %nest.1) local_unnamed_addr #0 !dbg !201 {
entry:
  %tmpv.36 = alloca [2 x { { i8*, i64 }, { %_type.0*, i8* } }], align 8
  %tmpv.113 = alloca %Value.0, align 8
  %sret.actual.21 = alloca %Value.0, align 8
  %tmpv.118 = alloca %Value.0, align 8
  %sret.actual.22 = alloca %Value.0, align 8
  %tmpv.122 = alloca %Value.0, align 8
  %sret.actual.23 = alloca %Value.0, align 8
  %tmpv.126 = alloca %error.0, align 8
  %tmpv.130 = alloca %error.0, align 8
  call void @runtime.registerGCRoots(i8* nest undef, i8* bitcast ({ i8*, i64, [87 x { i8*, i64, i64, i8* }] }* @go..C0 to i8*)), !dbg !204
  %call.19 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !206
  store i8 1, i8* %call.19, align 1, !dbg !206
  %call.20 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !206
  store i8 0, i8* %call.20, align 1, !dbg !206
  %tmp.12.sroa.0.0.cast.119.sroa_cast = bitcast [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36 to i8*, !dbg !206
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.12.sroa.0.0.cast.119.sroa_cast, i8* align 8 bitcast ({ i8*, i64 }* @const.14 to i8*), i64 16, i1 false), !dbg !206
  %tmp.12.sroa.2.0.cast.119.sroa_idx7 = getelementptr inbounds [2 x { { i8*, i64 }, { %_type.0*, i8* } }], [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36, i64 0, i64 0, i32 1, i32 0, !dbg !206
  store %_type.0* @bool..d, %_type.0** %tmp.12.sroa.2.0.cast.119.sroa_idx7, align 8, !dbg !206
  %tmp.12.sroa.3.0.cast.119.sroa_idx8 = getelementptr inbounds [2 x { { i8*, i64 }, { %_type.0*, i8* } }], [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36, i64 0, i64 0, i32 1, i32 1, !dbg !206
  store i8* %call.19, i8** %tmp.12.sroa.3.0.cast.119.sroa_idx8, align 8, !dbg !206
  %tmp.14.sroa.0.0.cast.121.sroa_idx = getelementptr inbounds [2 x { { i8*, i64 }, { %_type.0*, i8* } }], [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36, i64 0, i64 1, !dbg !206
  %tmp.14.sroa.0.0.cast.121.sroa_cast = bitcast { { i8*, i64 }, { %_type.0*, i8* } }* %tmp.14.sroa.0.0.cast.121.sroa_idx to i8*, !dbg !206
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.14.sroa.0.0.cast.121.sroa_cast, i8* align 8 bitcast ({ i8*, i64 }* @const.15 to i8*), i64 16, i1 false), !dbg !206
  %tmp.14.sroa.2.0.cast.121.sroa_idx11 = getelementptr inbounds [2 x { { i8*, i64 }, { %_type.0*, i8* } }], [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36, i64 0, i64 1, i32 1, i32 0, !dbg !206
  store %_type.0* @bool..d, %_type.0** %tmp.14.sroa.2.0.cast.121.sroa_idx11, align 8, !dbg !206
  %tmp.14.sroa.3.0.cast.121.sroa_idx12 = getelementptr inbounds [2 x { { i8*, i64 }, { %_type.0*, i8* } }], [2 x { { i8*, i64 }, { %_type.0*, i8* } }]* %tmpv.36, i64 0, i64 1, i32 1, i32 1, !dbg !206
  store i8* %call.20, i8** %tmp.14.sroa.3.0.cast.121.sroa_idx12, align 8, !dbg !206
  %call.21 = call { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* @__go_construct_map(i8* nest undef, i8* bitcast (%MapType.1* @type..map.6string.7interface.4.5 to i8*), i64 2, i64 32, i64 16, i8* nonnull %tmp.12.sroa.0.0.cast.119.sroa_cast), !dbg !206
  %runtime.writeBarrier.ld.1 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !208
  %icmp.14 = icmp eq i32 %runtime.writeBarrier.ld.1, 0, !dbg !208
  br i1 %icmp.14, label %else.253, label %else.252

fallthrough.252:                                  ; preds = %else.252, %else.253
  %call.36 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !209
  store i8 0, i8* %call.36, align 1, !dbg !209
  %0 = ptrtoint i8* %call.36 to i64, !dbg !209
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.21, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %0), !dbg !211
  %cast.568 = bitcast %Value.0* %tmpv.113 to i8*
  %cast.569 = bitcast %Value.0* %sret.actual.21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.568, i8* nonnull align 8 %cast.569, i64 24, i1 false)
  %runtime.writeBarrier.ld.4 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !212
  %icmp.32 = icmp eq i32 %runtime.writeBarrier.ld.4, 0, !dbg !212
  br i1 %icmp.32, label %else.255, label %else.254

else.252:                                         ; preds = %entry
  %cast.159 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %call.21 to i8*, !dbg !208
  call void @runtime.writebarrierptr(i8* nest undef, i8* bitcast ({ i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** @command_line_arguments.types to i8*), i8* %cast.159), !dbg !208
  br label %fallthrough.252

else.253:                                         ; preds = %entry
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %call.21, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** @command_line_arguments.types, align 8, !dbg !208
  br label %fallthrough.252

fallthrough.254:                                  ; preds = %else.254, %else.255
  %call.37 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !213
  store i8 1, i8* %call.37, align 1, !dbg !213
  %1 = ptrtoint i8* %call.37 to i64, !dbg !213
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.22, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %1), !dbg !214
  %cast.577 = bitcast %Value.0* %tmpv.118 to i8*
  %cast.578 = bitcast %Value.0* %sret.actual.22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.577, i8* nonnull align 8 %cast.578, i64 24, i1 false)
  %runtime.writeBarrier.ld.5 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !215
  %icmp.34 = icmp eq i32 %runtime.writeBarrier.ld.5, 0, !dbg !215
  br i1 %icmp.34, label %else.257, label %else.256

else.254:                                         ; preds = %fallthrough.252
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* bitcast (%Value.0* @command_line_arguments.False to i8*), i8* nonnull %cast.568), !dbg !212
  br label %fallthrough.254

else.255:                                         ; preds = %fallthrough.252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast (%Value.0* @command_line_arguments.False to i8*), i8* nonnull align 8 %cast.568, i64 24, i1 false), !dbg !212
  br label %fallthrough.254

fallthrough.256:                                  ; preds = %else.256, %else.257
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.23, i8* nest undef, i64 0, i64 0), !dbg !216
  %cast.587 = bitcast %Value.0* %tmpv.122 to i8*
  %cast.588 = bitcast %Value.0* %sret.actual.23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.587, i8* nonnull align 8 %cast.588, i64 24, i1 false)
  %runtime.writeBarrier.ld.6 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !217
  %icmp.36 = icmp eq i32 %runtime.writeBarrier.ld.6, 0, !dbg !217
  br i1 %icmp.36, label %else.259, label %else.258

else.256:                                         ; preds = %fallthrough.254
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* bitcast (%Value.0* @command_line_arguments.True to i8*), i8* nonnull %cast.577), !dbg !215
  br label %fallthrough.256

else.257:                                         ; preds = %fallthrough.254
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast (%Value.0* @command_line_arguments.True to i8*), i8* nonnull align 8 %cast.577, i64 24, i1 false), !dbg !215
  br label %fallthrough.256

fallthrough.258:                                  ; preds = %else.258, %else.259
  %call.38 = call { i64, i64 } @errors.New(i8* nest undef, i64 ptrtoint ([25 x i8]* @const.123 to i64), i64 24), !dbg !218
  %call.38.fca.0.extract = extractvalue { i64, i64 } %call.38, 0, !dbg !218
  %call.38.fca.1.extract = extractvalue { i64, i64 } %call.38, 1, !dbg !218
  %tmpv.125.sroa.0.0.cast.599.sroa_cast = bitcast %error.0* %tmpv.126 to i64*
  store i64 %call.38.fca.0.extract, i64* %tmpv.125.sroa.0.0.cast.599.sroa_cast, align 8
  %tmpv.125.sroa.2.0.cast.599.sroa_idx4 = getelementptr inbounds %error.0, %error.0* %tmpv.126, i64 0, i32 1
  %tmpv.125.sroa.2.0.cast.599.sroa_cast = bitcast i8** %tmpv.125.sroa.2.0.cast.599.sroa_idx4 to i64*
  store i64 %call.38.fca.1.extract, i64* %tmpv.125.sroa.2.0.cast.599.sroa_cast, align 8
  %runtime.writeBarrier.ld.7 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !219
  %icmp.38 = icmp eq i32 %runtime.writeBarrier.ld.7, 0, !dbg !219
  %cast.603 = bitcast %error.0* %tmpv.126 to i8*, !dbg !219
  br i1 %icmp.38, label %else.261, label %else.260

else.258:                                         ; preds = %fallthrough.256
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* bitcast (%Value.0* @command_line_arguments.Nil to i8*), i8* nonnull %cast.587), !dbg !217
  br label %fallthrough.258

else.259:                                         ; preds = %fallthrough.256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast (%Value.0* @command_line_arguments.Nil to i8*), i8* nonnull align 8 %cast.587, i64 24, i1 false), !dbg !217
  br label %fallthrough.258

fallthrough.260:                                  ; preds = %else.260, %else.261
  %call.39 = call { i64, i64 } @errors.New(i8* nest undef, i64 ptrtoint ([20 x i8]* @const.125 to i64), i64 19), !dbg !220
  %call.39.fca.0.extract = extractvalue { i64, i64 } %call.39, 0, !dbg !220
  %call.39.fca.1.extract = extractvalue { i64, i64 } %call.39, 1, !dbg !220
  %tmpv.129.sroa.0.0.cast.611.sroa_cast = bitcast %error.0* %tmpv.130 to i64*
  store i64 %call.39.fca.0.extract, i64* %tmpv.129.sroa.0.0.cast.611.sroa_cast, align 8
  %tmpv.129.sroa.2.0.cast.611.sroa_idx2 = getelementptr inbounds %error.0, %error.0* %tmpv.130, i64 0, i32 1
  %tmpv.129.sroa.2.0.cast.611.sroa_cast = bitcast i8** %tmpv.129.sroa.2.0.cast.611.sroa_idx2 to i64*
  store i64 %call.39.fca.1.extract, i64* %tmpv.129.sroa.2.0.cast.611.sroa_cast, align 8
  %runtime.writeBarrier.ld.8 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !221
  %icmp.40 = icmp eq i32 %runtime.writeBarrier.ld.8, 0, !dbg !221
  %cast.615 = bitcast %error.0* %tmpv.130 to i8*, !dbg !221
  br i1 %icmp.40, label %else.263, label %else.262

else.260:                                         ; preds = %fallthrough.258
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i64 0, i32 0), i8* bitcast (%error.0* @command_line_arguments.ErrInvalidValue to i8*), i8* nonnull %cast.603), !dbg !219
  br label %fallthrough.260

else.261:                                         ; preds = %fallthrough.258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%error.0* @command_line_arguments.ErrInvalidValue to i8*), i8* nonnull align 8 %cast.603, i64 16, i1 false), !dbg !219
  br label %fallthrough.260

fallthrough.262:                                  ; preds = %else.262, %else.263
  call void @command_line_arguments.command_line_arguments..init0(i8* nest undef), !dbg !222
  ret void

else.262:                                         ; preds = %fallthrough.260
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @error..d, i64 0, i32 0), i8* bitcast (%error.0* @command_line_arguments.ErrReturnValue to i8*), i8* nonnull %cast.615), !dbg !221
  br label %fallthrough.262

else.263:                                         ; preds = %fallthrough.260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%error.0* @command_line_arguments.ErrReturnValue to i8*), i8* nonnull align 8 %cast.615, i64 16, i1 false), !dbg !221
  br label %fallthrough.262
}

declare { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* @__go_construct_map(i8*, i8*, i64, i64, i64, i8*) local_unnamed_addr #0

declare void @runtime.writebarrierptr(i8*, i8*, i8*) local_unnamed_addr #0

define void @command_line_arguments.Scope.Insert(i8* nest nocapture readnone %nest.3, %Scope.0* readonly %s, i64 %k.chunk0, i64 %k.chunk1, i64 %v.chunk0, i64 %v.chunk1) #0 !dbg !224 {
entry:
  %tmpv.44 = alloca { i8*, i64 }, align 8
  %tmpv.45 = alloca { %_type.0*, i8* }, align 8
  call void @llvm.dbg.value(metadata %Scope.0* %s, metadata !231, metadata !DIExpression()), !dbg !232
  call void @llvm.dbg.value(metadata i64 %k.chunk0, metadata !233, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !234
  call void @llvm.dbg.value(metadata i64 %k.chunk1, metadata !233, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !234
  call void @llvm.dbg.value(metadata i64 %v.chunk0, metadata !235, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !236
  call void @llvm.dbg.value(metadata i64 %v.chunk1, metadata !235, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !236
  %k.addr.sroa.0.0.cast.187.sroa_cast = bitcast { i8*, i64 }* %tmpv.44 to i64*
  store i64 %k.chunk0, i64* %k.addr.sroa.0.0.cast.187.sroa_cast, align 8
  %k.addr.sroa.2.0.cast.187.sroa_idx4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.44, i64 0, i32 1
  store i64 %k.chunk1, i64* %k.addr.sroa.2.0.cast.187.sroa_idx4, align 8
  %v.addr.sroa.0.0.cast.189.sroa_cast = bitcast { %_type.0*, i8* }* %tmpv.45 to i64*
  store i64 %v.chunk0, i64* %v.addr.sroa.0.0.cast.189.sroa_cast, align 8
  %v.addr.sroa.2.0.cast.189.sroa_idx3 = getelementptr inbounds { %_type.0*, i8* }, { %_type.0*, i8* }* %tmpv.45, i64 0, i32 1
  %v.addr.sroa.2.0.cast.189.sroa_cast = bitcast i8** %v.addr.sroa.2.0.cast.189.sroa_idx3 to i64*
  store i64 %v.chunk1, i64* %v.addr.sroa.2.0.cast.189.sroa_cast, align 8
  %icmp.15 = icmp eq %Scope.0* %s, null, !dbg !237
  br i1 %icmp.15, label %then.13, label %else.13

then.13:                                          ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !237
  unreachable

else.13:                                          ; preds = %entry
  %field.57 = getelementptr inbounds %Scope.0, %Scope.0* %s, i64 0, i32 0, !dbg !237
  %.field.ld.5 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.57, align 8, !dbg !237
  %cast.193 = bitcast { i8*, i64 }* %tmpv.44 to i8*, !dbg !238
  %call.24 = call i8* @runtime.mapassign(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.5, i8* nonnull %cast.193), !dbg !238
  %runtime.writeBarrier.ld.2 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !238
  %icmp.17 = icmp eq i32 %runtime.writeBarrier.ld.2, 0, !dbg !238
  br i1 %icmp.17, label %then.14, label %else.14

then.14:                                          ; preds = %else.13
  %icmp.16 = icmp eq i8* %call.24, null, !dbg !238
  br i1 %icmp.16, label %then.15, label %else.15

fallthrough.14:                                   ; preds = %else.14, %else.15
  ret void

else.14:                                          ; preds = %else.13
  %cast.200 = bitcast { %_type.0*, i8* }* %tmpv.45 to i8*, !dbg !238
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i64 0, i32 0), i8* %call.24, i8* nonnull %cast.200), !dbg !238
  br label %fallthrough.14

then.15:                                          ; preds = %then.14
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !238
  unreachable

else.15:                                          ; preds = %then.14
  %cast.197 = bitcast { %_type.0*, i8* }* %tmpv.45 to i8*, !dbg !238
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.24, i8* nonnull align 8 %cast.197, i64 16, i1 false), !dbg !238
  br label %fallthrough.14
}

define { i64, i64 } @command_line_arguments.Scope.Lookup(i8* nest nocapture readnone %nest.4, %Scope.0* readonly %s, i64 %name.chunk0, i64 %name.chunk1) #0 !dbg !239 {
entry:
  %tmpv.50 = alloca { i8*, i64 }, align 8
  call void @llvm.dbg.value(metadata %Scope.0* %s, metadata !242, metadata !DIExpression()), !dbg !243
  call void @llvm.dbg.value(metadata i64 %name.chunk0, metadata !244, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !245
  call void @llvm.dbg.value(metadata i64 %name.chunk1, metadata !244, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !245
  call void @llvm.dbg.value(metadata i8 0, metadata !246, metadata !DIExpression()), !dbg !248
  %name.addr.sroa.0.0.cast.205.sroa_cast = bitcast { i8*, i64 }* %tmpv.50 to i64*
  store i64 %name.chunk0, i64* %name.addr.sroa.0.0.cast.205.sroa_cast, align 8
  %name.addr.sroa.2.0.cast.205.sroa_idx21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.50, i64 0, i32 1
  store i64 %name.chunk1, i64* %name.addr.sroa.2.0.cast.205.sroa_idx21, align 8
  %icmp.18 = icmp eq %Scope.0* %s, null, !dbg !249
  br i1 %icmp.18, label %then.16, label %else.16

then.16:                                          ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !249
  unreachable

else.16:                                          ; preds = %entry
  %field.58 = getelementptr inbounds %Scope.0, %Scope.0* %s, i64 0, i32 0, !dbg !249
  %.field.ld.6 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.58, align 8, !dbg !249
  %cast.211 = bitcast { i8*, i64 }* %tmpv.50 to i8*, !dbg !250
  %call.25 = call { i64, i8 } @runtime.mapaccess2(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.6, i8* nonnull %cast.211), !dbg !250
  %call.25.fca.0.extract = extractvalue { i64, i8 } %call.25, 0, !dbg !250
  %call.25.fca.1.extract = extractvalue { i64, i8 } %call.25, 1, !dbg !250
  call void @llvm.dbg.value(metadata i8 %call.25.fca.1.extract, metadata !246, metadata !DIExpression()), !dbg !248
  %0 = and i8 %call.25.fca.1.extract, 1, !dbg !251
  %trunc.19 = icmp eq i8 %0, 0, !dbg !251
  br i1 %trunc.19, label %else.17, label %then.17

then.17:                                          ; preds = %else.16
  %cast.215 = inttoptr i64 %call.25.fca.0.extract to { %_type.0*, i8* }*, !dbg !250
  %val.sroa.6.0.cast.217.sroa_idx17 = getelementptr inbounds { %_type.0*, i8* }, { %_type.0*, i8* }* %cast.215, i64 0, i32 1, !dbg !250
  %val.sroa.6.0.cast.217.sroa_cast = bitcast i8** %val.sroa.6.0.cast.217.sroa_idx17 to i64*, !dbg !250
  %val.sroa.6.0.copyload18 = load i64, i64* %val.sroa.6.0.cast.217.sroa_cast, align 8, !dbg !250
  call void @llvm.dbg.value(metadata i64 %val.sroa.6.0.copyload18, metadata !252, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !248
  %val.sroa.0.0.cast.217.sroa_cast = inttoptr i64 %call.25.fca.0.extract to i64*, !dbg !250
  %val.sroa.0.0.copyload14 = load i64, i64* %val.sroa.0.0.cast.217.sroa_cast, align 8, !dbg !250
  call void @llvm.dbg.value(metadata i64 %val.sroa.0.0.copyload14, metadata !252, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !248
  call void @llvm.dbg.value(metadata i64 %val.sroa.0.0.copyload14, metadata !253, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !254
  call void @llvm.dbg.value(metadata i64 %val.sroa.6.0.copyload18, metadata !253, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !254
  %ld.20.fca.0.insert = insertvalue { i64, i64 } undef, i64 %val.sroa.0.0.copyload14, 0, !dbg !255
  %ld.20.fca.1.insert = insertvalue { i64, i64 } %ld.20.fca.0.insert, i64 %val.sroa.6.0.copyload18, 1, !dbg !255
  ret { i64, i64 } %ld.20.fca.1.insert, !dbg !255

else.17:                                          ; preds = %else.16
  call void @llvm.dbg.value(metadata i64 0, metadata !253, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !254
  call void @llvm.dbg.value(metadata i64 0, metadata !253, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !254
  ret { i64, i64 } zeroinitializer, !dbg !256
}

define %Scope.0* @command_line_arguments.NewScope(i8* nest nocapture readnone %nest.2) #0 !dbg !257 {
entry:
  %tmpv.42 = alloca %Scope.0, align 8
  call void @llvm.dbg.value(metadata %Scope.0* null, metadata !260, metadata !DIExpression()), !dbg !261
  %call.22 = call { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* @runtime.makemap_small(i8* nest undef), !dbg !262
  %call.23 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Scope..d, i64 0, i32 0)), !dbg !263
  %cast.183 = bitcast i8* %call.23 to %Scope.0*, !dbg !263
  %field.56 = getelementptr inbounds %Scope.0, %Scope.0* %tmpv.42, i64 0, i32 0, !dbg !264
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %call.22, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.56, align 8, !dbg !264
  %cast.186 = bitcast %Scope.0* %tmpv.42 to i8*, !dbg !263
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Scope..d, i64 0, i32 0), i8* %call.23, i8* nonnull %cast.186), !dbg !263
  call void @llvm.dbg.value(metadata %Scope.0* %cast.183, metadata !260, metadata !DIExpression()), !dbg !261
  ret %Scope.0* %cast.183, !dbg !265
}

declare { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* @runtime.makemap_small(i8*) local_unnamed_addr #0

declare i8* @runtime.mapassign(i8*, %_type.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8*) local_unnamed_addr #0

declare { i64, i8 } @runtime.mapaccess2(i8*, %_type.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8*) local_unnamed_addr #0

define void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nocapture sret %sret.formal.5, i8* nest nocapture readnone %nest.9, %Context.0* %c, i64 %node.chunk0, i64 %node.chunk1) #0 !dbg !266 {
entry:
  %tmp.36 = alloca %IPST.1, align 8
  %sret.actual.26 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.27 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.28 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.155 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !340, metadata !DIExpression()), !dbg !341
  call void @llvm.dbg.value(metadata i64 %node.chunk0, metadata !342, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !343
  call void @llvm.dbg.value(metadata i64 %node.chunk1, metadata !342, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !343
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !344, metadata !DIExpression()), !dbg !345
  %call.40 = call %_type.0* @runtime.ifacetype(i8* nest undef, i64 %node.chunk0, i64 %node.chunk1), !dbg !346
  %call.41 = call i8 @runtime.ifaceT2Ip(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i64 0, i32 0), %_type.0* %call.40), !dbg !347
  %icmp.41 = icmp eq i8 %call.41, 0, !dbg !347
  br i1 %icmp.41, label %label.0, label %else.31

else.31:                                          ; preds = %entry
  %icmp.42 = icmp eq i64 %node.chunk0, 0, !dbg !348
  br i1 %icmp.42, label %fallthrough.32, label %else.32

label.0:                                          ; preds = %entry
  %call.43 = call i8 @runtime.ifaceT2Ip(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0), %_type.0* %call.40), !dbg !350
  %icmp.43 = icmp eq i8 %call.43, 0, !dbg !350
  br i1 %icmp.43, label %label.2, label %else.33

fallthrough.32:                                   ; preds = %else.31, %else.32
  %tmpv.135.0 = phi %_type.0* [ %.field.ld.14, %else.32 ], [ null, %else.31 ]
  %call.42 = call i8* @runtime.assertitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i64 0, i32 0), %_type.0* %tmpv.135.0), !dbg !351
  %0 = ptrtoint i8* %call.42 to i64, !dbg !351
  call void @llvm.dbg.value(metadata i64 %0, metadata !352, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !363
  call void @llvm.dbg.value(metadata i64 %node.chunk1, metadata !352, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !363
  call void @command_line_arguments.Context.evalDecl({ %Value.0*, %error.0 }* nonnull sret %sret.actual.26, i8* nest undef, %Context.0* %c, i64 %0, i64 %node.chunk1), !dbg !364
  %1 = bitcast { %Value.0*, %error.0 }* %sret.actual.26 to i64*, !dbg !364
  %tmpv.136.sroa.0.0.copyload1541 = load i64, i64* %1, align 8, !dbg !364
  %tmpv.136.sroa.3.0.cast.632.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.26, i64 0, i32 1, !dbg !364
  %tmpv.136.sroa.3.0.cast.632.sroa_cast = bitcast %error.0* %tmpv.136.sroa.3.0.cast.632.sroa_idx to i8*, !dbg !364
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.26, metadata !344, metadata !DIExpression(DW_OP_deref)), !dbg !345
  %2 = bitcast { %Value.0*, %error.0 }* %sret.formal.5 to i64*, !dbg !365
  store i64 %tmpv.136.sroa.0.0.copyload1541, i64* %2, align 8, !dbg !365
  %tmp.31.sroa.2.0.cast.641.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.5, i64 0, i32 1, !dbg !365
  %tmp.31.sroa.2.0.cast.641.sroa_cast = bitcast %error.0* %tmp.31.sroa.2.0.cast.641.sroa_idx to i8*, !dbg !365
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.31.sroa.2.0.cast.641.sroa_cast, i8* nonnull align 8 %tmpv.136.sroa.3.0.cast.632.sroa_cast, i64 16, i1 false), !dbg !365
  ret void, !dbg !365

else.32:                                          ; preds = %else.31
  %3 = inttoptr i64 %node.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, !dbg !348
  %field.130 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* %3, i64 0, i32 0, !dbg !348
  %.field.ld.14 = load %_type.0*, %_type.0** %field.130, align 8, !dbg !348
  br label %fallthrough.32

else.33:                                          ; preds = %label.0
  %icmp.44 = icmp eq i64 %node.chunk0, 0, !dbg !366
  br i1 %icmp.44, label %fallthrough.34, label %else.34

label.2:                                          ; preds = %label.0
  %call.45 = call i8 @runtime.ifaceT2Ip(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0), %_type.0* %call.40), !dbg !368
  %icmp.45 = icmp eq i8 %call.45, 0, !dbg !368
  %icmp.47 = icmp eq i64 %node.chunk0, 0, !dbg !369
  br i1 %icmp.45, label %label.3, label %else.35

fallthrough.34:                                   ; preds = %else.33, %else.34
  %tmpv.141.0 = phi %_type.0* [ %.field.ld.15, %else.34 ], [ null, %else.33 ]
  %call.44 = call i8* @runtime.assertitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0), %_type.0* %tmpv.141.0), !dbg !371
  %4 = ptrtoint i8* %call.44 to i64, !dbg !371
  call void @llvm.dbg.value(metadata i64 %4, metadata !372, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !363
  call void @llvm.dbg.value(metadata i64 %node.chunk1, metadata !372, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !363
  call void @command_line_arguments.Context.evalExpr({ %Value.0*, %error.0 }* nonnull sret %sret.actual.27, i8* nest undef, %Context.0* %c, i64 %4, i64 %node.chunk1), !dbg !380
  %5 = bitcast { %Value.0*, %error.0 }* %sret.actual.27 to i64*, !dbg !380
  %tmpv.142.sroa.0.0.copyload1142 = load i64, i64* %5, align 8, !dbg !380
  %tmpv.142.sroa.3.0.cast.652.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.27, i64 0, i32 1, !dbg !380
  %tmpv.142.sroa.3.0.cast.652.sroa_cast = bitcast %error.0* %tmpv.142.sroa.3.0.cast.652.sroa_idx to i8*, !dbg !380
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.27, metadata !344, metadata !DIExpression(DW_OP_deref)), !dbg !345
  %6 = bitcast { %Value.0*, %error.0 }* %sret.formal.5 to i64*, !dbg !381
  store i64 %tmpv.142.sroa.0.0.copyload1142, i64* %6, align 8, !dbg !381
  %tmp.32.sroa.2.0.cast.661.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.5, i64 0, i32 1, !dbg !381
  %tmp.32.sroa.2.0.cast.661.sroa_cast = bitcast %error.0* %tmp.32.sroa.2.0.cast.661.sroa_idx to i8*, !dbg !381
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.32.sroa.2.0.cast.661.sroa_cast, i8* nonnull align 8 %tmpv.142.sroa.3.0.cast.652.sroa_cast, i64 16, i1 false), !dbg !381
  ret void, !dbg !381

else.34:                                          ; preds = %else.33
  %7 = inttoptr i64 %node.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, !dbg !366
  %field.140 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* %7, i64 0, i32 0, !dbg !366
  %.field.ld.15 = load %_type.0*, %_type.0** %field.140, align 8, !dbg !366
  br label %fallthrough.34

else.35:                                          ; preds = %label.2
  br i1 %icmp.47, label %fallthrough.36, label %else.36

label.3:                                          ; preds = %label.2
  call void @llvm.dbg.value(metadata i64 %node.chunk0, metadata !382, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !363
  call void @llvm.dbg.value(metadata i64 %node.chunk1, metadata !382, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !363
  br i1 %icmp.47, label %fallthrough.37, label %else.37

fallthrough.36:                                   ; preds = %else.35, %else.36
  %tmpv.147.0 = phi %_type.0* [ %.field.ld.16, %else.36 ], [ null, %else.35 ]
  %call.46 = call i8* @runtime.assertitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0), %_type.0* %tmpv.147.0), !dbg !384
  %8 = ptrtoint i8* %call.46 to i64, !dbg !384
  call void @llvm.dbg.value(metadata i64 %8, metadata !385, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !363
  call void @llvm.dbg.value(metadata i64 %node.chunk1, metadata !385, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !363
  call void @command_line_arguments.Context.evalStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.28, i8* nest undef, %Context.0* %c, i64 %8, i64 %node.chunk1), !dbg !393
  %9 = bitcast { %Value.0*, %error.0 }* %sret.actual.28 to i64*, !dbg !393
  %tmpv.148.sroa.0.0.copyload743 = load i64, i64* %9, align 8, !dbg !393
  %tmpv.148.sroa.3.0.cast.672.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.28, i64 0, i32 1, !dbg !393
  %tmpv.148.sroa.3.0.cast.672.sroa_cast = bitcast %error.0* %tmpv.148.sroa.3.0.cast.672.sroa_idx to i8*, !dbg !393
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.28, metadata !344, metadata !DIExpression(DW_OP_deref)), !dbg !345
  %10 = bitcast { %Value.0*, %error.0 }* %sret.formal.5 to i64*, !dbg !394
  store i64 %tmpv.148.sroa.0.0.copyload743, i64* %10, align 8, !dbg !394
  %tmp.33.sroa.2.0.cast.681.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.5, i64 0, i32 1, !dbg !394
  %tmp.33.sroa.2.0.cast.681.sroa_cast = bitcast %error.0* %tmp.33.sroa.2.0.cast.681.sroa_idx to i8*, !dbg !394
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.33.sroa.2.0.cast.681.sroa_cast, i8* nonnull align 8 %tmpv.148.sroa.3.0.cast.672.sroa_cast, i64 16, i1 false), !dbg !394
  ret void, !dbg !394

else.36:                                          ; preds = %else.35
  %11 = inttoptr i64 %node.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, !dbg !395
  %field.150 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* %11, i64 0, i32 0, !dbg !395
  %.field.ld.16 = load %_type.0*, %_type.0** %field.150, align 8, !dbg !395
  br label %fallthrough.36

fallthrough.37:                                   ; preds = %label.3, %else.37
  %tmpv.154.0 = phi i64 [ %.field.ld.1744, %else.37 ], [ 0, %label.3 ]
  %call.47 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 %tmpv.154.0, i64 %node.chunk1), !dbg !396
  %call.47.fca.0.extract = extractvalue { i64, i64 } %call.47, 0, !dbg !396
  %call.47.fca.1.extract = extractvalue { i64, i64 } %call.47, 1, !dbg !396
  %icmp.48 = icmp eq i64 %call.47.fca.0.extract, 0, !dbg !396
  br i1 %icmp.48, label %fallthrough.38, label %else.38

else.37:                                          ; preds = %label.3
  %12 = inttoptr i64 %node.chunk0 to i64*, !dbg !397
  %.field.ld.1744 = load i64, i64* %12, align 8, !dbg !397
  br label %fallthrough.37

fallthrough.38:                                   ; preds = %fallthrough.37, %else.38
  %tmpv.156.0 = phi %_type.0* [ %.field.ld.18, %else.38 ], [ null, %fallthrough.37 ]
  %13 = inttoptr i64 %call.47.fca.1.extract to i8*, !dbg !398
  %tmp.35.sroa.0.0.cast.693.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.155, i64 0, i64 0, i32 0, !dbg !398
  store %_type.0* %tmpv.156.0, %_type.0** %tmp.35.sroa.0.0.cast.693.sroa_idx, align 8, !dbg !398
  %tmp.35.sroa.2.0.cast.693.sroa_idx40 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.155, i64 0, i64 0, i32 1, !dbg !398
  store i8* %13, i8** %tmp.35.sroa.2.0.cast.693.sroa_idx40, align 8, !dbg !398
  %field.170 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.36, i64 0, i32 0, !dbg !398
  %cast.696 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.155, i64 0, i64 0, !dbg !398
  store { %_type.0*, i8* }* %cast.696, { %_type.0*, i8* }** %field.170, align 8, !dbg !398
  %field.171 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.36, i64 0, i32 1, !dbg !398
  store i64 1, i64* %field.171, align 8, !dbg !398
  %field.172 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.36, i64 0, i32 2, !dbg !398
  store i64 1, i64* %field.172, align 8, !dbg !398
  %call.48 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([31 x i8]* @const.127 to i64), i64 30, %IPST.1* byval nonnull %tmp.36), !dbg !398
  %call.48.fca.0.extract = extractvalue { i64, i64 } %call.48, 0, !dbg !398
  %call.48.fca.1.extract = extractvalue { i64, i64 } %call.48, 1, !dbg !398
  %icmp.49 = icmp eq i64 %call.48.fca.0.extract, 0, !dbg !398
  br i1 %icmp.49, label %fallthrough.39, label %else.39

else.38:                                          ; preds = %fallthrough.37
  %14 = inttoptr i64 %call.47.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !396
  %field.166 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %14, i64 0, i32 0, !dbg !396
  %.field.ld.18 = load %_type.0*, %_type.0** %field.166, align 8, !dbg !396
  br label %fallthrough.38

fallthrough.39:                                   ; preds = %fallthrough.38, %else.39
  %tmpv.158.0 = phi i64 [ %.field.ld.1945, %else.39 ], [ 0, %fallthrough.38 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.158.0, i64 %call.48.fca.1.extract), !dbg !399
  unreachable

else.39:                                          ; preds = %fallthrough.38
  %15 = inttoptr i64 %call.48.fca.0.extract to i64*, !dbg !398
  %.field.ld.1945 = load i64, i64* %15, align 8, !dbg !398
  br label %fallthrough.39
}

define void @command_line_arguments.Context.evalAssignStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.14, i8* nest nocapture readnone %nest.23, %Context.0* %c, %AssignStmt.0* readonly %e) #0 !dbg !400 {
entry:
  %sret.actual.88 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.655 = alloca { i8*, i64 }, align 8
  %tmpv.656 = alloca { %_type.0*, i8* }, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !416, metadata !DIExpression()), !dbg !417
  call void @llvm.dbg.value(metadata %AssignStmt.0* %e, metadata !418, metadata !DIExpression()), !dbg !419
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !420, metadata !DIExpression()), !dbg !421
  %icmp.221 = icmp eq %AssignStmt.0* %e, null, !dbg !422
  br i1 %icmp.221, label %then.197, label %else.197

then.197:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !422
  unreachable

else.197:                                         ; preds = %entry
  %tmpv.636.sroa.0.0.cast.2203.sroa_idx = getelementptr inbounds %AssignStmt.0, %AssignStmt.0* %e, i64 0, i32 3, i32 0
  %tmpv.636.sroa.0.0.copyload = load %Expr.0*, %Expr.0** %tmpv.636.sroa.0.0.cast.2203.sroa_idx, align 8
  %tmpv.636.sroa.2.0.cast.2203.sroa_idx9 = getelementptr inbounds %AssignStmt.0, %AssignStmt.0* %e, i64 0, i32 3, i32 1
  %tmpv.636.sroa.2.0.copyload = load i64, i64* %tmpv.636.sroa.2.0.cast.2203.sroa_idx9, align 8
  %icmp.222 = icmp slt i64 %tmpv.636.sroa.2.0.copyload, 1, !dbg !424
  br i1 %icmp.222, label %then.198, label %else.198

then.198:                                         ; preds = %else.197
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !424
  unreachable

else.198:                                         ; preds = %else.197
  %tmpv.639.sroa.0.0.cast.2205.sroa_idx = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.636.sroa.0.0.copyload, i64 0, i32 0
  %tmpv.639.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.639.sroa.0.0.cast.2205.sroa_idx, align 8
  %tmpv.639.sroa.3.0.cast.2205.sroa_idx6 = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.636.sroa.0.0.copyload, i64 0, i32 1
  %0 = bitcast i8** %tmpv.639.sroa.3.0.cast.2205.sroa_idx6 to i64*
  %tmpv.639.sroa.3.0.copyload49 = load i64, i64* %0, align 8
  %icmp.224 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.639.sroa.0.0.copyload, null, !dbg !424
  br i1 %icmp.224, label %fallthrough.199, label %else.199

fallthrough.199:                                  ; preds = %else.198, %else.199
  %tmpv.641.0 = phi %_type.0* [ %.field.ld.101, %else.199 ], [ null, %else.198 ]
  %call.168 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.641.0), !dbg !424
  %1 = ptrtoint i8* %call.168 to i64, !dbg !424
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.88, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.639.sroa.3.0.copyload49), !dbg !425
  %2 = bitcast { %Value.0*, %error.0 }* %sret.actual.88 to i64*, !dbg !425
  %tmpv.635.sroa.0.0.copyload115051 = load i64, i64* %2, align 8, !dbg !425
  %tmpv.635.sroa.3.sroa.0.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.88, i64 0, i32 1, i32 0, !dbg !425
  %tmpv.635.sroa.3.sroa.0.0.copyload25 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.635.sroa.3.sroa.0.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx, align 8, !dbg !425
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.88, metadata !426, metadata !DIExpression(DW_OP_deref)), !dbg !427
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.635.sroa.3.sroa.0.0.copyload25, metadata !428, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !427
  %icmp.225 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.635.sroa.3.sroa.0.0.copyload25, null, !dbg !429
  br i1 %icmp.225, label %else.201, label %then.200

else.199:                                         ; preds = %else.198
  %field.857 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.639.sroa.0.0.copyload, i64 0, i32 0, !dbg !424
  %.field.ld.101 = load %_type.0*, %_type.0** %field.857, align 8, !dbg !424
  br label %fallthrough.199

then.200:                                         ; preds = %fallthrough.199
  %tmpv.635.sroa.3.sroa.3.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx26 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.88, i64 0, i32 1, i32 1, !dbg !425
  %3 = bitcast i8** %tmpv.635.sroa.3.sroa.3.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx26 to i64*, !dbg !425
  %tmpv.635.sroa.3.sroa.3.0.copyload2752 = load i64, i64* %3, align 8, !dbg !425
  call void @llvm.dbg.value(metadata i8** %tmpv.635.sroa.3.sroa.3.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx26, metadata !428, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !427
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !420, metadata !DIExpression()), !dbg !421
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.635.sroa.3.sroa.0.0.copyload25, metadata !430, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !431
  call void @llvm.dbg.value(metadata i8** %tmpv.635.sroa.3.sroa.3.0.tmpv.635.sroa.3.0.cast.2212.sroa_cast.sroa_idx26, metadata !430, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !431
  %tmp.178.sroa.0.0.cast.2224.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.14, i64 0, i32 0, !dbg !432
  store %Value.0* null, %Value.0** %tmp.178.sroa.0.0.cast.2224.sroa_idx, align 8, !dbg !432
  %tmp.178.sroa.2.0.cast.2224.sroa_idx45 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.14, i64 0, i32 1, i32 0, !dbg !432
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.635.sroa.3.sroa.0.0.copyload25, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.178.sroa.2.0.cast.2224.sroa_idx45, align 8, !dbg !432
  %tmp.178.sroa.3.0.cast.2224.sroa_idx46 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.14, i64 0, i32 1, i32 1, !dbg !432
  %4 = bitcast i8** %tmp.178.sroa.3.0.cast.2224.sroa_idx46 to i64*, !dbg !432
  store i64 %tmpv.635.sroa.3.sroa.3.0.copyload2752, i64* %4, align 8, !dbg !432
  ret void, !dbg !432

else.201:                                         ; preds = %fallthrough.199
  %tmpv.646.sroa.0.0.cast.2229.sroa_idx = getelementptr inbounds %AssignStmt.0, %AssignStmt.0* %e, i64 0, i32 0, i32 0
  %tmpv.646.sroa.0.0.copyload = load %Expr.0*, %Expr.0** %tmpv.646.sroa.0.0.cast.2229.sroa_idx, align 8
  %tmpv.646.sroa.2.0.cast.2229.sroa_idx4 = getelementptr inbounds %AssignStmt.0, %AssignStmt.0* %e, i64 0, i32 0, i32 1
  %tmpv.646.sroa.2.0.copyload = load i64, i64* %tmpv.646.sroa.2.0.cast.2229.sroa_idx4, align 8
  %icmp.227 = icmp slt i64 %tmpv.646.sroa.2.0.copyload, 1, !dbg !433
  br i1 %icmp.227, label %then.202, label %else.202

then.202:                                         ; preds = %else.201
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !433
  unreachable

else.202:                                         ; preds = %else.201
  %tmpv.649.sroa.0.0.cast.2231.sroa_idx = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.646.sroa.0.0.copyload, i64 0, i32 0
  %tmpv.649.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.649.sroa.0.0.cast.2231.sroa_idx, align 8
  %tmpv.649.sroa.3.0.cast.2231.sroa_idx1 = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.646.sroa.0.0.copyload, i64 0, i32 1
  %5 = bitcast i8** %tmpv.649.sroa.3.0.cast.2231.sroa_idx1 to %Ident.0**
  %tmpv.649.sroa.3.0.copyload53 = load %Ident.0*, %Ident.0** %5, align 8
  %icmp.229 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.649.sroa.0.0.copyload, null, !dbg !434
  br i1 %icmp.229, label %fallthrough.203, label %else.203

fallthrough.203:                                  ; preds = %else.202, %else.203
  %tmpv.651.0 = phi %_type.0* [ %.field.ld.102, %else.203 ], [ null, %else.202 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.Ident, i64 0, i32 0), %_type.0* %tmpv.651.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !434
  %icmp.230 = icmp eq %Ident.0* %tmpv.649.sroa.3.0.copyload53, null, !dbg !435
  br i1 %icmp.230, label %then.204, label %else.204

else.203:                                         ; preds = %else.202
  %field.871 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.649.sroa.0.0.copyload, i64 0, i32 0, !dbg !434
  %.field.ld.102 = load %_type.0*, %_type.0** %field.871, align 8, !dbg !434
  br label %fallthrough.203

then.204:                                         ; preds = %fallthrough.203
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !435
  unreachable

else.204:                                         ; preds = %fallthrough.203
  %field.873 = getelementptr inbounds %Ident.0, %Ident.0* %tmpv.649.sroa.3.0.copyload53, i64 0, i32 1, !dbg !435
  %cast.2239 = bitcast { i8*, i64 }* %field.873 to i8*
  %cast.2240 = bitcast { i8*, i64 }* %tmpv.655 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %cast.2240, i8* nonnull align 8 %cast.2239, i64 16, i1 false)
  %field.874 = getelementptr inbounds { %_type.0*, i8* }, { %_type.0*, i8* }* %tmpv.656, i64 0, i32 0, !dbg !436
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %field.874, align 8, !dbg !436
  %field.875 = getelementptr inbounds { %_type.0*, i8* }, { %_type.0*, i8* }* %tmpv.656, i64 0, i32 1, !dbg !436
  %6 = bitcast i8** %field.875 to i64*, !dbg !436
  store i64 %tmpv.635.sroa.0.0.copyload115051, i64* %6, align 8, !dbg !436
  %icmp.231 = icmp eq %Context.0* %c, null, !dbg !437
  br i1 %icmp.231, label %then.205, label %else.205

then.205:                                         ; preds = %else.204
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !437
  unreachable

else.205:                                         ; preds = %else.204
  %field.876 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 1, !dbg !437
  %.field.ld.103 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.876, align 8, !dbg !437
  %call.169 = call i8* @runtime.mapassign(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.103, i8* nonnull %cast.2240), !dbg !436
  %runtime.writeBarrier.ld.19 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !436
  %icmp.233 = icmp eq i32 %runtime.writeBarrier.ld.19, 0, !dbg !436
  br i1 %icmp.233, label %then.206, label %else.206

then.206:                                         ; preds = %else.205
  %icmp.232 = icmp eq i8* %call.169, null, !dbg !436
  br i1 %icmp.232, label %then.207, label %else.207

fallthrough.206:                                  ; preds = %else.206, %else.207
  call void @llvm.dbg.value(metadata %Value.0* @command_line_arguments.True, metadata !420, metadata !DIExpression()), !dbg !421
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !430, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !431
  call void @llvm.dbg.value(metadata i8* null, metadata !430, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !431
  %tmp.179.sroa.0.0.cast.2260.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.14, i64 0, i32 0, !dbg !438
  store %Value.0* @command_line_arguments.True, %Value.0** %tmp.179.sroa.0.0.cast.2260.sroa_idx, align 8, !dbg !438
  %tmp.179.sroa.2.0.cast.2260.sroa_idx47 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.14, i64 0, i32 1, i32 0, !dbg !438
  %7 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.179.sroa.2.0.cast.2260.sroa_idx47 to i8*, !dbg !438
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false), !dbg !438
  ret void, !dbg !438

else.206:                                         ; preds = %else.205
  %cast.2253 = bitcast { %_type.0*, i8* }* %tmpv.656 to i8*, !dbg !436
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i64 0, i32 0), i8* %call.169, i8* nonnull %cast.2253), !dbg !436
  br label %fallthrough.206

then.207:                                         ; preds = %then.206
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !436
  unreachable

else.207:                                         ; preds = %then.206
  %cast.2250 = bitcast { %_type.0*, i8* }* %tmpv.656 to i8*, !dbg !436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.169, i8* nonnull align 8 %cast.2250, i64 16, i1 false), !dbg !436
  br label %fallthrough.206
}

define void @command_line_arguments.Context.evalBinaryExpr({ %Value.0*, %error.0 }* sret %sret.formal.10, i8* nest nocapture readnone %nest.16, %Context.0* %c, %BinaryExpr.0* readonly %e) #0 !dbg !439 {
entry:
  %tmp.8.i = alloca %IPST.1, align 8
  %tmp.4.i = alloca %IPST.1, align 8
  %tmp.0.i = alloca %IPST.0, align 8
  %tmpv.0.i = alloca [2 x %Value.0*], align 8
  %tmpv.7.i = alloca [2 x { %_type.0*, i8* }], align 8
  %tmpv.15.i = alloca { i8*, i64, i64 }, align 8
  %sret.actual.7.i = alloca { i8*, i64, i64 }, align 8
  %tmpv.16.i = alloca { i8*, i64, i64 }, align 8
  %sret.actual.8.i = alloca { i8*, i64, i64 }, align 8
  %tmpv.22.i = alloca [2 x { %_type.0*, i8* }], align 8
  %tmpv.29.i = alloca %Value.0, align 8
  %sret.actual.13.i = alloca %Value.0, align 8
  %tmp.145 = alloca %IPST.1, align 8
  %tmp.136 = alloca %IPST.1, align 8
  %tmp.128 = alloca %IPST.1, align 8
  %tmp.125 = alloca %IPST.1, align 8
  %sret.actual.62 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.63 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.465 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.471 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.477 = alloca %Value.0, align 8
  %sret.actual.65 = alloca %Value.0, align 8
  %sret.actual.66 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.496 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.502 = alloca %Value.0, align 8
  %sret.actual.67 = alloca %Value.0, align 8
  %sret.actual.68 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.522 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !450, metadata !DIExpression()), !dbg !451
  call void @llvm.dbg.value(metadata %BinaryExpr.0* %e, metadata !452, metadata !DIExpression()), !dbg !453
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  %icmp.155 = icmp eq %BinaryExpr.0* %e, null, !dbg !456
  br i1 %icmp.155, label %then.130, label %else.130

then.130:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !456
  unreachable

else.130:                                         ; preds = %entry
  %tmpv.442.sroa.0.0.cast.1589.sroa_idx = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 0, i32 0
  %tmpv.442.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.442.sroa.0.0.cast.1589.sroa_idx, align 8
  %tmpv.442.sroa.3.0.cast.1589.sroa_idx98 = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 0, i32 1
  %0 = bitcast i8** %tmpv.442.sroa.3.0.cast.1589.sroa_idx98 to i64*
  %tmpv.442.sroa.3.0.copyload267 = load i64, i64* %0, align 8
  %icmp.156 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.442.sroa.0.0.copyload, null, !dbg !456
  br i1 %icmp.156, label %fallthrough.131, label %else.131

fallthrough.131:                                  ; preds = %else.130, %else.131
  %tmpv.444.0 = phi %_type.0* [ %.field.ld.65, %else.131 ], [ null, %else.130 ]
  %call.117 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.444.0), !dbg !456
  %1 = ptrtoint i8* %call.117 to i64, !dbg !456
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.62, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.442.sroa.3.0.copyload267), !dbg !458
  %tmpv.441.sroa.0.0.cast.1596.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.62, i64 0, i32 0, !dbg !458
  %tmpv.441.sroa.0.0.copyload99 = load %Value.0*, %Value.0** %tmpv.441.sroa.0.0.cast.1596.sroa_idx, align 8, !dbg !458
  %tmpv.441.sroa.3.sroa.0.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.62, i64 0, i32 1, i32 0, !dbg !458
  %tmpv.441.sroa.3.sroa.0.0.copyload131 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.441.sroa.3.sroa.0.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx, align 8, !dbg !458
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.441.sroa.0.0.copyload99, metadata !459, metadata !DIExpression()), !dbg !460
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.441.sroa.3.sroa.0.0.copyload131, metadata !461, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !460
  %icmp.157 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.441.sroa.3.sroa.0.0.copyload131, null, !dbg !462
  br i1 %icmp.157, label %else.133, label %then.132

else.131:                                         ; preds = %else.130
  %field.570 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.442.sroa.0.0.copyload, i64 0, i32 0, !dbg !456
  %.field.ld.65 = load %_type.0*, %_type.0** %field.570, align 8, !dbg !456
  br label %fallthrough.131

then.132:                                         ; preds = %fallthrough.131
  %tmpv.441.sroa.3.sroa.3.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx132 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.62, i64 0, i32 1, i32 1, !dbg !458
  %2 = bitcast i8** %tmpv.441.sroa.3.sroa.3.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx132 to i64*, !dbg !458
  %tmpv.441.sroa.3.sroa.3.0.copyload133268 = load i64, i64* %2, align 8, !dbg !458
  call void @llvm.dbg.value(metadata i8** %tmpv.441.sroa.3.sroa.3.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx132, metadata !461, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !460
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.441.sroa.3.sroa.0.0.copyload131, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8** %tmpv.441.sroa.3.sroa.3.0.tmpv.441.sroa.3.0.cast.1596.sroa_cast.sroa_idx132, metadata !463, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.120.sroa.0.0.cast.1608.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !465
  store %Value.0* null, %Value.0** %tmp.120.sroa.0.0.cast.1608.sroa_idx, align 8, !dbg !465
  %tmp.120.sroa.2.0.cast.1608.sroa_idx239 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !465
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.441.sroa.3.sroa.0.0.copyload131, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.120.sroa.2.0.cast.1608.sroa_idx239, align 8, !dbg !465
  %tmp.120.sroa.3.0.cast.1608.sroa_idx240 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 1, !dbg !465
  %3 = bitcast i8** %tmp.120.sroa.3.0.cast.1608.sroa_idx240 to i64*, !dbg !465
  store i64 %tmpv.441.sroa.3.sroa.3.0.copyload133268, i64* %3, align 8, !dbg !465
  ret void, !dbg !465

else.133:                                         ; preds = %fallthrough.131
  %field.690 = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 2, !dbg !466
  %.field.ld.77 = load i64, i64* %field.690, align 8, !dbg !466
  switch i64 %.field.ld.77, label %else.156 [
    i64 39, label %else.134
    i64 34, label %case.3
    i64 35, label %case.4
  ]

case.3:                                           ; preds = %else.133
  %call.125 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !467
  %icmp.166 = icmp eq i8 %call.125, 0, !dbg !469
  br i1 %icmp.166, label %else.139, label %else.138

case.4:                                           ; preds = %else.133
  %call.131 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !470
  %icmp.175 = icmp eq i8 %call.131, 0, !dbg !472
  br i1 %icmp.175, label %else.148, label %else.147

else.134:                                         ; preds = %else.133
  %tmpv.450.sroa.0.0.cast.1615.sroa_idx = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 0
  %tmpv.450.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.450.sroa.0.0.cast.1615.sroa_idx, align 8
  %tmpv.450.sroa.3.0.cast.1615.sroa_idx63 = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 1
  %4 = bitcast i8** %tmpv.450.sroa.3.0.cast.1615.sroa_idx63 to i64*
  %tmpv.450.sroa.3.0.copyload277 = load i64, i64* %4, align 8
  %icmp.159 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.450.sroa.0.0.copyload, null, !dbg !473
  br i1 %icmp.159, label %fallthrough.135, label %else.135

fallthrough.135:                                  ; preds = %else.134, %else.135
  %tmpv.452.0 = phi %_type.0* [ %.field.ld.66, %else.135 ], [ null, %else.134 ]
  %call.118 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.452.0), !dbg !473
  %5 = ptrtoint i8* %call.118 to i64, !dbg !473
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.63, i8* nest undef, %Context.0* %c, i64 %5, i64 %tmpv.450.sroa.3.0.copyload277), !dbg !475
  %tmpv.449.sroa.3.sroa.0.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.63, i64 0, i32 1, i32 0, !dbg !475
  %tmpv.449.sroa.3.sroa.0.0.copyload92 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.449.sroa.3.sroa.0.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx, align 8, !dbg !475
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.449.sroa.3.sroa.0.0.copyload92, metadata !476, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !477
  %icmp.160 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.449.sroa.3.sroa.0.0.copyload92, null, !dbg !478
  br i1 %icmp.160, label %else.136, label %then.136

else.135:                                         ; preds = %else.134
  %field.582 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.450.sroa.0.0.copyload, i64 0, i32 0, !dbg !473
  %.field.ld.66 = load %_type.0*, %_type.0** %field.582, align 8, !dbg !473
  br label %fallthrough.135

then.136:                                         ; preds = %fallthrough.135
  %tmpv.449.sroa.3.sroa.3.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx93 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.63, i64 0, i32 1, i32 1, !dbg !475
  %6 = bitcast i8** %tmpv.449.sroa.3.sroa.3.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx93 to i64*, !dbg !475
  %tmpv.449.sroa.3.sroa.3.0.copyload94278 = load i64, i64* %6, align 8, !dbg !475
  call void @llvm.dbg.value(metadata i8** %tmpv.449.sroa.3.sroa.3.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx93, metadata !476, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !477
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.449.sroa.3.sroa.0.0.copyload92, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8** %tmpv.449.sroa.3.sroa.3.0.tmpv.449.sroa.3.0.cast.1622.sroa_cast.sroa_idx93, metadata !463, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.122.sroa.0.0.cast.1634.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !479
  store %Value.0* null, %Value.0** %tmp.122.sroa.0.0.cast.1634.sroa_idx, align 8, !dbg !479
  %tmp.122.sroa.2.0.cast.1634.sroa_idx241 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !479
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.449.sroa.3.sroa.0.0.copyload92, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.122.sroa.2.0.cast.1634.sroa_idx241, align 8, !dbg !479
  %tmp.122.sroa.3.0.cast.1634.sroa_idx242 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 1, !dbg !479
  %7 = bitcast i8** %tmp.122.sroa.3.0.cast.1634.sroa_idx242 to i64*, !dbg !479
  store i64 %tmpv.449.sroa.3.sroa.3.0.copyload94278, i64* %7, align 8, !dbg !479
  ret void, !dbg !479

else.136:                                         ; preds = %fallthrough.135
  %tmpv.449.sroa.0.0.cast.1622.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.63, i64 0, i32 0, !dbg !475
  %tmpv.449.sroa.0.0.copyload64 = load %Value.0*, %Value.0** %tmpv.449.sroa.0.0.cast.1622.sroa_idx, align 8, !dbg !475
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.449.sroa.0.0.copyload64, metadata !480, metadata !DIExpression()), !dbg !477
  %8 = bitcast %IPST.1* %tmp.8.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8), !dbg !481
  %9 = bitcast %IPST.1* %tmp.4.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9), !dbg !481
  %10 = bitcast %IPST.0* %tmp.0.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10), !dbg !481
  %11 = bitcast [2 x %Value.0*]* %tmpv.0.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11), !dbg !481
  %12 = bitcast [2 x { %_type.0*, i8* }]* %tmpv.7.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12), !dbg !481
  %13 = bitcast { i8*, i64, i64 }* %tmpv.15.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13), !dbg !481
  %14 = bitcast { i8*, i64, i64 }* %sret.actual.7.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14), !dbg !481
  %15 = bitcast { i8*, i64, i64 }* %tmpv.16.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15), !dbg !481
  %16 = bitcast { i8*, i64, i64 }* %sret.actual.8.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16), !dbg !481
  %17 = bitcast [2 x { %_type.0*, i8* }]* %tmpv.22.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17), !dbg !481
  %18 = bitcast %Value.0* %tmpv.29.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18), !dbg !481
  %19 = bitcast %Value.0* %sret.actual.13.i to i8*, !dbg !481
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19), !dbg !481
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.441.sroa.0.0.copyload99, metadata !486, metadata !DIExpression()), !dbg !481
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.449.sroa.0.0.copyload64, metadata !487, metadata !DIExpression()), !dbg !488
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !489, metadata !DIExpression()), !dbg !490
  %index.0.i = getelementptr inbounds [2 x %Value.0*], [2 x %Value.0*]* %tmpv.0.i, i64 0, i64 0, !dbg !491
  store %Value.0* %tmpv.441.sroa.0.0.copyload99, %Value.0** %index.0.i, align 8, !dbg !491
  %index.1.i = getelementptr inbounds [2 x %Value.0*], [2 x %Value.0*]* %tmpv.0.i, i64 0, i64 1, !dbg !491
  store %Value.0* %tmpv.449.sroa.0.0.copyload64, %Value.0** %index.1.i, align 8, !dbg !491
  %field.0.i = getelementptr inbounds %IPST.0, %IPST.0* %tmp.0.i, i64 0, i32 0, !dbg !491
  store %Value.0** %index.0.i, %Value.0*** %field.0.i, align 8, !dbg !491
  %field.1.i = getelementptr inbounds %IPST.0, %IPST.0* %tmp.0.i, i64 0, i32 1, !dbg !491
  store i64 2, i64* %field.1.i, align 8, !dbg !491
  %field.2.i = getelementptr inbounds %IPST.0, %IPST.0* %tmp.0.i, i64 0, i32 2, !dbg !491
  store i64 2, i64* %field.2.i, align 8, !dbg !491
  %call.0.i = call fastcc { i64, i64 } @command_line_arguments.checkValues(%IPST.0* byval nonnull %tmp.0.i), !dbg !491
  %call.0.fca.0.extract.i = extractvalue { i64, i64 } %call.0.i, 0, !dbg !491
  call void @llvm.dbg.value(metadata i64 %call.0.fca.0.extract.i, metadata !494, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !495
  %icmp.0.i = icmp eq i64 %call.0.fca.0.extract.i, 0, !dbg !496
  br i1 %icmp.0.i, label %else.0.i, label %command_line_arguments.compare.exit

else.0.i:                                         ; preds = %else.136
  %call.1.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !497
  %call.1.fca.0.extract.i = extractvalue { i64, i64 } %call.1.i, 0, !dbg !497
  %call.1.fca.1.extract.i = extractvalue { i64, i64 } %call.1.i, 1, !dbg !497
  %call.2.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !498
  %call.2.fca.0.extract.i = extractvalue { i64, i64 } %call.2.i, 0, !dbg !498
  %call.2.fca.1.extract.i = extractvalue { i64, i64 } %call.2.i, 1, !dbg !498
  %call.6.i = call i8 @runtime.ifaceeq(i8* nest undef, i64 %call.1.fca.0.extract.i, i64 %call.1.fca.1.extract.i, i64 %call.2.fca.0.extract.i, i64 %call.2.fca.1.extract.i), !dbg !499
  %icmp.4.i = icmp eq i8 %call.6.i, 1, !dbg !499
  br i1 %icmp.4.i, label %else.1.i, label %then.1.i

then.1.i:                                         ; preds = %else.0.i
  %call.3.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !500
  %call.3.fca.0.extract.i = extractvalue { i64, i64 } %call.3.i, 0, !dbg !500
  %call.3.fca.1.extract.i = extractvalue { i64, i64 } %call.3.i, 1, !dbg !500
  %call.4.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.449.sroa.0.0.copyload64), !dbg !501
  %call.4.fca.0.extract.i = extractvalue { i64, i64 } %call.4.i, 0, !dbg !501
  %call.4.fca.1.extract.i = extractvalue { i64, i64 } %call.4.i, 1, !dbg !501
  %icmp.1.i = icmp eq i64 %call.3.fca.0.extract.i, 0, !dbg !500
  br i1 %icmp.1.i, label %fallthrough.2.i, label %else.2.i

else.1.i:                                         ; preds = %else.0.i
  call void @llvm.dbg.value(metadata i8 0, metadata !502, metadata !DIExpression()), !dbg !503
  %call.7.i = call { i64, i64 } @reflect.Value.Interface(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !504
  %call.7.fca.0.extract.i = extractvalue { i64, i64 } %call.7.i, 0, !dbg !504
  %call.7.fca.1.extract.i = extractvalue { i64, i64 } %call.7.i, 1, !dbg !504
  %call.8.i = call %_type.0* @runtime.efacetype(i8* nest undef, i64 %call.7.fca.0.extract.i, i64 %call.7.fca.1.extract.i), !dbg !505
  %call.9.i = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type...6.7uint8, i64 0, i32 0), %_type.0* %call.8.i), !dbg !506
  %icmp.5.i = icmp eq i8 %call.9.i, 0, !dbg !506
  br i1 %icmp.5.i, label %label.0.i, label %else.5.i

fallthrough.2.i:                                  ; preds = %else.2.i, %then.1.i
  %tmpv.8.0.i = phi %_type.0* [ %.field.ld.0.i, %else.2.i ], [ null, %then.1.i ]
  %20 = inttoptr i64 %call.3.fca.1.extract.i to i8*, !dbg !507
  %icmp.2.i = icmp eq i64 %call.4.fca.0.extract.i, 0, !dbg !501
  br i1 %icmp.2.i, label %fallthrough.3.i, label %else.3.i

else.2.i:                                         ; preds = %then.1.i
  %21 = inttoptr i64 %call.3.fca.0.extract.i to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !500
  %field.8.i = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %21, i64 0, i32 0, !dbg !500
  %.field.ld.0.i = load %_type.0*, %_type.0** %field.8.i, align 8, !dbg !500
  br label %fallthrough.2.i

fallthrough.3.i:                                  ; preds = %else.3.i, %fallthrough.2.i
  %tmpv.9.0.i = phi %_type.0* [ %.field.ld.1.i, %else.3.i ], [ null, %fallthrough.2.i ]
  %22 = inttoptr i64 %call.4.fca.1.extract.i to i8*, !dbg !507
  %tmp.2.sroa.0.0.cast.30.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.7.i, i64 0, i64 0, i32 0, !dbg !507
  store %_type.0* %tmpv.8.0.i, %_type.0** %tmp.2.sroa.0.0.cast.30.sroa_idx.i, align 8, !dbg !507
  %tmp.2.sroa.2.0.cast.30.sroa_idx37.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.7.i, i64 0, i64 0, i32 1, !dbg !507
  store i8* %20, i8** %tmp.2.sroa.2.0.cast.30.sroa_idx37.i, align 8, !dbg !507
  %tmp.3.sroa.0.0.cast.32.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.7.i, i64 0, i64 1, i32 0, !dbg !507
  store %_type.0* %tmpv.9.0.i, %_type.0** %tmp.3.sroa.0.0.cast.32.sroa_idx.i, align 8, !dbg !507
  %tmp.3.sroa.2.0.cast.32.sroa_idx38.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.7.i, i64 0, i64 1, i32 1, !dbg !507
  store i8* %22, i8** %tmp.3.sroa.2.0.cast.32.sroa_idx38.i, align 8, !dbg !507
  %field.18.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.4.i, i64 0, i32 0, !dbg !507
  %cast.35.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.7.i, i64 0, i64 0, !dbg !507
  store { %_type.0*, i8* }* %cast.35.i, { %_type.0*, i8* }** %field.18.i, align 8, !dbg !507
  %field.19.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.4.i, i64 0, i32 1, !dbg !507
  store i64 2, i64* %field.19.i, align 8, !dbg !507
  %field.20.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.4.i, i64 0, i32 2, !dbg !507
  store i64 2, i64* %field.20.i, align 8, !dbg !507
  %call.5.i = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([41 x i8]* @const.0 to i64), i64 40, %IPST.1* byval nonnull %tmp.4.i), !dbg !507
  %call.5.fca.0.extract.i = extractvalue { i64, i64 } %call.5.i, 0, !dbg !507
  %call.5.fca.1.extract.i = extractvalue { i64, i64 } %call.5.i, 1, !dbg !507
  %icmp.3.i = icmp eq i64 %call.5.fca.0.extract.i, 0, !dbg !507
  br i1 %icmp.3.i, label %fallthrough.4.i, label %else.4.i

else.3.i:                                         ; preds = %fallthrough.2.i
  %23 = inttoptr i64 %call.4.fca.0.extract.i to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !501
  %field.12.i = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %23, i64 0, i32 0, !dbg !501
  %.field.ld.1.i = load %_type.0*, %_type.0** %field.12.i, align 8, !dbg !501
  br label %fallthrough.3.i

fallthrough.4.i:                                  ; preds = %else.4.i, %fallthrough.3.i
  %tmpv.11.0.i = phi i64 [ %.field.ld.22.i, %else.4.i ], [ 0, %fallthrough.3.i ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.11.0.i, i64 %call.5.fca.1.extract.i), !dbg !508
  unreachable

else.4.i:                                         ; preds = %fallthrough.3.i
  %24 = inttoptr i64 %call.5.fca.0.extract.i to i64*, !dbg !507
  %.field.ld.22.i = load i64, i64* %24, align 8, !dbg !507
  br label %fallthrough.4.i

else.5.i:                                         ; preds = %else.1.i
  call void @reflect.Value.Bytes({ i8*, i64, i64 }* nonnull sret %sret.actual.7.i, i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !509
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %14, i64 24, i1 false)
  call void @reflect.Value.Bytes({ i8*, i64, i64 }* nonnull sret %sret.actual.8.i, i8* nest undef, %Value.0* %tmpv.449.sroa.0.0.copyload64), !dbg !510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* nonnull align 8 %16, i64 24, i1 false)
  %call.10.i = call i64 @bytes.Compare(i8* nest undef, { i8*, i64, i64 }* byval nonnull %tmpv.15.i, { i8*, i64, i64 }* byval nonnull %tmpv.16.i), !dbg !511
  br label %label.1.i

label.0.i:                                        ; preds = %else.1.i
  %call.11.i = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* nonnull @string..d, %_type.0* %call.8.i), !dbg !512
  %icmp.7.i = icmp eq i8 %call.11.i, 0, !dbg !512
  br i1 %icmp.7.i, label %label.2.i, label %else.7.i

label.1.i:                                        ; preds = %else.7.i, %else.5.i
  %v.0.in.in.i = phi i64 [ %call.10.i, %else.5.i ], [ %call.14.i, %else.7.i ]
  %v.0.in.i = icmp eq i64 %v.0.in.in.i, 0, !dbg !513
  %v.0.i = zext i1 %v.0.in.i to i8
  call void @llvm.dbg.value(metadata i8 %v.0.i, metadata !502, metadata !DIExpression()), !dbg !503
  %call.17.i = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !514
  %call.18.i = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !515
  store i8 %v.0.i, i8* %call.18.i, align 1, !dbg !515
  %25 = ptrtoint i8* %call.18.i to i64, !dbg !515
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.13.i, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %25), !dbg !516
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %19, i64 24, i1 false)
  %runtime.writeBarrier.ld.0.i = load i32, i32* @runtime.writeBarrier, align 4, !dbg !516
  %icmp.12.i = icmp eq i32 %runtime.writeBarrier.ld.0.i, 0, !dbg !516
  br i1 %icmp.12.i, label %then.11.i, label %else.11.i

else.7.i:                                         ; preds = %label.0.i
  %call.12.i = call { i64, i64 } @reflect.Value.String(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !517
  %call.12.fca.0.extract.i = extractvalue { i64, i64 } %call.12.i, 0, !dbg !517
  %call.12.fca.1.extract.i = extractvalue { i64, i64 } %call.12.i, 1, !dbg !517
  %call.13.i = call { i64, i64 } @reflect.Value.String(i8* nest undef, %Value.0* %tmpv.449.sroa.0.0.copyload64), !dbg !518
  %call.13.fca.0.extract.i = extractvalue { i64, i64 } %call.13.i, 0, !dbg !518
  %call.13.fca.1.extract.i = extractvalue { i64, i64 } %call.13.i, 1, !dbg !518
  %call.14.i = call i64 @strings.Compare(i8* nest undef, i64 %call.12.fca.0.extract.i, i64 %call.12.fca.1.extract.i, i64 %call.13.fca.0.extract.i, i64 %call.13.fca.1.extract.i), !dbg !519
  br label %label.1.i

label.2.i:                                        ; preds = %label.0.i
  %call.15.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !520
  %call.15.fca.0.extract.i = extractvalue { i64, i64 } %call.15.i, 0, !dbg !520
  %call.15.fca.1.extract.i = extractvalue { i64, i64 } %call.15.i, 1, !dbg !520
  %icmp.9.i = icmp eq i64 %call.15.fca.0.extract.i, 0, !dbg !520
  br i1 %icmp.9.i, label %fallthrough.9.i, label %else.9.i

fallthrough.9.i:                                  ; preds = %else.9.i, %label.2.i
  %tmpv.23.0.i = phi %_type.0* [ %.field.ld.3.i, %else.9.i ], [ null, %label.2.i ]
  %26 = inttoptr i64 %call.15.fca.1.extract.i to i8*, !dbg !521
  %tmp.6.sroa.0.0.cast.76.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.22.i, i64 0, i64 0, i32 0, !dbg !521
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.6.sroa.0.0.cast.76.sroa_idx.i, align 8, !dbg !521
  %tmp.6.sroa.2.0.cast.76.sroa_idx39.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.22.i, i64 0, i64 0, i32 1, !dbg !521
  %27 = bitcast i8** %tmp.6.sroa.2.0.cast.76.sroa_idx39.i to %Value.0**, !dbg !521
  store %Value.0* %tmpv.441.sroa.0.0.copyload99, %Value.0** %27, align 8, !dbg !521
  %tmp.7.sroa.0.0.cast.78.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.22.i, i64 0, i64 1, i32 0, !dbg !521
  store %_type.0* %tmpv.23.0.i, %_type.0** %tmp.7.sroa.0.0.cast.78.sroa_idx.i, align 8, !dbg !521
  %tmp.7.sroa.2.0.cast.78.sroa_idx40.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.22.i, i64 0, i64 1, i32 1, !dbg !521
  store i8* %26, i8** %tmp.7.sroa.2.0.cast.78.sroa_idx40.i, align 8, !dbg !521
  %field.35.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.8.i, i64 0, i32 0, !dbg !521
  %cast.81.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.22.i, i64 0, i64 0, !dbg !521
  store { %_type.0*, i8* }* %cast.81.i, { %_type.0*, i8* }** %field.35.i, align 8, !dbg !521
  %field.36.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.8.i, i64 0, i32 1, !dbg !521
  store i64 2, i64* %field.36.i, align 8, !dbg !521
  %field.37.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.8.i, i64 0, i32 2, !dbg !521
  store i64 2, i64* %field.37.i, align 8, !dbg !521
  %call.16.i = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([23 x i8]* @const.7 to i64), i64 22, %IPST.1* byval nonnull %tmp.8.i), !dbg !521
  %call.16.fca.0.extract.i = extractvalue { i64, i64 } %call.16.i, 0, !dbg !521
  %call.16.fca.1.extract.i = extractvalue { i64, i64 } %call.16.i, 1, !dbg !521
  %icmp.10.i = icmp eq i64 %call.16.fca.0.extract.i, 0, !dbg !521
  br i1 %icmp.10.i, label %fallthrough.10.i, label %else.10.i

else.9.i:                                         ; preds = %label.2.i
  %28 = inttoptr i64 %call.15.fca.0.extract.i to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !520
  %field.29.i = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %28, i64 0, i32 0, !dbg !520
  %.field.ld.3.i = load %_type.0*, %_type.0** %field.29.i, align 8, !dbg !520
  br label %fallthrough.9.i

fallthrough.10.i:                                 ; preds = %else.10.i, %fallthrough.9.i
  %tmpv.25.0.i = phi i64 [ %.field.ld.41.i, %else.10.i ], [ 0, %fallthrough.9.i ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.25.0.i, i64 %call.16.fca.1.extract.i), !dbg !522
  unreachable

else.10.i:                                        ; preds = %fallthrough.9.i
  %29 = inttoptr i64 %call.16.fca.0.extract.i to i64*, !dbg !521
  %.field.ld.41.i = load i64, i64* %29, align 8, !dbg !521
  br label %fallthrough.10.i

then.11.i:                                        ; preds = %label.1.i
  call void @llvm.dbg.value(metadata i8* %call.17.i, metadata !523, metadata !DIExpression()), !dbg !524
  %icmp.11.i = icmp eq i8* %call.17.i, null, !dbg !516
  br i1 %icmp.11.i, label %then.12.i, label %else.12.i

command_line_arguments.compare.exit.thread:       ; preds = %else.11.i, %else.12.i
  call void @llvm.dbg.value(metadata i8* %call.17.i, metadata !489, metadata !DIExpression()), !dbg !490
  call void @llvm.dbg.value(metadata i64 0, metadata !525, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !526
  call void @llvm.dbg.value(metadata i64 0, metadata !525, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !526
  %30 = bitcast i8* %call.17.i to %Value.0*, !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18), !dbg !527
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19), !dbg !527
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !528, metadata !DIExpression()), !dbg !529
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %34, metadata !476, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !477
  %call.119 = call i8 @reflect.Value.Bool(i8* nest undef, %Value.0* %30), !dbg !530
  %command_line_arguments.PkgLogger.field.ld.22 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !531
  %field.599 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.22, i64 0, i32 1, !dbg !531
  %.field.ld.67 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.599, align 8, !dbg !531
  %command_line_arguments.PkgLogger.field.ld.23 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !531
  %call.120 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !531
  %call.121 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !531
  store i8 %call.119, i8* %call.121, align 1, !dbg !531
  %tmp.124.sroa.0.0.cast.1657.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.465, i64 0, i64 0, i32 0, !dbg !531
  store %_type.0* @bool..d, %_type.0** %tmp.124.sroa.0.0.cast.1657.sroa_idx, align 8, !dbg !531
  %tmp.124.sroa.2.0.cast.1657.sroa_idx245 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.465, i64 0, i64 0, i32 1, !dbg !531
  store i8* %call.121, i8** %tmp.124.sroa.2.0.cast.1657.sroa_idx245, align 8, !dbg !531
  %cast.1661 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.465 to i8*, !dbg !531
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.120, i8* nonnull %cast.1661), !dbg !531
  %31 = bitcast %IPST.1* %tmp.125 to i8**, !dbg !531
  store i8* %call.120, i8** %31, align 8, !dbg !531
  %field.602 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.125, i64 0, i32 1, !dbg !531
  store i64 1, i64* %field.602, align 8, !dbg !531
  %field.603 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.125, i64 0, i32 2, !dbg !531
  store i64 1, i64* %field.603, align 8, !dbg !531
  call void %.field.ld.67(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.23, i64 ptrtoint ([13 x i8]* @const.190 to i64), i64 12, %IPST.1* byval nonnull %tmp.125), !dbg !531
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %32 = bitcast { %Value.0*, %error.0 }* %sret.formal.10 to i8**, !dbg !532
  store i8* %call.17.i, i8** %32, align 8, !dbg !532
  %tmp.126.sroa.2.0.cast.1670.sroa_idx246 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !532
  %33 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.126.sroa.2.0.cast.1670.sroa_idx246 to i8*, !dbg !532
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false), !dbg !532
  ret void, !dbg !532

else.11.i:                                        ; preds = %label.1.i
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.17.i, i8* nonnull %18), !dbg !516
  br label %command_line_arguments.compare.exit.thread

then.12.i:                                        ; preds = %then.11.i
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !516
  unreachable

else.12.i:                                        ; preds = %then.11.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.17.i, i8* nonnull align 8 %18, i64 24, i1 false), !dbg !516
  br label %command_line_arguments.compare.exit.thread

command_line_arguments.compare.exit:              ; preds = %else.136
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !489, metadata !DIExpression()), !dbg !490
  call void @llvm.dbg.value(metadata i64 %call.0.fca.0.extract.i, metadata !525, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !526
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18), !dbg !533
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19), !dbg !533
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !528, metadata !DIExpression()), !dbg !529
  %34 = inttoptr i64 %call.0.fca.0.extract.i to { %_type.0*, { i64, i64 } (i8*, i8*)* }*, !dbg !534
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %34, metadata !476, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !477
  %call.0.fca.1.extract.i = extractvalue { i64, i64 } %call.0.i, 1, !dbg !491
  call void @llvm.dbg.value(metadata i64 %call.0.fca.1.extract.i, metadata !525, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !526
  call void @llvm.dbg.value(metadata i64 %call.0.fca.1.extract.i, metadata !494, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !495
  call void @llvm.dbg.value(metadata i8** undef, metadata !476, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !477
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %34, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8** undef, metadata !463, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.123.sroa.0.0.cast.1652.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !535
  store %Value.0* null, %Value.0** %tmp.123.sroa.0.0.cast.1652.sroa_idx, align 8, !dbg !535
  %tmp.123.sroa.2.0.cast.1652.sroa_idx243 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !535
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %34, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.123.sroa.2.0.cast.1652.sroa_idx243, align 8, !dbg !535
  %tmp.123.sroa.3.0.cast.1652.sroa_idx244 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 1, !dbg !535
  %35 = bitcast i8** %tmp.123.sroa.3.0.cast.1652.sroa_idx244 to i64*, !dbg !535
  store i64 %call.0.fca.1.extract.i, i64* %35, align 8, !dbg !535
  ret void, !dbg !535

else.138:                                         ; preds = %case.3
  %call.126 = call i8 @reflect.Value.Bool(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !536
  %icmp.167 = icmp eq i8 %call.126, 0, !dbg !537
  br i1 %icmp.167, label %then.143, label %else.144

else.139:                                         ; preds = %case.3
  %tmpv.468.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.442.sroa.0.0.cast.1589.sroa_idx, align 8
  %tmpv.468.sroa.3.0.copyload276 = load i64, i64* %0, align 8
  %command_line_arguments.PkgLogger.field.ld.24 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !538
  %field.614 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.24, i64 0, i32 1, !dbg !538
  %.field.ld.69 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.614, align 8, !dbg !538
  %command_line_arguments.PkgLogger.field.ld.25 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !538
  %call.122 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !538
  %icmp.163 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.468.sroa.0.0.copyload, null, !dbg !538
  br i1 %icmp.163, label %fallthrough.140, label %else.140

fallthrough.140:                                  ; preds = %else.139, %else.140
  %tmpv.472.0 = phi %_type.0* [ %.field.ld.68, %else.140 ], [ null, %else.139 ]
  %tmp.127.sroa.0.0.cast.1679.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.471, i64 0, i64 0, i32 0, !dbg !538
  store %_type.0* %tmpv.472.0, %_type.0** %tmp.127.sroa.0.0.cast.1679.sroa_idx, align 8, !dbg !538
  %tmp.127.sroa.2.0.cast.1679.sroa_idx248 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.471, i64 0, i64 0, i32 1, !dbg !538
  %36 = bitcast i8** %tmp.127.sroa.2.0.cast.1679.sroa_idx248 to i64*, !dbg !538
  store i64 %tmpv.468.sroa.3.0.copyload276, i64* %36, align 8, !dbg !538
  %cast.1683 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.471 to i8*, !dbg !538
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.122, i8* nonnull %cast.1683), !dbg !538
  %37 = bitcast %IPST.1* %tmp.128 to i8**, !dbg !538
  store i8* %call.122, i8** %37, align 8, !dbg !538
  %field.617 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.128, i64 0, i32 1, !dbg !538
  store i64 1, i64* %field.617, align 8, !dbg !538
  %field.618 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.128, i64 0, i32 2, !dbg !538
  store i64 1, i64* %field.618, align 8, !dbg !538
  call void %.field.ld.69(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.25, i64 ptrtoint ([27 x i8]* @const.192 to i64), i64 26, %IPST.1* byval nonnull %tmp.128), !dbg !538
  %call.123 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !540
  %call.124 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !541
  store i8 0, i8* %call.124, align 1, !dbg !541
  %38 = ptrtoint i8* %call.124 to i64, !dbg !541
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.65, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %38), !dbg !542
  %cast.1689 = bitcast %Value.0* %tmpv.477 to i8*
  %cast.1690 = bitcast %Value.0* %sret.actual.65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1689, i8* nonnull align 8 %cast.1690, i64 24, i1 false)
  %runtime.writeBarrier.ld.15 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !542
  %icmp.165 = icmp eq i32 %runtime.writeBarrier.ld.15, 0, !dbg !542
  br i1 %icmp.165, label %then.141, label %else.141

else.140:                                         ; preds = %else.139
  %field.609 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.468.sroa.0.0.copyload, i64 0, i32 0, !dbg !538
  %.field.ld.68 = load %_type.0*, %_type.0** %field.609, align 8, !dbg !538
  br label %fallthrough.140

then.141:                                         ; preds = %fallthrough.140
  call void @llvm.dbg.value(metadata i8* %call.123, metadata !543, metadata !DIExpression()), !dbg !544
  %icmp.164 = icmp eq i8* %call.123, null, !dbg !542
  br i1 %icmp.164, label %then.142, label %else.142

fallthrough.141:                                  ; preds = %else.141, %else.142
  call void @llvm.dbg.value(metadata i8* %call.123, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %39 = bitcast { %Value.0*, %error.0 }* %sret.formal.10 to i8**, !dbg !545
  store i8* %call.123, i8** %39, align 8, !dbg !545
  %tmp.130.sroa.2.0.cast.1703.sroa_idx249 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !545
  %40 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.130.sroa.2.0.cast.1703.sroa_idx249 to i8*, !dbg !545
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false), !dbg !545
  ret void, !dbg !545

else.141:                                         ; preds = %fallthrough.140
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.123, i8* nonnull %cast.1689), !dbg !542
  br label %fallthrough.141

then.142:                                         ; preds = %then.141
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !542
  unreachable

else.142:                                         ; preds = %then.141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.123, i8* nonnull align 8 %cast.1689, i64 24, i1 false), !dbg !542
  br label %fallthrough.141

then.143:                                         ; preds = %else.138
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.441.sroa.0.0.copyload99, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.131.sroa.0.0.cast.1711.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !546
  store %Value.0* %tmpv.441.sroa.0.0.copyload99, %Value.0** %tmp.131.sroa.0.0.cast.1711.sroa_idx, align 8, !dbg !546
  %tmp.131.sroa.2.0.cast.1711.sroa_idx251 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !546
  %41 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.131.sroa.2.0.cast.1711.sroa_idx251 to i8*, !dbg !546
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 16, i1 false), !dbg !546
  ret void, !dbg !546

else.144:                                         ; preds = %else.138
  %tmpv.484.sroa.0.0.cast.1717.sroa_idx = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 0
  %tmpv.484.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.484.sroa.0.0.cast.1717.sroa_idx, align 8
  %tmpv.484.sroa.3.0.cast.1717.sroa_idx35 = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 1
  %42 = bitcast i8** %tmpv.484.sroa.3.0.cast.1717.sroa_idx35 to i64*
  %tmpv.484.sroa.3.0.copyload273 = load i64, i64* %42, align 8
  %icmp.169 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.484.sroa.0.0.copyload, null, !dbg !547
  br i1 %icmp.169, label %fallthrough.145, label %else.145

fallthrough.145:                                  ; preds = %else.144, %else.145
  %tmpv.486.0 = phi %_type.0* [ %.field.ld.70, %else.145 ], [ null, %else.144 ]
  %call.127 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.486.0), !dbg !547
  %43 = ptrtoint i8* %call.127 to i64, !dbg !547
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.66, i8* nest undef, %Context.0* %c, i64 %43, i64 %tmpv.484.sroa.3.0.copyload273), !dbg !548
  %tmpv.483.sroa.3.sroa.0.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.66, i64 0, i32 1, i32 0, !dbg !548
  %tmpv.483.sroa.3.sroa.0.0.copyload54 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.483.sroa.3.sroa.0.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx, align 8, !dbg !548
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.483.sroa.3.sroa.0.0.copyload54, metadata !549, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !550
  %icmp.170 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.483.sroa.3.sroa.0.0.copyload54, null, !dbg !551
  br i1 %icmp.170, label %else.146, label %then.146

else.145:                                         ; preds = %else.144
  %field.628 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.484.sroa.0.0.copyload, i64 0, i32 0, !dbg !547
  %.field.ld.70 = load %_type.0*, %_type.0** %field.628, align 8, !dbg !547
  br label %fallthrough.145

then.146:                                         ; preds = %fallthrough.145
  %tmpv.483.sroa.3.sroa.3.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx55 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.66, i64 0, i32 1, i32 1, !dbg !548
  %44 = bitcast i8** %tmpv.483.sroa.3.sroa.3.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx55 to i64*, !dbg !548
  %tmpv.483.sroa.3.sroa.3.0.copyload56275 = load i64, i64* %44, align 8, !dbg !548
  call void @llvm.dbg.value(metadata i8** %tmpv.483.sroa.3.sroa.3.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx55, metadata !549, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !550
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.483.sroa.3.sroa.0.0.copyload54, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8** %tmpv.483.sroa.3.sroa.3.0.tmpv.483.sroa.3.0.cast.1724.sroa_cast.sroa_idx55, metadata !463, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.133.sroa.0.0.cast.1736.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !552
  store %Value.0* null, %Value.0** %tmp.133.sroa.0.0.cast.1736.sroa_idx, align 8, !dbg !552
  %tmp.133.sroa.2.0.cast.1736.sroa_idx253 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !552
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.483.sroa.3.sroa.0.0.copyload54, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.133.sroa.2.0.cast.1736.sroa_idx253, align 8, !dbg !552
  %tmp.133.sroa.3.0.cast.1736.sroa_idx254 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 1, !dbg !552
  %45 = bitcast i8** %tmp.133.sroa.3.0.cast.1736.sroa_idx254 to i64*, !dbg !552
  store i64 %tmpv.483.sroa.3.sroa.3.0.copyload56275, i64* %45, align 8, !dbg !552
  ret void, !dbg !552

else.146:                                         ; preds = %fallthrough.145
  %46 = bitcast { %Value.0*, %error.0 }* %sret.actual.66 to i64*, !dbg !548
  %tmpv.483.sroa.0.0.copyload36274 = load i64, i64* %46, align 8, !dbg !548
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.66, metadata !553, metadata !DIExpression(DW_OP_deref)), !dbg !550
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.66, metadata !454, metadata !DIExpression(DW_OP_deref)), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %47 = bitcast { %Value.0*, %error.0 }* %sret.formal.10 to i64*, !dbg !554
  store i64 %tmpv.483.sroa.0.0.copyload36274, i64* %47, align 8, !dbg !554
  %tmp.134.sroa.2.0.cast.1745.sroa_idx255 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !554
  %48 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.134.sroa.2.0.cast.1745.sroa_idx255 to i8*, !dbg !554
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 0, i64 16, i1 false), !dbg !554
  ret void, !dbg !554

else.147:                                         ; preds = %case.4
  %call.132 = call i8 @reflect.Value.Bool(i8* nest undef, %Value.0* %tmpv.441.sroa.0.0.copyload99), !dbg !555
  %49 = and i8 %call.132, 1, !dbg !556
  %trunc.163 = icmp eq i8 %49, 0, !dbg !556
  br i1 %trunc.163, label %else.153, label %then.152

else.148:                                         ; preds = %case.4
  %tmpv.493.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.442.sroa.0.0.cast.1589.sroa_idx, align 8
  %tmpv.493.sroa.3.0.copyload272 = load i64, i64* %0, align 8
  %command_line_arguments.PkgLogger.field.ld.26 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !557
  %field.647 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.26, i64 0, i32 1, !dbg !557
  %.field.ld.72 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.647, align 8, !dbg !557
  %command_line_arguments.PkgLogger.field.ld.27 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !557
  %call.128 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !557
  %icmp.172 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.493.sroa.0.0.copyload, null, !dbg !557
  br i1 %icmp.172, label %fallthrough.149, label %else.149

fallthrough.149:                                  ; preds = %else.148, %else.149
  %tmpv.497.0 = phi %_type.0* [ %.field.ld.71, %else.149 ], [ null, %else.148 ]
  %tmp.135.sroa.0.0.cast.1754.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.496, i64 0, i64 0, i32 0, !dbg !557
  store %_type.0* %tmpv.497.0, %_type.0** %tmp.135.sroa.0.0.cast.1754.sroa_idx, align 8, !dbg !557
  %tmp.135.sroa.2.0.cast.1754.sroa_idx257 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.496, i64 0, i64 0, i32 1, !dbg !557
  %50 = bitcast i8** %tmp.135.sroa.2.0.cast.1754.sroa_idx257 to i64*, !dbg !557
  store i64 %tmpv.493.sroa.3.0.copyload272, i64* %50, align 8, !dbg !557
  %cast.1758 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.496 to i8*, !dbg !557
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.128, i8* nonnull %cast.1758), !dbg !557
  %51 = bitcast %IPST.1* %tmp.136 to i8**, !dbg !557
  store i8* %call.128, i8** %51, align 8, !dbg !557
  %field.650 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.136, i64 0, i32 1, !dbg !557
  store i64 1, i64* %field.650, align 8, !dbg !557
  %field.651 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.136, i64 0, i32 2, !dbg !557
  store i64 1, i64* %field.651, align 8, !dbg !557
  call void %.field.ld.72(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.27, i64 ptrtoint ([27 x i8]* @const.192 to i64), i64 26, %IPST.1* byval nonnull %tmp.136), !dbg !557
  %call.129 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !559
  %call.130 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !560
  store i8 0, i8* %call.130, align 1, !dbg !560
  %52 = ptrtoint i8* %call.130 to i64, !dbg !560
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.67, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %52), !dbg !561
  %cast.1764 = bitcast %Value.0* %tmpv.502 to i8*
  %cast.1765 = bitcast %Value.0* %sret.actual.67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1764, i8* nonnull align 8 %cast.1765, i64 24, i1 false)
  %runtime.writeBarrier.ld.16 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !561
  %icmp.174 = icmp eq i32 %runtime.writeBarrier.ld.16, 0, !dbg !561
  br i1 %icmp.174, label %then.150, label %else.150

else.149:                                         ; preds = %else.148
  %field.642 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.493.sroa.0.0.copyload, i64 0, i32 0, !dbg !557
  %.field.ld.71 = load %_type.0*, %_type.0** %field.642, align 8, !dbg !557
  br label %fallthrough.149

then.150:                                         ; preds = %fallthrough.149
  call void @llvm.dbg.value(metadata i8* %call.129, metadata !562, metadata !DIExpression()), !dbg !563
  %icmp.173 = icmp eq i8* %call.129, null, !dbg !561
  br i1 %icmp.173, label %then.151, label %else.151

fallthrough.150:                                  ; preds = %else.150, %else.151
  call void @llvm.dbg.value(metadata i8* %call.129, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %53 = bitcast { %Value.0*, %error.0 }* %sret.formal.10 to i8**, !dbg !564
  store i8* %call.129, i8** %53, align 8, !dbg !564
  %tmp.138.sroa.2.0.cast.1778.sroa_idx258 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !564
  %54 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.138.sroa.2.0.cast.1778.sroa_idx258 to i8*, !dbg !564
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 0, i64 16, i1 false), !dbg !564
  ret void, !dbg !564

else.150:                                         ; preds = %fallthrough.149
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.129, i8* nonnull %cast.1764), !dbg !561
  br label %fallthrough.150

then.151:                                         ; preds = %then.150
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !561
  unreachable

else.151:                                         ; preds = %then.150
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.129, i8* nonnull align 8 %cast.1764, i64 24, i1 false), !dbg !561
  br label %fallthrough.150

then.152:                                         ; preds = %else.147
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.441.sroa.0.0.copyload99, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.139.sroa.0.0.cast.1786.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !565
  store %Value.0* %tmpv.441.sroa.0.0.copyload99, %Value.0** %tmp.139.sroa.0.0.cast.1786.sroa_idx, align 8, !dbg !565
  %tmp.139.sroa.2.0.cast.1786.sroa_idx260 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !565
  %55 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.139.sroa.2.0.cast.1786.sroa_idx260 to i8*, !dbg !565
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 16, i1 false), !dbg !565
  ret void, !dbg !565

else.153:                                         ; preds = %else.147
  %tmpv.509.sroa.0.0.cast.1792.sroa_idx = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 0
  %tmpv.509.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.509.sroa.0.0.cast.1792.sroa_idx, align 8
  %tmpv.509.sroa.3.0.cast.1792.sroa_idx9 = getelementptr inbounds %BinaryExpr.0, %BinaryExpr.0* %e, i64 0, i32 3, i32 1
  %56 = bitcast i8** %tmpv.509.sroa.3.0.cast.1792.sroa_idx9 to i64*
  %tmpv.509.sroa.3.0.copyload269 = load i64, i64* %56, align 8
  %icmp.177 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.509.sroa.0.0.copyload, null, !dbg !566
  br i1 %icmp.177, label %fallthrough.154, label %else.154

fallthrough.154:                                  ; preds = %else.153, %else.154
  %tmpv.511.0 = phi %_type.0* [ %.field.ld.73, %else.154 ], [ null, %else.153 ]
  %call.133 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.511.0), !dbg !566
  %57 = ptrtoint i8* %call.133 to i64, !dbg !566
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.68, i8* nest undef, %Context.0* %c, i64 %57, i64 %tmpv.509.sroa.3.0.copyload269), !dbg !567
  %tmpv.508.sroa.3.sroa.0.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.68, i64 0, i32 1, i32 0, !dbg !567
  %tmpv.508.sroa.3.sroa.0.0.copyload28 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.508.sroa.3.sroa.0.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx, align 8, !dbg !567
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.508.sroa.3.sroa.0.0.copyload28, metadata !568, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !569
  %icmp.178 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.508.sroa.3.sroa.0.0.copyload28, null, !dbg !570
  br i1 %icmp.178, label %else.155, label %then.155

else.154:                                         ; preds = %else.153
  %field.661 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.509.sroa.0.0.copyload, i64 0, i32 0, !dbg !566
  %.field.ld.73 = load %_type.0*, %_type.0** %field.661, align 8, !dbg !566
  br label %fallthrough.154

then.155:                                         ; preds = %fallthrough.154
  %tmpv.508.sroa.3.sroa.3.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx29 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.68, i64 0, i32 1, i32 1, !dbg !567
  %58 = bitcast i8** %tmpv.508.sroa.3.sroa.3.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx29 to i64*, !dbg !567
  %tmpv.508.sroa.3.sroa.3.0.copyload30271 = load i64, i64* %58, align 8, !dbg !567
  call void @llvm.dbg.value(metadata i8** %tmpv.508.sroa.3.sroa.3.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx29, metadata !568, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !569
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.508.sroa.3.sroa.0.0.copyload28, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8** %tmpv.508.sroa.3.sroa.3.0.tmpv.508.sroa.3.0.cast.1799.sroa_cast.sroa_idx29, metadata !463, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %tmp.141.sroa.0.0.cast.1811.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 0, !dbg !571
  store %Value.0* null, %Value.0** %tmp.141.sroa.0.0.cast.1811.sroa_idx, align 8, !dbg !571
  %tmp.141.sroa.2.0.cast.1811.sroa_idx262 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !571
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.508.sroa.3.sroa.0.0.copyload28, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.141.sroa.2.0.cast.1811.sroa_idx262, align 8, !dbg !571
  %tmp.141.sroa.3.0.cast.1811.sroa_idx263 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 1, !dbg !571
  %59 = bitcast i8** %tmp.141.sroa.3.0.cast.1811.sroa_idx263 to i64*, !dbg !571
  store i64 %tmpv.508.sroa.3.sroa.3.0.copyload30271, i64* %59, align 8, !dbg !571
  ret void, !dbg !571

else.155:                                         ; preds = %fallthrough.154
  %60 = bitcast { %Value.0*, %error.0 }* %sret.actual.68 to i64*, !dbg !567
  %tmpv.508.sroa.0.0.copyload10270 = load i64, i64* %60, align 8, !dbg !567
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.68, metadata !572, metadata !DIExpression(DW_OP_deref)), !dbg !569
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.68, metadata !454, metadata !DIExpression(DW_OP_deref)), !dbg !455
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !464
  call void @llvm.dbg.value(metadata i8* null, metadata !463, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !464
  %61 = bitcast { %Value.0*, %error.0 }* %sret.formal.10 to i64*, !dbg !573
  store i64 %tmpv.508.sroa.0.0.copyload10270, i64* %61, align 8, !dbg !573
  %tmp.142.sroa.2.0.cast.1820.sroa_idx264 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.10, i64 0, i32 1, i32 0, !dbg !573
  %62 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.142.sroa.2.0.cast.1820.sroa_idx264 to i8*, !dbg !573
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 16, i1 false), !dbg !573
  ret void, !dbg !573

else.156:                                         ; preds = %else.133
  %call.134 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @go_token.Token..d), !dbg !574
  %cast.1823 = bitcast i8* %call.134 to i64*, !dbg !574
  store i64 %.field.ld.77, i64* %cast.1823, align 8, !dbg !574
  %63 = ptrtoint i8* %call.134 to i64, !dbg !574
  %call.135 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 ptrtoint (%_type.0* @go_token.Token..d to i64), i64 %63), !dbg !575
  %call.135.fca.0.extract = extractvalue { i64, i64 } %call.135, 0, !dbg !575
  %call.135.fca.1.extract = extractvalue { i64, i64 } %call.135, 1, !dbg !575
  %icmp.180 = icmp eq i64 %call.135.fca.0.extract, 0, !dbg !575
  br i1 %icmp.180, label %fallthrough.157, label %else.157

fallthrough.157:                                  ; preds = %else.156, %else.157
  %tmpv.523.0 = phi %_type.0* [ %.field.ld.75, %else.157 ], [ null, %else.156 ]
  %64 = inttoptr i64 %call.135.fca.1.extract to i8*, !dbg !576
  %tmp.144.sroa.0.0.cast.1831.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.522, i64 0, i64 0, i32 0, !dbg !576
  store %_type.0* %tmpv.523.0, %_type.0** %tmp.144.sroa.0.0.cast.1831.sroa_idx, align 8, !dbg !576
  %tmp.144.sroa.2.0.cast.1831.sroa_idx266 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.522, i64 0, i64 0, i32 1, !dbg !576
  store i8* %64, i8** %tmp.144.sroa.2.0.cast.1831.sroa_idx266, align 8, !dbg !576
  %field.681 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.145, i64 0, i32 0, !dbg !576
  %cast.1834 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.522, i64 0, i64 0, !dbg !576
  store { %_type.0*, i8* }* %cast.1834, { %_type.0*, i8* }** %field.681, align 8, !dbg !576
  %field.682 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.145, i64 0, i32 1, !dbg !576
  store i64 1, i64* %field.682, align 8, !dbg !576
  %field.683 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.145, i64 0, i32 2, !dbg !576
  store i64 1, i64* %field.683, align 8, !dbg !576
  %call.136 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([12 x i8]* @const.194 to i64), i64 11, %IPST.1* byval nonnull %tmp.145), !dbg !576
  %call.136.fca.0.extract = extractvalue { i64, i64 } %call.136, 0, !dbg !576
  %call.136.fca.1.extract = extractvalue { i64, i64 } %call.136, 1, !dbg !576
  %icmp.181 = icmp eq i64 %call.136.fca.0.extract, 0, !dbg !576
  br i1 %icmp.181, label %fallthrough.158, label %else.158

else.157:                                         ; preds = %else.156
  %65 = inttoptr i64 %call.135.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !575
  %field.677 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %65, i64 0, i32 0, !dbg !575
  %.field.ld.75 = load %_type.0*, %_type.0** %field.677, align 8, !dbg !575
  br label %fallthrough.157

fallthrough.158:                                  ; preds = %fallthrough.157, %else.158
  %tmpv.525.0 = phi i64 [ %.field.ld.76280, %else.158 ], [ 0, %fallthrough.157 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.525.0, i64 %call.136.fca.1.extract), !dbg !577
  unreachable

else.158:                                         ; preds = %fallthrough.157
  %66 = inttoptr i64 %call.136.fca.0.extract to i64*, !dbg !576
  %.field.ld.76280 = load i64, i64* %66, align 8, !dbg !576
  br label %fallthrough.158
}

define void @command_line_arguments.Context.evalBlockStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.17, i8* nest nocapture readnone %nest.26, %Context.0* %c, %BlockStmt.0* %e) #0 !dbg !578 {
entry:
  %tmp.199 = alloca %IPST.1, align 8
  %tmp.194 = alloca %IPST.1, align 8
  %tmpv.716 = alloca [1 x { %_type.0*, i8* }], align 8
  %sret.actual.93 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.734 = alloca [2 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !591, metadata !DIExpression()), !dbg !592
  call void @llvm.dbg.value(metadata %BlockStmt.0* %e, metadata !593, metadata !DIExpression()), !dbg !594
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !595, metadata !DIExpression()), !dbg !596
  %command_line_arguments.PkgLogger.field.ld.39 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !597
  %field.950 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.39, i64 0, i32 1, !dbg !597
  %.field.ld.109 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.950, align 8, !dbg !597
  %command_line_arguments.PkgLogger.field.ld.40 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !597
  %call.176 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !597
  %tmp.193.sroa.0.0.cast.2425.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.716, i64 0, i64 0, i32 0, !dbg !597
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i64 0, i32 0), %_type.0** %tmp.193.sroa.0.0.cast.2425.sroa_idx, align 8, !dbg !597
  %tmp.193.sroa.2.0.cast.2425.sroa_idx70 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.716, i64 0, i64 0, i32 1, !dbg !597
  %0 = bitcast i8** %tmp.193.sroa.2.0.cast.2425.sroa_idx70 to %BlockStmt.0**, !dbg !597
  store %BlockStmt.0* %e, %BlockStmt.0** %0, align 8, !dbg !597
  %cast.2429 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.716 to i8*, !dbg !597
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.176, i8* nonnull %cast.2429), !dbg !597
  %1 = bitcast %IPST.1* %tmp.194 to i8**, !dbg !597
  store i8* %call.176, i8** %1, align 8, !dbg !597
  %field.953 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.194, i64 0, i32 1, !dbg !597
  store i64 1, i64* %field.953, align 8, !dbg !597
  %field.954 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.194, i64 0, i32 2, !dbg !597
  store i64 1, i64* %field.954, align 8, !dbg !597
  call void %.field.ld.109(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.40, i64 ptrtoint ([20 x i8]* @const.219 to i64), i64 19, %IPST.1* byval nonnull %tmp.194), !dbg !597
  call void @llvm.dbg.value(metadata i64 0, metadata !598, metadata !DIExpression()), !dbg !600
  %icmp.254 = icmp eq %BlockStmt.0* %e, null, !dbg !601
  br i1 %icmp.254, label %then.227, label %else.227

then.227:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !601
  unreachable

else.227:                                         ; preds = %entry
  %tmpv.717.sroa.0.0.cast.2436.sroa_idx = getelementptr inbounds %BlockStmt.0, %BlockStmt.0* %e, i64 0, i32 1, i32 0
  %tmpv.717.sroa.0.0.copyload = load %Stmt.0*, %Stmt.0** %tmpv.717.sroa.0.0.cast.2436.sroa_idx, align 8
  %tmpv.717.sroa.2.0.cast.2436.sroa_idx28 = getelementptr inbounds %BlockStmt.0, %BlockStmt.0* %e, i64 0, i32 1, i32 1
  %tmpv.717.sroa.2.0.copyload = load i64, i64* %tmpv.717.sroa.2.0.cast.2436.sroa_idx28, align 8
  %icmp.26386 = icmp sgt i64 %tmpv.717.sroa.2.0.copyload, 0, !dbg !602
  br i1 %icmp.26386, label %else.228.lr.ph, label %else.236

else.228.lr.ph:                                   ; preds = %else.227
  %tmpv.726.sroa.0.0.cast.2455.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.93, i64 0, i32 0
  %tmpv.726.sroa.3.sroa.0.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.93, i64 0, i32 1, i32 0
  %tmp.197.sroa.0.0.cast.2476.sroa_idx = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.734, i64 0, i64 0, i32 0
  %tmp.197.sroa.2.0.cast.2476.sroa_idx73 = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.734, i64 0, i64 0, i32 1
  %tmp.198.sroa.0.0.cast.2478.sroa_idx = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.734, i64 0, i64 1, i32 0
  %tmp.198.sroa.2.0.cast.2478.sroa_idx74 = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.734, i64 0, i64 1, i32 1
  %2 = bitcast i8** %tmp.198.sroa.2.0.cast.2478.sroa_idx74 to %Value.0**
  %cast.2482 = bitcast [2 x { %_type.0*, i8* }]* %tmpv.734 to i8*
  %3 = bitcast %IPST.1* %tmp.199 to i8**
  %field.978 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.199, i64 0, i32 1
  %field.979 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.199, i64 0, i32 2
  %icmp.262 = icmp eq %Context.0* %c, null
  %field.983 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 2
  br label %else.228

label.0:                                          ; preds = %else.231
  %icmp.263 = icmp slt i64 %add.6, %tmpv.717.sroa.2.0.copyload, !dbg !602
  br i1 %icmp.263, label %else.228, label %else.236

else.228:                                         ; preds = %else.228.lr.ph, %label.0
  %tmpv.719.087 = phi i64 [ 0, %else.228.lr.ph ], [ %add.6, %label.0 ]
  %tmpv.720.sroa.0.0.cast.2442.sroa_idx = getelementptr inbounds %Stmt.0, %Stmt.0* %tmpv.717.sroa.0.0.copyload, i64 %tmpv.719.087, i32 0, !dbg !602
  %tmpv.720.sroa.0.0.copyload40 = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.720.sroa.0.0.cast.2442.sroa_idx, align 8, !dbg !602
  %tmpv.720.sroa.3.0.cast.2442.sroa_idx41 = getelementptr inbounds %Stmt.0, %Stmt.0* %tmpv.717.sroa.0.0.copyload, i64 %tmpv.719.087, i32 1, !dbg !602
  %4 = bitcast i8** %tmpv.720.sroa.3.0.cast.2442.sroa_idx41 to i64*, !dbg !602
  %tmpv.720.sroa.3.0.copyload4279 = load i64, i64* %4, align 8, !dbg !602
  call void @llvm.dbg.value(metadata i64 %tmpv.719.087, metadata !598, metadata !DIExpression()), !dbg !600
  call void @llvm.dbg.value(metadata { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.720.sroa.0.0.copyload40, metadata !603, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !600
  call void @llvm.dbg.value(metadata i8** %tmpv.720.sroa.3.0.cast.2442.sroa_idx41, metadata !603, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !600
  %icmp.257 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.720.sroa.0.0.copyload40, null, !dbg !604
  br i1 %icmp.257, label %fallthrough.229, label %else.229

fallthrough.229:                                  ; preds = %else.228, %else.229
  %tmpv.727.0 = phi %_type.0* [ %.field.ld.110, %else.229 ], [ null, %else.228 ]
  %call.177 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.727.0), !dbg !604
  %5 = ptrtoint i8* %call.177 to i64, !dbg !604
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.93, i8* nest undef, %Context.0* %c, i64 %5, i64 %tmpv.720.sroa.3.0.copyload4279), !dbg !606
  %tmpv.726.sroa.0.0.copyload1 = load %Value.0*, %Value.0** %tmpv.726.sroa.0.0.cast.2455.sroa_idx, align 8, !dbg !606
  %tmpv.726.sroa.3.sroa.0.0.copyload15 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.726.sroa.3.sroa.0.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx, align 8, !dbg !606
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.726.sroa.0.0.copyload1, metadata !607, metadata !DIExpression()), !dbg !608
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.726.sroa.3.sroa.0.0.copyload15, metadata !609, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !608
  %icmp.258 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.726.sroa.3.sroa.0.0.copyload15, null, !dbg !610
  br i1 %icmp.258, label %else.230, label %then.230

else.229:                                         ; preds = %else.228
  %field.961 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.720.sroa.0.0.copyload40, i64 0, i32 0, !dbg !604
  %.field.ld.110 = load %_type.0*, %_type.0** %field.961, align 8, !dbg !604
  br label %fallthrough.229

then.230:                                         ; preds = %fallthrough.229
  %tmpv.726.sroa.3.sroa.3.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx16 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.93, i64 0, i32 1, i32 1, !dbg !606
  %6 = bitcast i8** %tmpv.726.sroa.3.sroa.3.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx16 to i64*, !dbg !606
  %tmpv.726.sroa.3.sroa.3.0.copyload1780 = load i64, i64* %6, align 8, !dbg !606
  call void @llvm.dbg.value(metadata i8** %tmpv.726.sroa.3.sroa.3.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx16, metadata !609, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !608
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !595, metadata !DIExpression()), !dbg !596
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.726.sroa.3.sroa.0.0.copyload15, metadata !611, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !612
  call void @llvm.dbg.value(metadata i8** %tmpv.726.sroa.3.sroa.3.0.tmpv.726.sroa.3.0.cast.2455.sroa_cast.sroa_idx16, metadata !611, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !612
  %tmp.196.sroa.0.0.cast.2467.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 0, !dbg !613
  store %Value.0* null, %Value.0** %tmp.196.sroa.0.0.cast.2467.sroa_idx, align 8, !dbg !613
  %tmp.196.sroa.2.0.cast.2467.sroa_idx71 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 1, i32 0, !dbg !613
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.726.sroa.3.sroa.0.0.copyload15, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.196.sroa.2.0.cast.2467.sroa_idx71, align 8, !dbg !613
  %tmp.196.sroa.3.0.cast.2467.sroa_idx72 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 1, i32 1, !dbg !613
  %7 = bitcast i8** %tmp.196.sroa.3.0.cast.2467.sroa_idx72 to i64*, !dbg !613
  store i64 %tmpv.726.sroa.3.sroa.3.0.copyload1780, i64* %7, align 8, !dbg !613
  ret void, !dbg !613

else.230:                                         ; preds = %fallthrough.229
  %command_line_arguments.PkgLogger.field.ld.41 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !614
  %field.975 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.41, i64 0, i32 1, !dbg !614
  %.field.ld.111 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.975, align 8, !dbg !614
  %command_line_arguments.PkgLogger.field.ld.42 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !614
  %call.178 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0)), !dbg !614
  %call.179 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @int..d), !dbg !614
  %cast.2472 = bitcast i8* %call.179 to i64*, !dbg !614
  store i64 %tmpv.719.087, i64* %cast.2472, align 8, !dbg !614
  store %_type.0* @int..d, %_type.0** %tmp.197.sroa.0.0.cast.2476.sroa_idx, align 8, !dbg !614
  store i8* %call.179, i8** %tmp.197.sroa.2.0.cast.2476.sroa_idx73, align 8, !dbg !614
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.198.sroa.0.0.cast.2478.sroa_idx, align 8, !dbg !614
  store %Value.0* %tmpv.726.sroa.0.0.copyload1, %Value.0** %2, align 8, !dbg !614
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0), i8* %call.178, i8* nonnull %cast.2482), !dbg !614
  store i8* %call.178, i8** %3, align 8, !dbg !614
  store i64 2, i64* %field.978, align 8, !dbg !614
  store i64 2, i64* %field.979, align 8, !dbg !614
  call void %.field.ld.111(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.42, i64 ptrtoint ([16 x i8]* @const.222 to i64), i64 15, %IPST.1* byval nonnull %tmp.199), !dbg !614
  br i1 %icmp.262, label %then.231, label %else.231

then.231:                                         ; preds = %else.230
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !615
  unreachable

else.231:                                         ; preds = %else.230
  %.field.ld.112 = load i8, i8* %field.983, align 1, !dbg !615
  %8 = and i8 %.field.ld.112, 1, !dbg !616
  %trunc.247 = icmp eq i8 %8, 0, !dbg !616
  %add.6 = add nuw nsw i64 %tmpv.719.087, 1, !dbg !602
  br i1 %trunc.247, label %label.0, label %else.233

else.233:                                         ; preds = %else.231
  %field.980 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 3, !dbg !617
  %runtime.writeBarrier.ld.21 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !618
  %icmp.261 = icmp eq i32 %runtime.writeBarrier.ld.21, 0, !dbg !618
  br i1 %icmp.261, label %else.235, label %else.234

fallthrough.234:                                  ; preds = %else.234, %else.235
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.726.sroa.0.0.copyload1, metadata !595, metadata !DIExpression()), !dbg !596
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !611, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !612
  call void @llvm.dbg.value(metadata i8* null, metadata !611, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !612
  %tmp.200.sroa.0.0.cast.2495.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 0, !dbg !619
  store %Value.0* %tmpv.726.sroa.0.0.copyload1, %Value.0** %tmp.200.sroa.0.0.cast.2495.sroa_idx, align 8, !dbg !619
  %tmp.200.sroa.2.0.cast.2495.sroa_idx75 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 1, i32 0, !dbg !619
  %9 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.200.sroa.2.0.cast.2495.sroa_idx75 to i8*, !dbg !619
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false), !dbg !619
  ret void, !dbg !619

else.234:                                         ; preds = %else.233
  %cast.2475.le = bitcast %Value.0* %tmpv.726.sroa.0.0.copyload1 to i8*, !dbg !614
  %cast.2487 = bitcast %Value.0** %field.980 to i8*, !dbg !618
  call void @runtime.writebarrierptr(i8* nest undef, i8* nonnull %cast.2487, i8* %cast.2475.le), !dbg !618
  br label %fallthrough.234

else.235:                                         ; preds = %else.233
  store %Value.0* %tmpv.726.sroa.0.0.copyload1, %Value.0** %field.980, align 8, !dbg !618
  br label %fallthrough.234

else.236:                                         ; preds = %label.0, %else.227
  call void @llvm.dbg.value(metadata %Value.0* @command_line_arguments.Nil, metadata !595, metadata !DIExpression()), !dbg !596
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !611, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !612
  call void @llvm.dbg.value(metadata i8* null, metadata !611, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !612
  %tmp.201.sroa.0.0.cast.2504.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 0, !dbg !620
  store %Value.0* @command_line_arguments.Nil, %Value.0** %tmp.201.sroa.0.0.cast.2504.sroa_idx, align 8, !dbg !620
  %tmp.201.sroa.2.0.cast.2504.sroa_idx77 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.17, i64 0, i32 1, i32 0, !dbg !620
  %10 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.201.sroa.2.0.cast.2504.sroa_idx77 to i8*, !dbg !620
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false), !dbg !620
  ret void, !dbg !620
}

define void @command_line_arguments.Context.evalCallExpr({ %Value.0*, %error.0 }* nocapture sret %sret.formal.7, i8* nest nocapture readnone %nest.13, %Context.0* %c, %CallExpr.0* readonly %e) #0 !dbg !621 {
entry:
  %tmpv.264 = alloca [0 x %Value.0], align 8
  %tmp.74 = alloca %IPST.1, align 8
  %tmp.69 = alloca %IPST.0, align 8
  %tmp.64 = alloca %IPST.1, align 8
  %args = alloca %IPST.6, align 8
  %sret.actual.44 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.263 = alloca [1 x { %_type.0*, i8* }], align 8
  %sret.actual.45 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.286 = alloca %IPST.6, align 8
  %tmpv.288 = alloca %Value.0, align 8
  %sret.actual.46 = alloca %IPST.7, align 8
  %tmpv.299 = alloca [1 x %Value.0*], align 8
  %sret.actual.48 = alloca %IPST.6, align 8
  %tmpv.307 = alloca %Value.0, align 8
  %sret.actual.49 = alloca %Value.0, align 8
  %tmpv.312 = alloca %Value.0, align 8
  %tmpv.316 = alloca %Value.0, align 8
  %tmpv.317 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !632, metadata !DIExpression()), !dbg !633
  call void @llvm.dbg.value(metadata %CallExpr.0* %e, metadata !634, metadata !DIExpression()), !dbg !635
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !636, metadata !DIExpression()), !dbg !637
  %0 = bitcast %IPST.6* %args to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0)
  %icmp.83 = icmp eq %CallExpr.0* %e, null, !dbg !638
  br i1 %icmp.83, label %then.72, label %else.72

then.72:                                          ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !638
  unreachable

else.72:                                          ; preds = %entry
  %tmpv.255.sroa.0.0.cast.1018.sroa_idx = getelementptr inbounds %CallExpr.0, %CallExpr.0* %e, i64 0, i32 0, i32 0
  %tmpv.255.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.255.sroa.0.0.cast.1018.sroa_idx, align 8
  %tmpv.255.sroa.3.0.cast.1018.sroa_idx81 = getelementptr inbounds %CallExpr.0, %CallExpr.0* %e, i64 0, i32 0, i32 1
  %1 = bitcast i8** %tmpv.255.sroa.3.0.cast.1018.sroa_idx81 to i64*
  %tmpv.255.sroa.3.0.copyload188 = load i64, i64* %1, align 8
  %icmp.84 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.255.sroa.0.0.copyload, null, !dbg !638
  br i1 %icmp.84, label %fallthrough.73, label %else.73

fallthrough.73:                                   ; preds = %else.72, %else.73
  %tmpv.257.0 = phi %_type.0* [ %.field.ld.33, %else.73 ], [ null, %else.72 ]
  %call.75 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.257.0), !dbg !638
  %2 = ptrtoint i8* %call.75 to i64, !dbg !638
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.44, i8* nest undef, %Context.0* %c, i64 %2, i64 %tmpv.255.sroa.3.0.copyload188), !dbg !640
  %tmpv.254.sroa.0.0.cast.1025.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.44, i64 0, i32 0, !dbg !640
  %tmpv.254.sroa.0.0.copyload82 = load %Value.0*, %Value.0** %tmpv.254.sroa.0.0.cast.1025.sroa_idx, align 8, !dbg !640
  %tmpv.254.sroa.3.sroa.0.0.tmpv.254.sroa.3.0.cast.1025.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.44, i64 0, i32 1, i32 0, !dbg !640
  %tmpv.254.sroa.3.sroa.0.0.copyload117 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.254.sroa.3.sroa.0.0.tmpv.254.sroa.3.0.cast.1025.sroa_cast.sroa_idx, align 8, !dbg !640
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.254.sroa.0.0.copyload82, metadata !641, metadata !DIExpression()), !dbg !642
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.254.sroa.3.sroa.0.0.copyload117, metadata !643, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !642
  %icmp.85 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.254.sroa.3.sroa.0.0.copyload117, null, !dbg !644
  br i1 %icmp.85, label %else.74, label %then.74

else.73:                                          ; preds = %else.72
  %field.297 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.255.sroa.0.0.copyload, i64 0, i32 0, !dbg !638
  %.field.ld.33 = load %_type.0*, %_type.0** %field.297, align 8, !dbg !638
  br label %fallthrough.73

then.74:                                          ; preds = %fallthrough.73
  %tmpv.254.sroa.3.sroa.3.0.tmpv.254.sroa.3.0.cast.1025.sroa_cast.sroa_idx118 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.44, i64 0, i32 1, i32 1, !dbg !640
  %3 = bitcast i8** %tmpv.254.sroa.3.sroa.3.0.tmpv.254.sroa.3.0.cast.1025.sroa_cast.sroa_idx118 to i64*, !dbg !640
  %tmpv.254.sroa.3.sroa.3.0.copyload119189 = load i64, i64* %3, align 8, !dbg !640
  call void @llvm.dbg.value(metadata i8** %tmpv.254.sroa.3.sroa.3.0.tmpv.254.sroa.3.0.cast.1025.sroa_cast.sroa_idx118, metadata !643, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !642
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !636, metadata !DIExpression()), !dbg !637
  %4 = ptrtoint { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.254.sroa.3.sroa.0.0.copyload117 to i64, !dbg !645
  call void @llvm.dbg.value(metadata i64 %4, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !647
  call void @llvm.dbg.value(metadata i64 %tmpv.254.sroa.3.sroa.3.0.copyload119189, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !647
  %tmp.62.sroa.0.0.cast.1037.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 0, !dbg !645
  store %Value.0* null, %Value.0** %tmp.62.sroa.0.0.cast.1037.sroa_idx, align 8, !dbg !645
  %tmp.62.sroa.2.0.cast.1037.sroa_idx161 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, !dbg !645
  %tmp.62.sroa.2.0.cast.1037.sroa_cast = bitcast %error.0* %tmp.62.sroa.2.0.cast.1037.sroa_idx161 to i64*, !dbg !645
  store i64 %4, i64* %tmp.62.sroa.2.0.cast.1037.sroa_cast, align 8, !dbg !645
  %tmp.62.sroa.3.0.cast.1037.sroa_idx162 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, i32 1, !dbg !645
  %tmp.62.sroa.3.0.cast.1037.sroa_cast = bitcast i8** %tmp.62.sroa.3.0.cast.1037.sroa_idx162 to i64*, !dbg !645
  store i64 %tmpv.254.sroa.3.sroa.3.0.copyload119189, i64* %tmp.62.sroa.3.0.cast.1037.sroa_cast, align 8, !dbg !645
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !645
  ret void, !dbg !645

else.74:                                          ; preds = %fallthrough.73
  %command_line_arguments.PkgLogger.field.ld.0 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !648
  %field.309 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.0, i64 0, i32 1, !dbg !648
  %.field.ld.34 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.309, align 8, !dbg !648
  %command_line_arguments.PkgLogger.field.ld.1 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !648
  %call.76 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !648
  %tmp.63.sroa.0.0.cast.1047.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.263, i64 0, i64 0, i32 0, !dbg !648
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.63.sroa.0.0.cast.1047.sroa_idx, align 8, !dbg !648
  %tmp.63.sroa.2.0.cast.1047.sroa_idx163 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.263, i64 0, i64 0, i32 1, !dbg !648
  %5 = bitcast i8** %tmp.63.sroa.2.0.cast.1047.sroa_idx163 to %Value.0**, !dbg !648
  store %Value.0* %tmpv.254.sroa.0.0.copyload82, %Value.0** %5, align 8, !dbg !648
  %cast.1051 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.263 to i8*, !dbg !648
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.76, i8* nonnull %cast.1051), !dbg !648
  %6 = bitcast %IPST.1* %tmp.64 to i8**, !dbg !648
  store i8* %call.76, i8** %6, align 8, !dbg !648
  %field.312 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.64, i64 0, i32 1, !dbg !648
  store i64 1, i64* %field.312, align 8, !dbg !648
  %field.313 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.64, i64 0, i32 2, !dbg !648
  store i64 1, i64* %field.313, align 8, !dbg !648
  call void %.field.ld.34(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.1, i64 ptrtoint ([18 x i8]* @const.151 to i64), i64 17, %IPST.1* byval nonnull %tmp.64), !dbg !648
  %cast.1055 = getelementptr inbounds [0 x %Value.0], [0 x %Value.0]* %tmpv.264, i64 0, i64 0, !dbg !649
  %tmpv.271.sroa.0.0.cast.1058.sroa_idx = getelementptr inbounds %IPST.6, %IPST.6* %args, i64 0, i32 0
  store %Value.0* %cast.1055, %Value.0** %tmpv.271.sroa.0.0.cast.1058.sroa_idx, align 8
  %tmpv.271.sroa.2.0.cast.1058.sroa_idx166 = getelementptr inbounds %IPST.6, %IPST.6* %args, i64 0, i32 1
  %tmpv.272.sroa.0.0.cast.1064.sroa_idx = getelementptr inbounds %CallExpr.0, %CallExpr.0* %e, i64 0, i32 2, i32 0
  %7 = bitcast i64* %tmpv.271.sroa.2.0.cast.1058.sroa_idx166 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false)
  %tmpv.272.sroa.0.0.copyload = load %Expr.0*, %Expr.0** %tmpv.272.sroa.0.0.cast.1064.sroa_idx, align 8
  %tmpv.272.sroa.2.0.cast.1064.sroa_idx53 = getelementptr inbounds %CallExpr.0, %CallExpr.0* %e, i64 0, i32 2, i32 1
  %tmpv.272.sroa.2.0.copyload = load i64, i64* %tmpv.272.sroa.2.0.cast.1064.sroa_idx53, align 8
  %icmp.113198 = icmp sgt i64 %tmpv.272.sroa.2.0.copyload, 0, !dbg !650
  br i1 %icmp.113198, label %else.79.lr.ph, label %else.89

else.79.lr.ph:                                    ; preds = %else.74
  %tmpv.280.sroa.0.0.cast.1083.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.45, i64 0, i32 0
  %tmpv.280.sroa.3.sroa.0.0.tmpv.280.sroa.3.0.cast.1083.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.45, i64 0, i32 1, i32 0
  %cast.1098 = bitcast %IPST.6* %tmpv.286 to i8*
  %field.332 = getelementptr inbounds %IPST.6, %IPST.6* %tmpv.286, i64 0, i32 1
  %cast.1101 = bitcast %Value.0* %tmpv.288 to i8*
  %field.333 = getelementptr inbounds %IPST.6, %IPST.6* %tmpv.286, i64 0, i32 2
  %cast.1104 = bitcast %IPST.6* %tmpv.286 to %IPST.7*
  %tmpv.294.sroa.0.0.cast.1109.sroa_idx = bitcast %IPST.7* %sret.actual.46 to %Value.0**
  %8 = getelementptr inbounds %IPST.7, %IPST.7* %sret.actual.46, i64 0, i32 1
  %9 = getelementptr inbounds %IPST.7, %IPST.7* %sret.actual.46, i64 0, i32 2
  %tmpv.294.sroa.0.0.cast.1112.sroa_idx = getelementptr inbounds %IPST.6, %IPST.6* %tmpv.286, i64 0, i32 0
  br label %else.79

else.79:                                          ; preds = %else.79.lr.ph, %fallthrough.87
  %tmpv.274.0199 = phi i64 [ 0, %else.79.lr.ph ], [ %add.3, %fallthrough.87 ]
  %tmpv.275.sroa.0.0.cast.1070.sroa_idx = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.272.sroa.0.0.copyload, i64 %tmpv.274.0199, i32 0, !dbg !650
  %tmpv.275.sroa.0.0.copyload63 = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.275.sroa.0.0.cast.1070.sroa_idx, align 8, !dbg !650
  %tmpv.275.sroa.3.0.cast.1070.sroa_idx64 = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.272.sroa.0.0.copyload, i64 %tmpv.274.0199, i32 1, !dbg !650
  %10 = bitcast i8** %tmpv.275.sroa.3.0.cast.1070.sroa_idx64 to i64*, !dbg !650
  %tmpv.275.sroa.3.0.copyload65190 = load i64, i64* %10, align 8, !dbg !650
  call void @llvm.dbg.value(metadata { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.275.sroa.0.0.copyload63, metadata !652, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !653
  call void @llvm.dbg.value(metadata i8** %tmpv.275.sroa.3.0.cast.1070.sroa_idx64, metadata !652, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !653
  %icmp.99 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.275.sroa.0.0.copyload63, null, !dbg !654
  br i1 %icmp.99, label %fallthrough.80, label %else.80

fallthrough.80:                                   ; preds = %else.79, %else.80
  %tmpv.281.0 = phi %_type.0* [ %.field.ld.35, %else.80 ], [ null, %else.79 ]
  %call.77 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.281.0), !dbg !654
  %11 = ptrtoint i8* %call.77 to i64, !dbg !654
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.45, i8* nest undef, %Context.0* %c, i64 %11, i64 %tmpv.275.sroa.3.0.copyload65190), !dbg !656
  %tmpv.280.sroa.0.0.copyload29 = load %Value.0*, %Value.0** %tmpv.280.sroa.0.0.cast.1083.sroa_idx, align 8, !dbg !656
  %tmpv.280.sroa.3.sroa.0.0.copyload41 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.280.sroa.3.sroa.0.0.tmpv.280.sroa.3.0.cast.1083.sroa_cast.sroa_idx, align 8, !dbg !656
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.280.sroa.0.0.copyload29, metadata !657, metadata !DIExpression()), !dbg !658
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.280.sroa.3.sroa.0.0.copyload41, metadata !659, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !658
  %icmp.100 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.280.sroa.3.sroa.0.0.copyload41, null, !dbg !660
  br i1 %icmp.100, label %else.81, label %then.81

else.80:                                          ; preds = %else.79
  %field.323 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.275.sroa.0.0.copyload63, i64 0, i32 0, !dbg !654
  %.field.ld.35 = load %_type.0*, %_type.0** %field.323, align 8, !dbg !654
  br label %fallthrough.80

then.81:                                          ; preds = %fallthrough.80
  %tmpv.280.sroa.3.sroa.3.0.tmpv.280.sroa.3.0.cast.1083.sroa_cast.sroa_idx42 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.45, i64 0, i32 1, i32 1, !dbg !656
  %12 = bitcast i8** %tmpv.280.sroa.3.sroa.3.0.tmpv.280.sroa.3.0.cast.1083.sroa_cast.sroa_idx42 to i64*, !dbg !656
  %tmpv.280.sroa.3.sroa.3.0.copyload43191 = load i64, i64* %12, align 8, !dbg !656
  call void @llvm.dbg.value(metadata i8** %tmpv.280.sroa.3.sroa.3.0.tmpv.280.sroa.3.0.cast.1083.sroa_cast.sroa_idx42, metadata !659, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !658
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !636, metadata !DIExpression()), !dbg !637
  %13 = ptrtoint { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.280.sroa.3.sroa.0.0.copyload41 to i64, !dbg !661
  call void @llvm.dbg.value(metadata i64 %13, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !647
  call void @llvm.dbg.value(metadata i64 %tmpv.280.sroa.3.sroa.3.0.copyload43191, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !647
  %tmp.67.sroa.0.0.cast.1095.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 0, !dbg !661
  store %Value.0* null, %Value.0** %tmp.67.sroa.0.0.cast.1095.sroa_idx, align 8, !dbg !661
  %tmp.67.sroa.2.0.cast.1095.sroa_idx168 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, !dbg !661
  %tmp.67.sroa.2.0.cast.1095.sroa_cast = bitcast %error.0* %tmp.67.sroa.2.0.cast.1095.sroa_idx168 to i64*, !dbg !661
  store i64 %13, i64* %tmp.67.sroa.2.0.cast.1095.sroa_cast, align 8, !dbg !661
  %tmp.67.sroa.3.0.cast.1095.sroa_idx169 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, i32 1, !dbg !661
  %tmp.67.sroa.3.0.cast.1095.sroa_cast = bitcast i8** %tmp.67.sroa.3.0.cast.1095.sroa_idx169 to i64*, !dbg !661
  store i64 %tmpv.280.sroa.3.sroa.3.0.copyload43191, i64* %tmp.67.sroa.3.0.cast.1095.sroa_cast, align 8, !dbg !661
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !661
  ret void, !dbg !661

else.81:                                          ; preds = %fallthrough.80
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1098, i8* nonnull align 8 %0, i64 24, i1 false)
  %tmpv.286.field.ld.0 = load i64, i64* %field.332, align 8, !dbg !662
  %icmp.101 = icmp eq %Value.0* %tmpv.280.sroa.0.0.copyload29, null, !dbg !663
  br i1 %icmp.101, label %then.82, label %else.82

then.82:                                          ; preds = %else.81
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !663
  unreachable

else.82:                                          ; preds = %else.81
  %cast.1102 = bitcast %Value.0* %tmpv.280.sroa.0.0.copyload29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1101, i8* align 8 %cast.1102, i64 24, i1 false)
  %add.1 = add i64 %tmpv.286.field.ld.0, 1, !dbg !662
  %tmpv.286.field.ld.1 = load i64, i64* %field.333, align 8, !dbg !662
  %icmp.102 = icmp ugt i64 %add.1, %tmpv.286.field.ld.1, !dbg !662
  br i1 %icmp.102, label %then.83, label %else.83

then.83:                                          ; preds = %else.82
  call void @runtime.growslice(%IPST.7* nonnull sret %sret.actual.46, i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), %IPST.7* byval nonnull %cast.1104, i64 %add.1), !dbg !662
  %tmpv.294.sroa.0.0.copyload = load %Value.0*, %Value.0** %tmpv.294.sroa.0.0.cast.1109.sroa_idx, align 8
  %tmpv.294.sroa.3.0.copyload = load i64, i64* %8, align 8
  %tmpv.294.sroa.4.0.copyload = load i64, i64* %9, align 8
  br label %fallthrough.83

fallthrough.83:                                   ; preds = %else.84, %then.83
  %tmpv.294.sroa.0.0 = phi %Value.0* [ %tmpv.294.sroa.0.0.copyload, %then.83 ], [ %tmpv.286.field.ld.3, %else.84 ]
  %tmpv.294.sroa.3.0 = phi i64 [ %tmpv.294.sroa.3.0.copyload, %then.83 ], [ %add.1, %else.84 ]
  %tmpv.294.sroa.4.0 = phi i64 [ %tmpv.294.sroa.4.0.copyload, %then.83 ], [ %tmpv.286.field.ld.1, %else.84 ]
  store %Value.0* %tmpv.294.sroa.0.0, %Value.0** %tmpv.294.sroa.0.0.cast.1112.sroa_idx, align 8, !dbg !662
  store i64 %tmpv.294.sroa.3.0, i64* %field.332, align 8, !dbg !662
  store i64 %tmpv.294.sroa.4.0, i64* %field.333, align 8, !dbg !662
  %icmp.109 = icmp sge i64 %tmpv.286.field.ld.0, %tmpv.294.sroa.3.0, !dbg !662
  %14 = icmp slt i64 %tmpv.286.field.ld.0, 0, !dbg !662
  %ior.42 = or i1 %14, %icmp.109, !dbg !662
  br i1 %ior.42, label %then.86, label %else.86

else.83:                                          ; preds = %else.82
  %icmp.104 = icmp sgt i64 %add.1, %tmpv.286.field.ld.1, !dbg !662
  %add.1.lobit193 = or i64 %tmpv.286.field.ld.1, %add.1, !dbg !662
  %15 = icmp slt i64 %add.1.lobit193, 0, !dbg !662
  %16 = or i1 %icmp.104, %15, !dbg !662
  br i1 %16, label %then.84, label %else.84

then.84:                                          ; preds = %else.83
  call void @__go_runtime_error(i8* nest undef, i32 3), !dbg !662
  unreachable

else.84:                                          ; preds = %else.83
  %tmpv.286.field.ld.3 = load %Value.0*, %Value.0** %tmpv.294.sroa.0.0.cast.1112.sroa_idx, align 8, !dbg !662
  br label %fallthrough.83

then.86:                                          ; preds = %fallthrough.83
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !662
  unreachable

else.86:                                          ; preds = %fallthrough.83
  %ptroff.4 = getelementptr %Value.0, %Value.0* %tmpv.294.sroa.0.0, i64 %tmpv.286.field.ld.0, !dbg !662
  %runtime.writeBarrier.ld.11 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !662
  %icmp.112 = icmp eq i32 %runtime.writeBarrier.ld.11, 0, !dbg !662
  br i1 %icmp.112, label %then.87, label %else.87

then.87:                                          ; preds = %else.86
  %icmp.111 = icmp eq %Value.0* %ptroff.4, null, !dbg !662
  br i1 %icmp.111, label %then.88, label %else.88

fallthrough.87:                                   ; preds = %else.87, %else.88
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %cast.1098, i64 24, i1 false), !dbg !664
  %add.3 = add nuw nsw i64 %tmpv.274.0199, 1, !dbg !650
  %icmp.113 = icmp slt i64 %add.3, %tmpv.272.sroa.2.0.copyload, !dbg !650
  br i1 %icmp.113, label %else.79, label %else.89

else.87:                                          ; preds = %else.86
  %cast.1118 = bitcast %Value.0* %ptroff.4 to i8*, !dbg !662
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %cast.1118, i8* nonnull %cast.1101), !dbg !662
  br label %fallthrough.87

then.88:                                          ; preds = %then.87
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !662
  unreachable

else.88:                                          ; preds = %then.87
  %cast.1115 = bitcast %Value.0* %ptroff.4 to i8*, !dbg !662
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1115, i8* nonnull align 8 %cast.1101, i64 24, i1 false), !dbg !662
  br label %fallthrough.87

else.89:                                          ; preds = %fallthrough.87, %else.74
  %index.18 = getelementptr inbounds [1 x %Value.0*], [1 x %Value.0*]* %tmpv.299, i64 0, i64 0, !dbg !665
  store %Value.0* %tmpv.254.sroa.0.0.copyload82, %Value.0** %index.18, align 8, !dbg !665
  %field.344 = getelementptr inbounds %IPST.0, %IPST.0* %tmp.69, i64 0, i32 0, !dbg !665
  store %Value.0** %index.18, %Value.0*** %field.344, align 8, !dbg !665
  %field.345 = getelementptr inbounds %IPST.0, %IPST.0* %tmp.69, i64 0, i32 1, !dbg !665
  store i64 1, i64* %field.345, align 8, !dbg !665
  %field.346 = getelementptr inbounds %IPST.0, %IPST.0* %tmp.69, i64 0, i32 2, !dbg !665
  store i64 1, i64* %field.346, align 8, !dbg !665
  %call.78 = call fastcc { i64, i64 } @command_line_arguments.checkValues(%IPST.0* byval nonnull %tmp.69), !dbg !665
  %call.78.fca.0.extract = extractvalue { i64, i64 } %call.78, 0, !dbg !665
  call void @llvm.dbg.value(metadata i64 %call.78.fca.0.extract, metadata !667, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !668
  %icmp.114 = icmp eq i64 %call.78.fca.0.extract, 0, !dbg !669
  br i1 %icmp.114, label %else.90, label %then.90

then.90:                                          ; preds = %else.89
  %call.78.fca.1.extract = extractvalue { i64, i64 } %call.78, 1, !dbg !665
  call void @llvm.dbg.value(metadata i64 %call.78.fca.1.extract, metadata !667, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !668
  %command_line_arguments.PkgLogger.field.ld.2 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !670
  %field.348 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.2, i64 0, i32 1, !dbg !670
  %.field.ld.39 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.348, align 8, !dbg !670
  %command_line_arguments.PkgLogger.field.ld.3 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !670
  call void %.field.ld.39(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.3, i64 ptrtoint ([36 x i8]* @const.155 to i64), i64 35, %IPST.1* byval nonnull @const.145), !dbg !670
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !636, metadata !DIExpression()), !dbg !637
  call void @llvm.dbg.value(metadata i64 %call.78.fca.0.extract, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !647
  call void @llvm.dbg.value(metadata i64 %call.78.fca.1.extract, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !647
  %tmp.70.sroa.0.0.cast.1135.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 0, !dbg !671
  store %Value.0* null, %Value.0** %tmp.70.sroa.0.0.cast.1135.sroa_idx, align 8, !dbg !671
  %tmp.70.sroa.2.0.cast.1135.sroa_idx181 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, !dbg !671
  %tmp.70.sroa.2.0.cast.1135.sroa_cast = bitcast %error.0* %tmp.70.sroa.2.0.cast.1135.sroa_idx181 to i64*, !dbg !671
  store i64 %call.78.fca.0.extract, i64* %tmp.70.sroa.2.0.cast.1135.sroa_cast, align 8, !dbg !671
  %tmp.70.sroa.3.0.cast.1135.sroa_idx182 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, i32 1, !dbg !671
  %tmp.70.sroa.3.0.cast.1135.sroa_cast = bitcast i8** %tmp.70.sroa.3.0.cast.1135.sroa_idx182 to i64*, !dbg !671
  store i64 %call.78.fca.1.extract, i64* %tmp.70.sroa.3.0.cast.1135.sroa_cast, align 8, !dbg !671
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !671
  ret void, !dbg !671

else.90:                                          ; preds = %else.89
  call void @llvm.dbg.value(metadata %IPST.6* %args, metadata !672, metadata !DIExpression(DW_OP_deref)), !dbg !676
  call void @reflect.Value.Call(%IPST.6* nonnull sret %sret.actual.48, i8* nest undef, %Value.0* %tmpv.254.sroa.0.0.copyload82, %IPST.6* byval nonnull %args), !dbg !677
  %value.sroa.0.0.cast.1139.sroa_idx = getelementptr inbounds %IPST.6, %IPST.6* %sret.actual.48, i64 0, i32 0
  %value.sroa.0.0.copyload = load %Value.0*, %Value.0** %value.sroa.0.0.cast.1139.sroa_idx, align 8
  call void @llvm.dbg.value(metadata %Value.0* %value.sroa.0.0.copyload, metadata !678, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !679
  %value.sroa.9.0.cast.1139.sroa_idx89 = getelementptr inbounds %IPST.6, %IPST.6* %sret.actual.48, i64 0, i32 1
  %value.sroa.9.0.copyload = load i64, i64* %value.sroa.9.0.cast.1139.sroa_idx89, align 8
  call void @llvm.dbg.value(metadata i64 %value.sroa.9.0.copyload, metadata !678, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !679
  call void @llvm.dbg.value(metadata %IPST.6* %sret.actual.48, metadata !678, metadata !DIExpression(DW_OP_plus_uconst, 16, DW_OP_deref, DW_OP_stack_value, DW_OP_LLVM_fragment, 128, 64)), !dbg !679
  %icmp.117 = icmp eq i64 %value.sroa.9.0.copyload, 0, !dbg !680
  br i1 %icmp.117, label %then.91, label %else.91

then.91:                                          ; preds = %else.90
  %call.79 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !681
  %call.80 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @int..d), !dbg !683
  %cast.1142 = bitcast i8* %call.80 to i64*, !dbg !683
  store i64 0, i64* %cast.1142, align 8, !dbg !683
  %17 = ptrtoint i8* %call.80 to i64, !dbg !683
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.49, i8* nest undef, i64 ptrtoint (%_type.0* @int..d to i64), i64 %17), !dbg !684
  %cast.1145 = bitcast %Value.0* %tmpv.307 to i8*
  %cast.1146 = bitcast %Value.0* %sret.actual.49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1145, i8* nonnull align 8 %cast.1146, i64 24, i1 false)
  %runtime.writeBarrier.ld.12 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !684
  %icmp.116 = icmp eq i32 %runtime.writeBarrier.ld.12, 0, !dbg !684
  br i1 %icmp.116, label %then.92, label %else.92

else.91:                                          ; preds = %else.90
  %icmp.118 = icmp slt i64 %value.sroa.9.0.copyload, 1, !dbg !685
  br i1 %icmp.118, label %then.94, label %else.94

then.92:                                          ; preds = %then.91
  call void @llvm.dbg.value(metadata i8* %call.79, metadata !686, metadata !DIExpression()), !dbg !687
  %icmp.115 = icmp eq i8* %call.79, null, !dbg !684
  br i1 %icmp.115, label %then.93, label %else.93

fallthrough.92:                                   ; preds = %else.92, %else.93
  call void @llvm.dbg.value(metadata i8* %call.79, metadata !636, metadata !DIExpression()), !dbg !637
  call void @llvm.dbg.value(metadata i64 0, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !647
  call void @llvm.dbg.value(metadata i64 0, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !647
  %18 = bitcast { %Value.0*, %error.0 }* %sret.formal.7 to i8**, !dbg !688
  store i8* %call.79, i8** %18, align 8, !dbg !688
  %tmp.72.sroa.2.0.cast.1159.sroa_idx183 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, !dbg !688
  %19 = bitcast %error.0* %tmp.72.sroa.2.0.cast.1159.sroa_idx183 to i8*, !dbg !688
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 16, i1 false), !dbg !688
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !688
  ret void, !dbg !688

else.92:                                          ; preds = %then.91
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.79, i8* nonnull %cast.1145), !dbg !684
  br label %fallthrough.92

then.93:                                          ; preds = %then.92
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !684
  unreachable

else.93:                                          ; preds = %then.92
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.79, i8* nonnull align 8 %cast.1145, i64 24, i1 false), !dbg !684
  br label %fallthrough.92

then.94:                                          ; preds = %else.91
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !685
  unreachable

else.94:                                          ; preds = %else.91
  %cast.1161 = bitcast %Value.0* %tmpv.312 to i8*
  %cast.1162 = bitcast %Value.0* %value.sroa.0.0.copyload to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1161, i8* align 8 %cast.1162, i64 24, i1 false)
  %command_line_arguments.PkgLogger.field.ld.4 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !689
  %field.363 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.4, i64 0, i32 1, !dbg !689
  %.field.ld.40 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.363, align 8, !dbg !689
  %command_line_arguments.PkgLogger.field.ld.5 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !689
  %call.81 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !689
  %call.82 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !689
  %cast.1167 = bitcast %Value.0* %tmpv.316 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1167, i8* nonnull align 8 %cast.1161, i64 24, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.82, i8* nonnull %cast.1167), !dbg !689
  %tmp.73.sroa.0.0.cast.1174.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.317, i64 0, i64 0, i32 0, !dbg !689
  store %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), %_type.0** %tmp.73.sroa.0.0.cast.1174.sroa_idx, align 8, !dbg !689
  %tmp.73.sroa.2.0.cast.1174.sroa_idx185 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.317, i64 0, i64 0, i32 1, !dbg !689
  store i8* %call.82, i8** %tmp.73.sroa.2.0.cast.1174.sroa_idx185, align 8, !dbg !689
  %cast.1178 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.317 to i8*, !dbg !689
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.81, i8* nonnull %cast.1178), !dbg !689
  %20 = bitcast %IPST.1* %tmp.74 to i8**, !dbg !689
  store i8* %call.81, i8** %20, align 8, !dbg !689
  %field.366 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.74, i64 0, i32 1, !dbg !689
  store i64 1, i64* %field.366, align 8, !dbg !689
  %field.367 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.74, i64 0, i32 2, !dbg !689
  store i64 1, i64* %field.367, align 8, !dbg !689
  call void %.field.ld.40(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.5, i64 ptrtoint ([26 x i8]* @const.157 to i64), i64 25, %IPST.1* byval nonnull %tmp.74), !dbg !689
  call void @llvm.dbg.value(metadata %Value.0* %value.sroa.0.0.copyload, metadata !636, metadata !DIExpression()), !dbg !637
  call void @llvm.dbg.value(metadata i64 0, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !647
  call void @llvm.dbg.value(metadata i64 0, metadata !646, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !647
  %tmp.75.sroa.0.0.cast.1187.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 0, !dbg !690
  store %Value.0* %value.sroa.0.0.copyload, %Value.0** %tmp.75.sroa.0.0.cast.1187.sroa_idx, align 8, !dbg !690
  %tmp.75.sroa.2.0.cast.1187.sroa_idx186 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.7, i64 0, i32 1, !dbg !690
  %21 = bitcast %error.0* %tmp.75.sroa.2.0.cast.1187.sroa_idx186 to i8*, !dbg !690
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 16, i1 false), !dbg !690
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !690
  ret void, !dbg !690
}

define void @command_line_arguments.Context.evalDecl({ %Value.0*, %error.0 }* nocapture sret %sret.formal.2, i8* nest nocapture readnone %nest.6, %Context.0* nocapture readnone %c, i64 %decl.chunk0, i64 %decl.chunk1) #0 !dbg !691 {
entry:
  %tmp.25 = alloca %IPST.1, align 8
  %tmpv.102 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !694, metadata !DIExpression()), !dbg !695
  call void @llvm.dbg.value(metadata i64 %decl.chunk0, metadata !696, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !697
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !696, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !697
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !698, metadata !DIExpression()), !dbg !699
  %call.31 = call %_type.0* @runtime.ifacetype(i8* nest undef, i64 %decl.chunk0, i64 %decl.chunk1), !dbg !700
  %call.32 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.FuncDecl, i64 0, i32 0), %_type.0* %call.31), !dbg !701
  %icmp.24 = icmp eq i8 %call.32, 0, !dbg !701
  br i1 %icmp.24, label %label.0, label %else.24

else.24:                                          ; preds = %entry
  %icmp.25 = icmp eq i64 %decl.chunk0, 0, !dbg !702
  br i1 %icmp.25, label %fallthrough.25, label %else.25

label.0:                                          ; preds = %entry
  %call.33 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.GenDecl, i64 0, i32 0), %_type.0* %call.31), !dbg !704
  %icmp.26 = icmp eq i8 %call.33, 0, !dbg !704
  %icmp.28 = icmp eq i64 %decl.chunk0, 0, !dbg !705
  br i1 %icmp.26, label %label.2, label %else.26

fallthrough.25:                                   ; preds = %else.24, %else.25
  %tmpv.88.0 = phi %_type.0* [ %.field.ld.9, %else.25 ], [ null, %else.24 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.FuncDecl, i64 0, i32 0), %_type.0* %tmpv.88.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i64 0, i32 0)), !dbg !707
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !708, metadata !DIExpression()), !dbg !777
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* undef, metadata !698, metadata !DIExpression(DW_OP_deref)), !dbg !699
  %0 = bitcast { %Value.0*, %error.0 }* %sret.formal.2 to i64*, !dbg !778
  store i64 ptrtoint (%Value.0* @command_line_arguments.False to i64), i64* %0, align 8, !dbg !778
  %tmp.20.sroa.2.0.cast.497.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.2, i64 0, i32 1, !dbg !778
  %tmp.20.sroa.2.0.cast.497.sroa_cast = bitcast %error.0* %tmp.20.sroa.2.0.cast.497.sroa_idx to i8*, !dbg !778
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.20.sroa.2.0.cast.497.sroa_cast, i8 0, i64 16, i1 false), !dbg !778
  ret void, !dbg !778

else.25:                                          ; preds = %else.24
  %1 = inttoptr i64 %decl.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !702
  %field.81 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %1, i64 0, i32 0, !dbg !702
  %.field.ld.9 = load %_type.0*, %_type.0** %field.81, align 8, !dbg !702
  br label %fallthrough.25

else.26:                                          ; preds = %label.0
  br i1 %icmp.28, label %fallthrough.27, label %else.27

label.2:                                          ; preds = %label.0
  call void @llvm.dbg.value(metadata i64 %decl.chunk0, metadata !779, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !777
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !779, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !777
  br i1 %icmp.28, label %fallthrough.28, label %else.28

fallthrough.27:                                   ; preds = %else.26, %else.27
  %tmpv.94.0 = phi %_type.0* [ %.field.ld.10, %else.27 ], [ null, %else.26 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.GenDecl, i64 0, i32 0), %_type.0* %tmpv.94.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Decl..d, i64 0, i32 0)), !dbg !781
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !782, metadata !DIExpression()), !dbg !777
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* undef, metadata !698, metadata !DIExpression(DW_OP_deref)), !dbg !699
  %2 = bitcast { %Value.0*, %error.0 }* %sret.formal.2 to i64*, !dbg !801
  store i64 ptrtoint (%Value.0* @command_line_arguments.False to i64), i64* %2, align 8, !dbg !801
  %tmp.22.sroa.2.0.cast.520.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.2, i64 0, i32 1, !dbg !801
  %tmp.22.sroa.2.0.cast.520.sroa_cast = bitcast %error.0* %tmp.22.sroa.2.0.cast.520.sroa_idx to i8*, !dbg !801
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.22.sroa.2.0.cast.520.sroa_cast, i8 0, i64 16, i1 false), !dbg !801
  ret void, !dbg !801

else.27:                                          ; preds = %else.26
  %3 = inttoptr i64 %decl.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !802
  %field.91 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %3, i64 0, i32 0, !dbg !802
  %.field.ld.10 = load %_type.0*, %_type.0** %field.91, align 8, !dbg !802
  br label %fallthrough.27

fallthrough.28:                                   ; preds = %label.2, %else.28
  %tmpv.101.0 = phi i64 [ %.field.ld.1128, %else.28 ], [ 0, %label.2 ]
  %call.34 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 %tmpv.101.0, i64 %decl.chunk1), !dbg !803
  %call.34.fca.0.extract = extractvalue { i64, i64 } %call.34, 0, !dbg !803
  %call.34.fca.1.extract = extractvalue { i64, i64 } %call.34, 1, !dbg !803
  %icmp.29 = icmp eq i64 %call.34.fca.0.extract, 0, !dbg !803
  br i1 %icmp.29, label %fallthrough.29, label %else.29

else.28:                                          ; preds = %label.2
  %4 = inttoptr i64 %decl.chunk0 to i64*, !dbg !804
  %.field.ld.1128 = load i64, i64* %4, align 8, !dbg !804
  br label %fallthrough.28

fallthrough.29:                                   ; preds = %fallthrough.28, %else.29
  %tmpv.103.0 = phi %_type.0* [ %.field.ld.12, %else.29 ], [ null, %fallthrough.28 ]
  %5 = inttoptr i64 %call.34.fca.1.extract to i8*, !dbg !805
  %tmp.24.sroa.0.0.cast.532.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.102, i64 0, i64 0, i32 0, !dbg !805
  store %_type.0* %tmpv.103.0, %_type.0** %tmp.24.sroa.0.0.cast.532.sroa_idx, align 8, !dbg !805
  %tmp.24.sroa.2.0.cast.532.sroa_idx25 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.102, i64 0, i64 0, i32 1, !dbg !805
  store i8* %5, i8** %tmp.24.sroa.2.0.cast.532.sroa_idx25, align 8, !dbg !805
  %field.111 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.25, i64 0, i32 0, !dbg !805
  %cast.535 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.102, i64 0, i64 0, !dbg !805
  store { %_type.0*, i8* }* %cast.535, { %_type.0*, i8* }** %field.111, align 8, !dbg !805
  %field.112 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.25, i64 0, i32 1, !dbg !805
  store i64 1, i64* %field.112, align 8, !dbg !805
  %field.113 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.25, i64 0, i32 2, !dbg !805
  store i64 1, i64* %field.113, align 8, !dbg !805
  %call.35 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([31 x i8]* @const.121 to i64), i64 30, %IPST.1* byval nonnull %tmp.25), !dbg !805
  %call.35.fca.0.extract = extractvalue { i64, i64 } %call.35, 0, !dbg !805
  %call.35.fca.1.extract = extractvalue { i64, i64 } %call.35, 1, !dbg !805
  %icmp.30 = icmp eq i64 %call.35.fca.0.extract, 0, !dbg !805
  br i1 %icmp.30, label %fallthrough.30, label %else.30

else.29:                                          ; preds = %fallthrough.28
  %6 = inttoptr i64 %call.34.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !803
  %field.107 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %6, i64 0, i32 0, !dbg !803
  %.field.ld.12 = load %_type.0*, %_type.0** %field.107, align 8, !dbg !803
  br label %fallthrough.29

fallthrough.30:                                   ; preds = %fallthrough.29, %else.30
  %tmpv.105.0 = phi i64 [ %.field.ld.1329, %else.30 ], [ 0, %fallthrough.29 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.105.0, i64 %call.35.fca.1.extract), !dbg !806
  unreachable

else.30:                                          ; preds = %fallthrough.29
  %7 = inttoptr i64 %call.35.fca.0.extract to i64*, !dbg !805
  %.field.ld.1329 = load i64, i64* %7, align 8, !dbg !805
  br label %fallthrough.30
}

define void @command_line_arguments.Context.evalExpr({ %Value.0*, %error.0 }* nocapture sret %sret.formal.6, i8* nest nocapture readnone %nest.12, %Context.0* %c, i64 %expr.chunk0, i64 %expr.chunk1) #0 !dbg !807 {
entry:
  %tmp.59 = alloca %IPST.1, align 8
  %tmp.55 = alloca %IPST.1, align 8
  %sret.actual.33 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.34 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.35 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.36 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.37 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.220 = alloca { i8*, i64 }, align 8
  %tmpv.223 = alloca { i8*, i64 }, align 8
  %tmpv.224 = alloca %Value.0, align 8
  %sret.actual.38 = alloca %Value.0, align 8
  %s = alloca { i8*, i64 }, align 8
  %sret.actual.39 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.236 = alloca { i8*, i64 }, align 8
  %tmpv.237 = alloca %Value.0, align 8
  %sret.actual.40 = alloca %Value.0, align 8
  %tmpv.244 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.250 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !810, metadata !DIExpression()), !dbg !811
  call void @llvm.dbg.value(metadata i64 %expr.chunk0, metadata !812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !813
  call void @llvm.dbg.value(metadata i64 %expr.chunk1, metadata !812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !813
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !814, metadata !DIExpression()), !dbg !815
  %call.60 = call %_type.0* @runtime.ifacetype(i8* nest undef, i64 %expr.chunk0, i64 %expr.chunk1), !dbg !816
  %call.61 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BinaryExpr, i64 0, i32 0), %_type.0* %call.60), !dbg !817
  %icmp.57 = icmp eq i8 %call.61, 0, !dbg !817
  br i1 %icmp.57, label %label.0, label %else.46

else.46:                                          ; preds = %entry
  %icmp.58 = icmp eq i64 %expr.chunk0, 0, !dbg !818
  br i1 %icmp.58, label %fallthrough.47, label %else.47

label.0:                                          ; preds = %entry
  %call.62 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.UnaryExpr, i64 0, i32 0), %_type.0* %call.60), !dbg !820
  %icmp.59 = icmp eq i8 %call.62, 0, !dbg !820
  br i1 %icmp.59, label %label.2, label %else.48

fallthrough.47:                                   ; preds = %else.46, %else.47
  %tmpv.187.0 = phi %_type.0* [ %.field.ld.20, %else.47 ], [ null, %else.46 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BinaryExpr, i64 0, i32 0), %_type.0* %tmpv.187.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !821
  %cast.802 = inttoptr i64 %expr.chunk1 to %BinaryExpr.0*, !dbg !821
  call void @llvm.dbg.value(metadata %BinaryExpr.0* %cast.802, metadata !822, metadata !DIExpression()), !dbg !823
  call void @command_line_arguments.Context.evalBinaryExpr({ %Value.0*, %error.0 }* nonnull sret %sret.actual.33, i8* nest undef, %Context.0* %c, %BinaryExpr.0* %cast.802), !dbg !824
  %0 = bitcast { %Value.0*, %error.0 }* %sret.actual.33 to i64*, !dbg !824
  %tmpv.188.sroa.0.0.copyload39115 = load i64, i64* %0, align 8, !dbg !824
  %tmpv.188.sroa.3.0.cast.806.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.33, i64 0, i32 1, !dbg !824
  %tmpv.188.sroa.3.0.cast.806.sroa_cast = bitcast %error.0* %tmpv.188.sroa.3.0.cast.806.sroa_idx to i8*, !dbg !824
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.33, metadata !814, metadata !DIExpression(DW_OP_deref)), !dbg !815
  %1 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i64*, !dbg !825
  store i64 %tmpv.188.sroa.0.0.copyload39115, i64* %1, align 8, !dbg !825
  %tmp.43.sroa.2.0.cast.815.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !825
  %tmp.43.sroa.2.0.cast.815.sroa_cast = bitcast %error.0* %tmp.43.sroa.2.0.cast.815.sroa_idx to i8*, !dbg !825
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.43.sroa.2.0.cast.815.sroa_cast, i8* nonnull align 8 %tmpv.188.sroa.3.0.cast.806.sroa_cast, i64 16, i1 false), !dbg !825
  ret void, !dbg !825

else.47:                                          ; preds = %else.46
  %2 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !818
  %field.197 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %2, i64 0, i32 0, !dbg !818
  %.field.ld.20 = load %_type.0*, %_type.0** %field.197, align 8, !dbg !818
  br label %fallthrough.47

else.48:                                          ; preds = %label.0
  %icmp.60 = icmp eq i64 %expr.chunk0, 0, !dbg !826
  br i1 %icmp.60, label %fallthrough.49, label %else.49

label.2:                                          ; preds = %label.0
  %call.63 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.CallExpr, i64 0, i32 0), %_type.0* %call.60), !dbg !828
  %icmp.61 = icmp eq i8 %call.63, 0, !dbg !828
  br i1 %icmp.61, label %label.3, label %else.50

fallthrough.49:                                   ; preds = %else.48, %else.49
  %tmpv.193.0 = phi %_type.0* [ %.field.ld.21, %else.49 ], [ null, %else.48 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.UnaryExpr, i64 0, i32 0), %_type.0* %tmpv.193.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !829
  %cast.822 = inttoptr i64 %expr.chunk1 to %UnaryExpr.0*, !dbg !829
  call void @llvm.dbg.value(metadata %UnaryExpr.0* %cast.822, metadata !830, metadata !DIExpression()), !dbg !823
  call void @command_line_arguments.Context.evalUnaryExpr({ %Value.0*, %error.0 }* nonnull sret %sret.actual.34, i8* nest undef, %Context.0* %c, %UnaryExpr.0* %cast.822), !dbg !837
  %3 = bitcast { %Value.0*, %error.0 }* %sret.actual.34 to i64*, !dbg !837
  %tmpv.194.sroa.0.0.copyload36116 = load i64, i64* %3, align 8, !dbg !837
  %tmpv.194.sroa.3.0.cast.826.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.34, i64 0, i32 1, !dbg !837
  %tmpv.194.sroa.3.0.cast.826.sroa_cast = bitcast %error.0* %tmpv.194.sroa.3.0.cast.826.sroa_idx to i8*, !dbg !837
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.34, metadata !814, metadata !DIExpression(DW_OP_deref)), !dbg !815
  %4 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i64*, !dbg !838
  store i64 %tmpv.194.sroa.0.0.copyload36116, i64* %4, align 8, !dbg !838
  %tmp.44.sroa.2.0.cast.835.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !838
  %tmp.44.sroa.2.0.cast.835.sroa_cast = bitcast %error.0* %tmp.44.sroa.2.0.cast.835.sroa_idx to i8*, !dbg !838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.44.sroa.2.0.cast.835.sroa_cast, i8* nonnull align 8 %tmpv.194.sroa.3.0.cast.826.sroa_cast, i64 16, i1 false), !dbg !838
  ret void, !dbg !838

else.49:                                          ; preds = %else.48
  %5 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !826
  %field.205 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %5, i64 0, i32 0, !dbg !826
  %.field.ld.21 = load %_type.0*, %_type.0** %field.205, align 8, !dbg !826
  br label %fallthrough.49

else.50:                                          ; preds = %label.2
  %icmp.62 = icmp eq i64 %expr.chunk0, 0, !dbg !839
  br i1 %icmp.62, label %fallthrough.51, label %else.51

label.3:                                          ; preds = %label.2
  %call.64 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0* %call.60), !dbg !841
  %icmp.63 = icmp eq i8 %call.64, 0, !dbg !841
  br i1 %icmp.63, label %label.4, label %else.52

fallthrough.51:                                   ; preds = %else.50, %else.51
  %tmpv.199.0 = phi %_type.0* [ %.field.ld.22, %else.51 ], [ null, %else.50 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.CallExpr, i64 0, i32 0), %_type.0* %tmpv.199.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !842
  %cast.842 = inttoptr i64 %expr.chunk1 to %CallExpr.0*, !dbg !842
  call void @llvm.dbg.value(metadata %CallExpr.0* %cast.842, metadata !843, metadata !DIExpression()), !dbg !823
  call void @command_line_arguments.Context.evalCallExpr({ %Value.0*, %error.0 }* nonnull sret %sret.actual.35, i8* nest undef, %Context.0* %c, %CallExpr.0* %cast.842), !dbg !844
  %6 = bitcast { %Value.0*, %error.0 }* %sret.actual.35 to i64*, !dbg !844
  %tmpv.200.sroa.0.0.copyload33117 = load i64, i64* %6, align 8, !dbg !844
  %tmpv.200.sroa.3.0.cast.846.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.35, i64 0, i32 1, !dbg !844
  %tmpv.200.sroa.3.0.cast.846.sroa_cast = bitcast %error.0* %tmpv.200.sroa.3.0.cast.846.sroa_idx to i8*, !dbg !844
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.35, metadata !814, metadata !DIExpression(DW_OP_deref)), !dbg !815
  %7 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i64*, !dbg !845
  store i64 %tmpv.200.sroa.0.0.copyload33117, i64* %7, align 8, !dbg !845
  %tmp.45.sroa.2.0.cast.855.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !845
  %tmp.45.sroa.2.0.cast.855.sroa_cast = bitcast %error.0* %tmp.45.sroa.2.0.cast.855.sroa_idx to i8*, !dbg !845
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.45.sroa.2.0.cast.855.sroa_cast, i8* nonnull align 8 %tmpv.200.sroa.3.0.cast.846.sroa_cast, i64 16, i1 false), !dbg !845
  ret void, !dbg !845

else.51:                                          ; preds = %else.50
  %8 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !839
  %field.213 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %8, i64 0, i32 0, !dbg !839
  %.field.ld.22 = load %_type.0*, %_type.0** %field.213, align 8, !dbg !839
  br label %fallthrough.51

else.52:                                          ; preds = %label.3
  %icmp.64 = icmp eq i64 %expr.chunk0, 0, !dbg !846
  br i1 %icmp.64, label %fallthrough.53, label %else.53

label.4:                                          ; preds = %label.3
  %call.65 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.Ident, i64 0, i32 0), %_type.0* %call.60), !dbg !848
  %icmp.65 = icmp eq i8 %call.65, 0, !dbg !848
  br i1 %icmp.65, label %label.5, label %else.54

fallthrough.53:                                   ; preds = %else.52, %else.53
  %tmpv.205.0 = phi %_type.0* [ %.field.ld.23, %else.53 ], [ null, %else.52 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0* %tmpv.205.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !849
  %cast.862 = inttoptr i64 %expr.chunk1 to %SelectorExpr.0*, !dbg !849
  call void @llvm.dbg.value(metadata %SelectorExpr.0* %cast.862, metadata !850, metadata !DIExpression()), !dbg !823
  call void @command_line_arguments.Context.evalSelectorExpr({ %Value.0*, %error.0 }* nonnull sret %sret.actual.36, i8* nest undef, %Context.0* %c, %SelectorExpr.0* %cast.862), !dbg !855
  %9 = bitcast { %Value.0*, %error.0 }* %sret.actual.36 to i64*, !dbg !855
  %tmpv.206.sroa.0.0.copyload30118 = load i64, i64* %9, align 8, !dbg !855
  %tmpv.206.sroa.3.0.cast.866.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.36, i64 0, i32 1, !dbg !855
  %tmpv.206.sroa.3.0.cast.866.sroa_cast = bitcast %error.0* %tmpv.206.sroa.3.0.cast.866.sroa_idx to i8*, !dbg !855
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.36, metadata !814, metadata !DIExpression(DW_OP_deref)), !dbg !815
  %10 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i64*, !dbg !856
  store i64 %tmpv.206.sroa.0.0.copyload30118, i64* %10, align 8, !dbg !856
  %tmp.46.sroa.2.0.cast.875.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !856
  %tmp.46.sroa.2.0.cast.875.sroa_cast = bitcast %error.0* %tmp.46.sroa.2.0.cast.875.sroa_idx to i8*, !dbg !856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.46.sroa.2.0.cast.875.sroa_cast, i8* nonnull align 8 %tmpv.206.sroa.3.0.cast.866.sroa_cast, i64 16, i1 false), !dbg !856
  ret void, !dbg !856

else.53:                                          ; preds = %else.52
  %11 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !846
  %field.221 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %11, i64 0, i32 0, !dbg !846
  %.field.ld.23 = load %_type.0*, %_type.0** %field.221, align 8, !dbg !846
  br label %fallthrough.53

else.54:                                          ; preds = %label.4
  %icmp.66 = icmp eq i64 %expr.chunk0, 0, !dbg !857
  br i1 %icmp.66, label %fallthrough.55, label %else.55

label.5:                                          ; preds = %label.4
  %call.66 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BasicLit, i64 0, i32 0), %_type.0* %call.60), !dbg !859
  %icmp.67 = icmp eq i8 %call.66, 0, !dbg !859
  %icmp.80 = icmp eq i64 %expr.chunk0, 0, !dbg !860
  br i1 %icmp.67, label %label.6, label %else.56

fallthrough.55:                                   ; preds = %else.54, %else.55
  %tmpv.211.0 = phi %_type.0* [ %.field.ld.24, %else.55 ], [ null, %else.54 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.Ident, i64 0, i32 0), %_type.0* %tmpv.211.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !862
  call void @llvm.dbg.value(metadata i64 %expr.chunk1, metadata !863, metadata !DIExpression()), !dbg !823
  call void @command_line_arguments.Context.evalIdent({ %Value.0*, %error.0 }* nonnull sret %sret.actual.37, i8* nest undef, %Context.0* %c, i64 ptrtoint ({ %_type.0*, i8*, i8*, i8* }* @pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.2.go_ast.exprNode.0func.8.9.8.9.5..go_ast.Ident to i64), i64 %expr.chunk1), !dbg !864
  %12 = bitcast { %Value.0*, %error.0 }* %sret.actual.37 to i64*, !dbg !864
  %tmpv.212.sroa.0.0.copyload27119 = load i64, i64* %12, align 8, !dbg !864
  %tmpv.212.sroa.3.0.cast.889.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.37, i64 0, i32 1, !dbg !864
  %tmpv.212.sroa.3.0.cast.889.sroa_cast = bitcast %error.0* %tmpv.212.sroa.3.0.cast.889.sroa_idx to i8*, !dbg !864
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.37, metadata !814, metadata !DIExpression(DW_OP_deref)), !dbg !815
  %13 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i64*, !dbg !865
  store i64 %tmpv.212.sroa.0.0.copyload27119, i64* %13, align 8, !dbg !865
  %tmp.48.sroa.2.0.cast.898.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !865
  %tmp.48.sroa.2.0.cast.898.sroa_cast = bitcast %error.0* %tmp.48.sroa.2.0.cast.898.sroa_idx to i8*, !dbg !865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.48.sroa.2.0.cast.898.sroa_cast, i8* nonnull align 8 %tmpv.212.sroa.3.0.cast.889.sroa_cast, i64 16, i1 false), !dbg !865
  ret void, !dbg !865

else.55:                                          ; preds = %else.54
  %14 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !857
  %field.229 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %14, i64 0, i32 0, !dbg !857
  %.field.ld.24 = load %_type.0*, %_type.0** %field.229, align 8, !dbg !857
  br label %fallthrough.55

else.56:                                          ; preds = %label.5
  br i1 %icmp.80, label %fallthrough.57, label %else.57

label.6:                                          ; preds = %label.5
  call void @llvm.dbg.value(metadata i64 %expr.chunk0, metadata !866, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !823
  call void @llvm.dbg.value(metadata i64 %expr.chunk1, metadata !866, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !823
  br i1 %icmp.80, label %fallthrough.69, label %else.69

fallthrough.57:                                   ; preds = %else.56, %else.57
  %tmpv.217.0 = phi %_type.0* [ %.field.ld.25, %else.57 ], [ null, %else.56 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BasicLit, i64 0, i32 0), %_type.0* %tmpv.217.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Expr..d, i64 0, i32 0)), !dbg !868
  %cast.905 = inttoptr i64 %expr.chunk1 to %BasicLit.0*, !dbg !868
  call void @llvm.dbg.value(metadata %BasicLit.0* %cast.905, metadata !869, metadata !DIExpression()), !dbg !823
  %icmp.79 = icmp eq i64 %expr.chunk1, 0, !dbg !870
  br i1 %icmp.79, label %then.58, label %else.58

else.57:                                          ; preds = %else.56
  %15 = inttoptr i64 %expr.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !871
  %field.239 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %15, i64 0, i32 0, !dbg !871
  %.field.ld.25 = load %_type.0*, %_type.0** %field.239, align 8, !dbg !871
  br label %fallthrough.57

then.58:                                          ; preds = %fallthrough.57
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !870
  unreachable

else.58:                                          ; preds = %fallthrough.57
  %field.272 = getelementptr inbounds %BasicLit.0, %BasicLit.0* %cast.905, i64 0, i32 1, !dbg !870
  %.field.ld.29 = load i64, i64* %field.272, align 8, !dbg !870
  switch i64 %.field.ld.29, label %else.67 [
    i64 5, label %case.0
    i64 9, label %case.1
  ]

case.0:                                           ; preds = %else.58
  %call.67 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !872
  call void @llvm.dbg.value(metadata i8* %call.67, metadata !874, metadata !DIExpression()), !dbg !875
  %field.241 = getelementptr inbounds %BasicLit.0, %BasicLit.0* %cast.905, i64 0, i32 2, !dbg !876
  %cast.909 = bitcast { i8*, i64 }* %tmpv.220 to i8*
  %cast.910 = bitcast { i8*, i64 }* %field.241 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.909, i8* nonnull align 8 %cast.910, i64 16, i1 false)
  %call.68 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !876
  %cast.912 = bitcast { i8*, i64 }* %tmpv.223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.912, i8* nonnull align 8 %cast.909, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.68, i8* nonnull %cast.912), !dbg !876
  %16 = ptrtoint i8* %call.68 to i64, !dbg !876
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.38, i8* nest undef, i64 ptrtoint (%_type.0* @string..d to i64), i64 %16), !dbg !877
  %cast.918 = bitcast %Value.0* %tmpv.224 to i8*
  %cast.919 = bitcast %Value.0* %sret.actual.38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.918, i8* nonnull align 8 %cast.919, i64 24, i1 false)
  %runtime.writeBarrier.ld.9 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !877
  %icmp.71 = icmp eq i32 %runtime.writeBarrier.ld.9, 0, !dbg !877
  br i1 %icmp.71, label %then.60, label %else.60

case.1:                                           ; preds = %else.58
  %s.0.sroa_cast = bitcast { i8*, i64 }* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %s.0.sroa_cast)
  %field.246 = getelementptr inbounds %BasicLit.0, %BasicLit.0* %cast.905, i64 0, i32 2, !dbg !878
  %field0.41 = bitcast { i8*, i64 }* %field.246 to i64*, !dbg !880
  %ld.73 = load i64, i64* %field0.41, align 8, !dbg !880
  %17 = getelementptr inbounds %BasicLit.0, %BasicLit.0* %cast.905, i64 0, i32 2, i32 1, !dbg !880
  %ld.74 = load i64, i64* %17, align 8, !dbg !880
  call void @strconv.Unquote({ { i8*, i64 }, %error.0 }* nonnull sret %sret.actual.39, i8* nest undef, i64 %ld.73, i64 %ld.74), !dbg !880
  %tmpv.228.sroa.0.0.cast.939.sroa_cast = bitcast { { i8*, i64 }, %error.0 }* %sret.actual.39 to i8*, !dbg !880
  %tmpv.228.sroa.3.0.cast.939.sroa_idx19 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %sret.actual.39, i64 0, i32 1, i32 0, !dbg !880
  %tmpv.228.sroa.3.0.copyload20 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.228.sroa.3.0.cast.939.sroa_idx19, align 8, !dbg !880
  %tmpv.228.sroa.4.0.cast.939.sroa_idx21 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %sret.actual.39, i64 0, i32 1, i32 1, !dbg !880
  %18 = bitcast i8** %tmpv.228.sroa.4.0.cast.939.sroa_idx21 to i64*, !dbg !880
  %tmpv.228.sroa.4.0.copyload22120 = load i64, i64* %18, align 8, !dbg !880
  %s144 = bitcast { i8*, i64 }* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %s144, i8* nonnull align 8 %tmpv.228.sroa.0.0.cast.939.sroa_cast, i64 16, i1 false)
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.228.sroa.3.0.copyload20, metadata !881, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !882
  call void @llvm.dbg.value(metadata i8** %tmpv.228.sroa.4.0.cast.939.sroa_idx21, metadata !881, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !882
  %icmp.74 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.228.sroa.3.0.copyload20, null, !dbg !883
  br i1 %icmp.74, label %else.63, label %else.64

then.60:                                          ; preds = %case.0
  %icmp.70 = icmp eq i8* %call.67, null, !dbg !877
  br i1 %icmp.70, label %then.61, label %else.61

fallthrough.60:                                   ; preds = %else.60, %else.61
  call void @llvm.dbg.value(metadata i8* %call.67, metadata !814, metadata !DIExpression()), !dbg !815
  %19 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i8**, !dbg !884
  store i8* %call.67, i8** %19, align 8, !dbg !884
  %tmp.50.sroa.2.0.cast.932.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !884
  %tmp.50.sroa.2.0.cast.932.sroa_cast = bitcast %error.0* %tmp.50.sroa.2.0.cast.932.sroa_idx to i8*, !dbg !884
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.50.sroa.2.0.cast.932.sroa_cast, i8 0, i64 16, i1 false), !dbg !884
  ret void, !dbg !884

else.60:                                          ; preds = %case.0
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.67, i8* nonnull %cast.918), !dbg !877
  br label %fallthrough.60

then.61:                                          ; preds = %then.60
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !877
  unreachable

else.61:                                          ; preds = %then.60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.67, i8* nonnull align 8 %cast.918, i64 24, i1 false), !dbg !877
  br label %fallthrough.60

else.63:                                          ; preds = %case.1
  %call.69 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !885
  %call.70 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !886
  %cast.955 = bitcast { i8*, i64 }* %tmpv.236 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.955, i8* nonnull align 8 %s.0.sroa_cast, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.70, i8* nonnull %cast.955), !dbg !886
  %20 = ptrtoint i8* %call.70 to i64, !dbg !886
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.40, i8* nest undef, i64 ptrtoint (%_type.0* @string..d to i64), i64 %20), !dbg !887
  %cast.961 = bitcast %Value.0* %tmpv.237 to i8*
  %cast.962 = bitcast %Value.0* %sret.actual.40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.961, i8* nonnull align 8 %cast.962, i64 24, i1 false)
  %runtime.writeBarrier.ld.10 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !887
  %icmp.76 = icmp eq i32 %runtime.writeBarrier.ld.10, 0, !dbg !887
  br i1 %icmp.76, label %then.65, label %else.65

else.64:                                          ; preds = %case.1
  %21 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.228.sroa.3.0.copyload20 to i64*, !dbg !888
  %.field.ld.26121 = load i64, i64* %21, align 8, !dbg !888
  call void @runtime.gopanic(i8* nest undef, i64 %.field.ld.26121, i64 %tmpv.228.sroa.4.0.copyload22120), !dbg !889
  unreachable

then.65:                                          ; preds = %else.63
  call void @llvm.dbg.value(metadata i8* %call.69, metadata !890, metadata !DIExpression()), !dbg !891
  %icmp.75 = icmp eq i8* %call.69, null, !dbg !887
  br i1 %icmp.75, label %then.66, label %else.66

fallthrough.65:                                   ; preds = %else.65, %else.66
  call void @llvm.dbg.value(metadata i8* %call.69, metadata !814, metadata !DIExpression()), !dbg !815
  %22 = bitcast { %Value.0*, %error.0 }* %sret.formal.6 to i8**, !dbg !892
  store i8* %call.69, i8** %22, align 8, !dbg !892
  %tmp.53.sroa.2.0.cast.975.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.6, i64 0, i32 1, !dbg !892
  %tmp.53.sroa.2.0.cast.975.sroa_cast = bitcast %error.0* %tmp.53.sroa.2.0.cast.975.sroa_idx to i8*, !dbg !892
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.53.sroa.2.0.cast.975.sroa_cast, i8 0, i64 16, i1 false), !dbg !892
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %s.0.sroa_cast), !dbg !892
  ret void, !dbg !892

else.65:                                          ; preds = %else.63
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.69, i8* nonnull %cast.961), !dbg !887
  br label %fallthrough.65

then.66:                                          ; preds = %then.65
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !887
  unreachable

else.66:                                          ; preds = %then.65
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.69, i8* nonnull align 8 %cast.961, i64 24, i1 false), !dbg !887
  br label %fallthrough.65

else.67:                                          ; preds = %else.58
  %call.71 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @go_token.Token..d), !dbg !893
  %cast.978 = bitcast i8* %call.71 to i64*, !dbg !893
  store i64 %.field.ld.29, i64* %cast.978, align 8, !dbg !893
  %tmp.54.sroa.0.0.cast.980.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.244, i64 0, i64 0, i32 0, !dbg !893
  store %_type.0* @go_token.Token..d, %_type.0** %tmp.54.sroa.0.0.cast.980.sroa_idx, align 8, !dbg !893
  %tmp.54.sroa.2.0.cast.980.sroa_idx113 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.244, i64 0, i64 0, i32 1, !dbg !893
  store i8* %call.71, i8** %tmp.54.sroa.2.0.cast.980.sroa_idx113, align 8, !dbg !893
  %field.263 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.55, i64 0, i32 0, !dbg !893
  %cast.983 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.244, i64 0, i64 0, !dbg !893
  store { %_type.0*, i8* }* %cast.983, { %_type.0*, i8* }** %field.263, align 8, !dbg !893
  %field.264 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.55, i64 0, i32 1, !dbg !893
  store i64 1, i64* %field.264, align 8, !dbg !893
  %field.265 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.55, i64 0, i32 2, !dbg !893
  store i64 1, i64* %field.265, align 8, !dbg !893
  %call.72 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([29 x i8]* @const.147 to i64), i64 28, %IPST.1* byval nonnull %tmp.55), !dbg !893
  %call.72.fca.0.extract = extractvalue { i64, i64 } %call.72, 0, !dbg !893
  %call.72.fca.1.extract = extractvalue { i64, i64 } %call.72, 1, !dbg !893
  %icmp.78 = icmp eq i64 %call.72.fca.0.extract, 0, !dbg !893
  br i1 %icmp.78, label %fallthrough.68, label %else.68

fallthrough.68:                                   ; preds = %else.67, %else.68
  %tmpv.246.0 = phi i64 [ %.field.ld.28122, %else.68 ], [ 0, %else.67 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.246.0, i64 %call.72.fca.1.extract), !dbg !894
  unreachable

else.68:                                          ; preds = %else.67
  %23 = inttoptr i64 %call.72.fca.0.extract to i64*, !dbg !893
  %.field.ld.28122 = load i64, i64* %23, align 8, !dbg !893
  br label %fallthrough.68

fallthrough.69:                                   ; preds = %label.6, %else.69
  %tmpv.249.0 = phi i64 [ %.field.ld.30123, %else.69 ], [ 0, %label.6 ]
  %call.73 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 %tmpv.249.0, i64 %expr.chunk1), !dbg !895
  %call.73.fca.0.extract = extractvalue { i64, i64 } %call.73, 0, !dbg !895
  %call.73.fca.1.extract = extractvalue { i64, i64 } %call.73, 1, !dbg !895
  %icmp.81 = icmp eq i64 %call.73.fca.0.extract, 0, !dbg !895
  br i1 %icmp.81, label %fallthrough.70, label %else.70

else.69:                                          ; preds = %label.6
  %24 = inttoptr i64 %expr.chunk0 to i64*, !dbg !896
  %.field.ld.30123 = load i64, i64* %24, align 8, !dbg !896
  br label %fallthrough.69

fallthrough.70:                                   ; preds = %fallthrough.69, %else.70
  %tmpv.251.0 = phi %_type.0* [ %.field.ld.31, %else.70 ], [ null, %fallthrough.69 ]
  %25 = inttoptr i64 %call.73.fca.1.extract to i8*, !dbg !897
  %tmp.58.sroa.0.0.cast.1001.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.250, i64 0, i64 0, i32 0, !dbg !897
  store %_type.0* %tmpv.251.0, %_type.0** %tmp.58.sroa.0.0.cast.1001.sroa_idx, align 8, !dbg !897
  %tmp.58.sroa.2.0.cast.1001.sroa_idx114 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.250, i64 0, i64 0, i32 1, !dbg !897
  store i8* %25, i8** %tmp.58.sroa.2.0.cast.1001.sroa_idx114, align 8, !dbg !897
  %field.285 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.59, i64 0, i32 0, !dbg !897
  %cast.1004 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.250, i64 0, i64 0, !dbg !897
  store { %_type.0*, i8* }* %cast.1004, { %_type.0*, i8* }** %field.285, align 8, !dbg !897
  %field.286 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.59, i64 0, i32 1, !dbg !897
  store i64 1, i64* %field.286, align 8, !dbg !897
  %field.287 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.59, i64 0, i32 2, !dbg !897
  store i64 1, i64* %field.287, align 8, !dbg !897
  %call.74 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([31 x i8]* @const.149 to i64), i64 30, %IPST.1* byval nonnull %tmp.59), !dbg !897
  %call.74.fca.0.extract = extractvalue { i64, i64 } %call.74, 0, !dbg !897
  %call.74.fca.1.extract = extractvalue { i64, i64 } %call.74, 1, !dbg !897
  %icmp.82 = icmp eq i64 %call.74.fca.0.extract, 0, !dbg !897
  br i1 %icmp.82, label %fallthrough.71, label %else.71

else.70:                                          ; preds = %fallthrough.69
  %26 = inttoptr i64 %call.73.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !895
  %field.281 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %26, i64 0, i32 0, !dbg !895
  %.field.ld.31 = load %_type.0*, %_type.0** %field.281, align 8, !dbg !895
  br label %fallthrough.70

fallthrough.71:                                   ; preds = %fallthrough.70, %else.71
  %tmpv.253.0 = phi i64 [ %.field.ld.32124, %else.71 ], [ 0, %fallthrough.70 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.253.0, i64 %call.74.fca.1.extract), !dbg !898
  unreachable

else.71:                                          ; preds = %fallthrough.70
  %27 = inttoptr i64 %call.74.fca.0.extract to i64*, !dbg !897
  %.field.ld.32124 = load i64, i64* %27, align 8, !dbg !897
  br label %fallthrough.71
}

define void @command_line_arguments.Context.evalExprStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.13, i8* nest nocapture readnone %nest.22, %Context.0* %c, %ExprStmt.0* readonly %e) #0 !dbg !899 {
entry:
  %sret.actual.87 = alloca { %Value.0*, %error.0 }, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !905, metadata !DIExpression()), !dbg !906
  call void @llvm.dbg.value(metadata %ExprStmt.0* %e, metadata !907, metadata !DIExpression()), !dbg !908
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !909, metadata !DIExpression()), !dbg !910
  %icmp.218 = icmp eq %ExprStmt.0* %e, null, !dbg !911
  br i1 %icmp.218, label %then.194, label %else.194

then.194:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !911
  unreachable

else.194:                                         ; preds = %entry
  %tmpv.626.sroa.0.0.cast.2167.sroa_idx = getelementptr inbounds %ExprStmt.0, %ExprStmt.0* %e, i64 0, i32 0, i32 0
  %tmpv.626.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.626.sroa.0.0.cast.2167.sroa_idx, align 8
  %tmpv.626.sroa.3.0.cast.2167.sroa_idx1 = getelementptr inbounds %ExprStmt.0, %ExprStmt.0* %e, i64 0, i32 0, i32 1
  %0 = bitcast i8** %tmpv.626.sroa.3.0.cast.2167.sroa_idx1 to i64*
  %tmpv.626.sroa.3.0.copyload38 = load i64, i64* %0, align 8
  %icmp.219 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.626.sroa.0.0.copyload, null, !dbg !911
  br i1 %icmp.219, label %fallthrough.195, label %else.195

fallthrough.195:                                  ; preds = %else.194, %else.195
  %tmpv.628.0 = phi %_type.0* [ %.field.ld.100, %else.195 ], [ null, %else.194 ]
  %call.167 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.628.0), !dbg !911
  %1 = ptrtoint i8* %call.167 to i64, !dbg !911
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.87, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.626.sroa.3.0.copyload38), !dbg !913
  %tmpv.625.sroa.3.sroa.0.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.87, i64 0, i32 1, i32 0, !dbg !913
  %tmpv.625.sroa.3.sroa.0.0.copyload14 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.625.sroa.3.sroa.0.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx, align 8, !dbg !913
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.625.sroa.3.sroa.0.0.copyload14, metadata !914, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !915
  %icmp.220 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.625.sroa.3.sroa.0.0.copyload14, null, !dbg !916
  br i1 %icmp.220, label %else.196, label %then.196

else.195:                                         ; preds = %else.194
  %field.841 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.626.sroa.0.0.copyload, i64 0, i32 0, !dbg !911
  %.field.ld.100 = load %_type.0*, %_type.0** %field.841, align 8, !dbg !911
  br label %fallthrough.195

then.196:                                         ; preds = %fallthrough.195
  %tmpv.625.sroa.3.sroa.3.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx15 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.87, i64 0, i32 1, i32 1, !dbg !913
  %2 = bitcast i8** %tmpv.625.sroa.3.sroa.3.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx15 to i64*, !dbg !913
  %tmpv.625.sroa.3.sroa.3.0.copyload1640 = load i64, i64* %2, align 8, !dbg !913
  call void @llvm.dbg.value(metadata i8** %tmpv.625.sroa.3.sroa.3.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx15, metadata !914, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !915
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !909, metadata !DIExpression()), !dbg !910
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.625.sroa.3.sroa.0.0.copyload14, metadata !917, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !918
  call void @llvm.dbg.value(metadata i8** %tmpv.625.sroa.3.sroa.3.0.tmpv.625.sroa.3.0.cast.2174.sroa_cast.sroa_idx15, metadata !917, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !918
  %tmp.175.sroa.0.0.cast.2186.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.13, i64 0, i32 0, !dbg !919
  store %Value.0* null, %Value.0** %tmp.175.sroa.0.0.cast.2186.sroa_idx, align 8, !dbg !919
  %tmp.175.sroa.2.0.cast.2186.sroa_idx34 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.13, i64 0, i32 1, i32 0, !dbg !919
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.625.sroa.3.sroa.0.0.copyload14, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.175.sroa.2.0.cast.2186.sroa_idx34, align 8, !dbg !919
  %tmp.175.sroa.3.0.cast.2186.sroa_idx35 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.13, i64 0, i32 1, i32 1, !dbg !919
  %3 = bitcast i8** %tmp.175.sroa.3.0.cast.2186.sroa_idx35 to i64*, !dbg !919
  store i64 %tmpv.625.sroa.3.sroa.3.0.copyload1640, i64* %3, align 8, !dbg !919
  ret void, !dbg !919

else.196:                                         ; preds = %fallthrough.195
  %4 = bitcast { %Value.0*, %error.0 }* %sret.actual.87 to i64*, !dbg !913
  %tmpv.625.sroa.0.0.copyload239 = load i64, i64* %4, align 8, !dbg !913
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.87, metadata !920, metadata !DIExpression(DW_OP_deref)), !dbg !915
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.87, metadata !909, metadata !DIExpression(DW_OP_deref)), !dbg !910
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !917, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !918
  call void @llvm.dbg.value(metadata i8* null, metadata !917, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !918
  %5 = bitcast { %Value.0*, %error.0 }* %sret.formal.13 to i64*, !dbg !921
  store i64 %tmpv.625.sroa.0.0.copyload239, i64* %5, align 8, !dbg !921
  %tmp.176.sroa.2.0.cast.2195.sroa_idx36 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.13, i64 0, i32 1, i32 0, !dbg !921
  %6 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.176.sroa.2.0.cast.2195.sroa_idx36 to i8*, !dbg !921
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false), !dbg !921
  ret void, !dbg !921
}

; Function Attrs: nounwind
define void @command_line_arguments.Context.evalFuncDecl({ %Value.0*, %error.0 }* nocapture sret %sret.formal.3, i8* nest nocapture readnone %nest.7, %Context.0* nocapture readnone %c, i64 %decl.chunk0, i64 %decl.chunk1) #4 !dbg !922 {
entry:
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !923, metadata !DIExpression()), !dbg !924
  call void @llvm.dbg.value(metadata i64 %decl.chunk0, metadata !925, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !926
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !925, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !926
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !927, metadata !DIExpression()), !dbg !928
  call void @llvm.dbg.value(metadata %Value.0* @command_line_arguments.False, metadata !927, metadata !DIExpression()), !dbg !928
  %tmp.27.sroa.0.0.cast.551.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.3, i64 0, i32 0, !dbg !929
  store %Value.0* @command_line_arguments.False, %Value.0** %tmp.27.sroa.0.0.cast.551.sroa_idx, align 8, !dbg !929
  %tmp.27.sroa.2.0.cast.551.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.3, i64 0, i32 1, !dbg !929
  %tmp.27.sroa.2.0.cast.551.sroa_cast = bitcast %error.0* %tmp.27.sroa.2.0.cast.551.sroa_idx to i8*, !dbg !929
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.27.sroa.2.0.cast.551.sroa_cast, i8 0, i64 16, i1 false), !dbg !929
  ret void, !dbg !929
}

; Function Attrs: nounwind
define void @command_line_arguments.Context.evalGenDecl({ %Value.0*, %error.0 }* nocapture sret %sret.formal.4, i8* nest nocapture readnone %nest.8, %Context.0* nocapture readnone %c, i64 %decl.chunk0, i64 %decl.chunk1) #4 !dbg !930 {
entry:
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !931, metadata !DIExpression()), !dbg !932
  call void @llvm.dbg.value(metadata i64 %decl.chunk0, metadata !933, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !934
  call void @llvm.dbg.value(metadata i64 %decl.chunk1, metadata !933, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !934
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !935, metadata !DIExpression()), !dbg !936
  call void @llvm.dbg.value(metadata %Value.0* @command_line_arguments.False, metadata !935, metadata !DIExpression()), !dbg !936
  %tmp.28.sroa.0.0.cast.562.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.4, i64 0, i32 0, !dbg !937
  store %Value.0* @command_line_arguments.False, %Value.0** %tmp.28.sroa.0.0.cast.562.sroa_idx, align 8, !dbg !937
  %tmp.28.sroa.2.0.cast.562.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.4, i64 0, i32 1, !dbg !937
  %tmp.28.sroa.2.0.cast.562.sroa_cast = bitcast %error.0* %tmp.28.sroa.2.0.cast.562.sroa_idx to i8*, !dbg !937
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.28.sroa.2.0.cast.562.sroa_cast, i8 0, i64 16, i1 false), !dbg !937
  ret void, !dbg !937
}

define void @command_line_arguments.Context.evalIdent({ %Value.0*, %error.0 }* nocapture sret %sret.formal.8, i8* nest nocapture readnone %nest.14, %Context.0* readonly %c, i64 %e.chunk0, i64 %e.chunk1) #0 !dbg !938 {
entry:
  %tmp.88 = alloca %IPST.1, align 8
  %tmp.86 = alloca %IPST.1, align 8
  %tmp.84 = alloca %IPST.1, align 8
  %tmp.81 = alloca %IPST.1, align 8
  %tmp.78 = alloca %IPST.1, align 8
  %tmpv.327 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.331 = alloca { i8*, i64 }, align 8
  %tmpv.340 = alloca [2 x { %_type.0*, i8* }], align 8
  %tmpv.344 = alloca %Value.0, align 8
  %sret.actual.54 = alloca %Value.0, align 8
  %tmpv.349 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.355 = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %tmpv.356 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.358 = alloca { i8*, i64 }, align 8
  %tmpv.361 = alloca { i8*, i64 }, align 8
  %tmpv.362 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.366 = alloca %EvalError.0, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !939, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.value(metadata i64 %e.chunk0, metadata !941, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !942
  call void @llvm.dbg.value(metadata i64 %e.chunk1, metadata !941, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !942
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !943, metadata !DIExpression()), !dbg !944
  call void @llvm.dbg.value(metadata %Ident.0* null, metadata !945, metadata !DIExpression()), !dbg !947
  call void @llvm.dbg.value(metadata i8 0, metadata !948, metadata !DIExpression()), !dbg !947
  %call.83 = call { i64, i8 } @runtime.ifaceI2T2P(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.Ident, i64 0, i32 0), i64 %e.chunk0, i64 %e.chunk1), !dbg !949
  %call.83.fca.0.extract = extractvalue { i64, i8 } %call.83, 0, !dbg !949
  %call.83.fca.1.extract = extractvalue { i64, i8 } %call.83, 1, !dbg !949
  %cast.1199 = inttoptr i64 %call.83.fca.0.extract to %Ident.0*, !dbg !949
  call void @llvm.dbg.value(metadata %Ident.0* %cast.1199, metadata !945, metadata !DIExpression()), !dbg !947
  call void @llvm.dbg.value(metadata i8 %call.83.fca.1.extract, metadata !948, metadata !DIExpression()), !dbg !947
  %icmp.125 = icmp eq i8 %call.83.fca.1.extract, 0, !dbg !950
  br i1 %icmp.125, label %then.96, label %else.96

then.96:                                          ; preds = %entry
  %icmp.122 = icmp eq i64 %e.chunk0, 0, !dbg !951
  br i1 %icmp.122, label %fallthrough.97, label %else.97

else.96:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i8 0, metadata !952, metadata !DIExpression()), !dbg !954
  %icmp.126 = icmp eq i64 %call.83.fca.0.extract, 0, !dbg !955
  br i1 %icmp.126, label %then.100, label %else.100

fallthrough.97:                                   ; preds = %then.96, %else.97
  %tmpv.326.0 = phi i64 [ %.field.ld.4147, %else.97 ], [ 0, %then.96 ]
  %call.84 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 %tmpv.326.0, i64 %e.chunk1), !dbg !956
  %call.84.fca.0.extract = extractvalue { i64, i64 } %call.84, 0, !dbg !956
  %call.84.fca.1.extract = extractvalue { i64, i64 } %call.84, 1, !dbg !956
  %icmp.123 = icmp eq i64 %call.84.fca.0.extract, 0, !dbg !956
  br i1 %icmp.123, label %fallthrough.98, label %else.98

else.97:                                          ; preds = %then.96
  %0 = inttoptr i64 %e.chunk0 to i64*, !dbg !951
  %.field.ld.4147 = load i64, i64* %0, align 8, !dbg !951
  br label %fallthrough.97

fallthrough.98:                                   ; preds = %fallthrough.97, %else.98
  %tmpv.328.0 = phi %_type.0* [ %.field.ld.42, %else.98 ], [ null, %fallthrough.97 ]
  %1 = inttoptr i64 %call.84.fca.1.extract to i8*, !dbg !957
  %tmp.77.sroa.0.0.cast.1208.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.327, i64 0, i64 0, i32 0, !dbg !957
  store %_type.0* %tmpv.328.0, %_type.0** %tmp.77.sroa.0.0.cast.1208.sroa_idx, align 8, !dbg !957
  %tmp.77.sroa.2.0.cast.1208.sroa_idx36 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.327, i64 0, i64 0, i32 1, !dbg !957
  store i8* %1, i8** %tmp.77.sroa.2.0.cast.1208.sroa_idx36, align 8, !dbg !957
  %field.386 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.78, i64 0, i32 0, !dbg !957
  %cast.1211 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.327, i64 0, i64 0, !dbg !957
  store { %_type.0*, i8* }* %cast.1211, { %_type.0*, i8* }** %field.386, align 8, !dbg !957
  %field.387 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.78, i64 0, i32 1, !dbg !957
  store i64 1, i64* %field.387, align 8, !dbg !957
  %field.388 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.78, i64 0, i32 2, !dbg !957
  store i64 1, i64* %field.388, align 8, !dbg !957
  %call.85 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([42 x i8]* @const.159 to i64), i64 41, %IPST.1* byval nonnull %tmp.78), !dbg !957
  %call.85.fca.0.extract = extractvalue { i64, i64 } %call.85, 0, !dbg !957
  %call.85.fca.1.extract = extractvalue { i64, i64 } %call.85, 1, !dbg !957
  %icmp.124 = icmp eq i64 %call.85.fca.0.extract, 0, !dbg !957
  br i1 %icmp.124, label %fallthrough.99, label %else.99

else.98:                                          ; preds = %fallthrough.97
  %2 = inttoptr i64 %call.84.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !956
  %field.382 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %2, i64 0, i32 0, !dbg !956
  %.field.ld.42 = load %_type.0*, %_type.0** %field.382, align 8, !dbg !956
  br label %fallthrough.98

fallthrough.99:                                   ; preds = %fallthrough.98, %else.99
  %tmpv.330.0 = phi i64 [ %.field.ld.4348, %else.99 ], [ 0, %fallthrough.98 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.330.0, i64 %call.85.fca.1.extract), !dbg !958
  unreachable

else.99:                                          ; preds = %fallthrough.98
  %3 = inttoptr i64 %call.85.fca.0.extract to i64*, !dbg !957
  %.field.ld.4348 = load i64, i64* %3, align 8, !dbg !957
  br label %fallthrough.99

then.100:                                         ; preds = %else.96
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !955
  unreachable

else.100:                                         ; preds = %else.96
  %field.395 = getelementptr inbounds %Ident.0, %Ident.0* %cast.1199, i64 0, i32 1, !dbg !955
  %cast.1221 = bitcast { i8*, i64 }* %tmpv.331 to i8*
  %cast.1222 = bitcast { i8*, i64 }* %field.395 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1221, i8* nonnull align 8 %cast.1222, i64 16, i1 false)
  %icmp.127 = icmp eq %Context.0* %c, null, !dbg !959
  br i1 %icmp.127, label %then.101, label %else.101

then.101:                                         ; preds = %else.100
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !959
  unreachable

else.101:                                         ; preds = %else.100
  %field.396 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 1, !dbg !959
  %.field.ld.44 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.396, align 8, !dbg !959
  %call.86 = call { i64, i8 } @runtime.mapaccess2(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.44, i8* nonnull %cast.1221), !dbg !960
  %call.86.fca.0.extract = extractvalue { i64, i8 } %call.86, 0, !dbg !960
  %call.86.fca.1.extract = extractvalue { i64, i8 } %call.86, 1, !dbg !960
  %cast.1231 = inttoptr i64 %call.86.fca.0.extract to { %_type.0*, i8* }*, !dbg !960
  %val.sroa.0.0.cast.1233.sroa_cast = inttoptr i64 %call.86.fca.0.extract to i64*, !dbg !960
  %val.sroa.0.0.copyload7 = load i64, i64* %val.sroa.0.0.cast.1233.sroa_cast, align 8, !dbg !960
  call void @llvm.dbg.value(metadata i64 %val.sroa.0.0.copyload7, metadata !961, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !954
  %val.sroa.7.0.cast.1233.sroa_idx11 = getelementptr inbounds { %_type.0*, i8* }, { %_type.0*, i8* }* %cast.1231, i64 0, i32 1, !dbg !960
  %val.sroa.7.0.cast.1233.sroa_cast = bitcast i8** %val.sroa.7.0.cast.1233.sroa_idx11 to i64*, !dbg !960
  %val.sroa.7.0.copyload12 = load i64, i64* %val.sroa.7.0.cast.1233.sroa_cast, align 8, !dbg !960
  call void @llvm.dbg.value(metadata i64 %val.sroa.7.0.copyload12, metadata !961, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !954
  call void @llvm.dbg.value(metadata i8 %call.86.fca.1.extract, metadata !952, metadata !DIExpression()), !dbg !954
  %4 = and i8 %call.86.fca.1.extract, 1, !dbg !962
  %trunc.117 = icmp eq i8 %4, 0, !dbg !962
  %command_line_arguments.PkgLogger.field.ld.8 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !963
  %field.420 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.8, i64 0, i32 1, !dbg !963
  %.field.ld.48 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.420, align 8, !dbg !963
  %command_line_arguments.PkgLogger.field.ld.9 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !963
  br i1 %trunc.117, label %else.102, label %then.102

then.102:                                         ; preds = %else.101
  %call.87 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0)), !dbg !965
  %icmp.128 = icmp eq i64 %e.chunk0, 0, !dbg !966
  br i1 %icmp.128, label %fallthrough.103, label %else.103

else.102:                                         ; preds = %else.101
  %call.89 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !967
  %5 = inttoptr i64 %e.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !968
  %icmp.131 = icmp eq i64 %e.chunk0, 0, !dbg !968
  br i1 %icmp.131, label %fallthrough.106, label %else.106

fallthrough.103:                                  ; preds = %then.102, %else.103
  %tmpv.341.0 = phi %_type.0* [ %.field.ld.45, %else.103 ], [ null, %then.102 ]
  %6 = inttoptr i64 %e.chunk1 to i8*, !dbg !965
  %val.sroa.0.0.cast.1241.sroa_cast = bitcast [2 x { %_type.0*, i8* }]* %tmpv.340 to i64*, !dbg !965
  store i64 %val.sroa.0.0.copyload7, i64* %val.sroa.0.0.cast.1241.sroa_cast, align 8, !dbg !965
  %val.sroa.7.0.cast.1241.sroa_idx13 = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.340, i64 0, i64 0, i32 1, !dbg !965
  %val.sroa.7.0.cast.1241.sroa_cast = bitcast i8** %val.sroa.7.0.cast.1241.sroa_idx13 to i64*, !dbg !965
  store i64 %val.sroa.7.0.copyload12, i64* %val.sroa.7.0.cast.1241.sroa_cast, align 8, !dbg !965
  %tmp.80.sroa.0.0.cast.1243.sroa_idx = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.340, i64 0, i64 1, i32 0, !dbg !965
  store %_type.0* %tmpv.341.0, %_type.0** %tmp.80.sroa.0.0.cast.1243.sroa_idx, align 8, !dbg !965
  %tmp.80.sroa.2.0.cast.1243.sroa_idx37 = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.340, i64 0, i64 1, i32 1, !dbg !965
  store i8* %6, i8** %tmp.80.sroa.2.0.cast.1243.sroa_idx37, align 8, !dbg !965
  %cast.1247 = bitcast [2 x { %_type.0*, i8* }]* %tmpv.340 to i8*, !dbg !965
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0), i8* %call.87, i8* nonnull %cast.1247), !dbg !965
  %7 = bitcast %IPST.1* %tmp.81 to i8**, !dbg !965
  store i8* %call.87, i8** %7, align 8, !dbg !965
  %field.409 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.81, i64 0, i32 1, !dbg !965
  store i64 2, i64* %field.409, align 8, !dbg !965
  %field.410 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.81, i64 0, i32 2, !dbg !965
  store i64 2, i64* %field.410, align 8, !dbg !965
  call void %.field.ld.48(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.9, i64 ptrtoint ([31 x i8]* @const.161 to i64), i64 30, %IPST.1* byval nonnull %tmp.81), !dbg !965
  %call.88 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !969
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.54, i8* nest undef, i64 %val.sroa.0.0.copyload7, i64 %val.sroa.7.0.copyload12), !dbg !970
  %cast.1253 = bitcast %Value.0* %tmpv.344 to i8*
  %cast.1254 = bitcast %Value.0* %sret.actual.54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1253, i8* nonnull align 8 %cast.1254, i64 24, i1 false)
  %runtime.writeBarrier.ld.13 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !970
  %icmp.130 = icmp eq i32 %runtime.writeBarrier.ld.13, 0, !dbg !970
  br i1 %icmp.130, label %then.104, label %else.104

else.103:                                         ; preds = %then.102
  %8 = inttoptr i64 %e.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !966
  %field.401 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %8, i64 0, i32 0, !dbg !966
  %.field.ld.45 = load %_type.0*, %_type.0** %field.401, align 8, !dbg !966
  br label %fallthrough.103

then.104:                                         ; preds = %fallthrough.103
  call void @llvm.dbg.value(metadata i8* %call.88, metadata !971, metadata !DIExpression()), !dbg !972
  %icmp.129 = icmp eq i8* %call.88, null, !dbg !970
  br i1 %icmp.129, label %then.105, label %else.105

fallthrough.104:                                  ; preds = %else.104, %else.105
  call void @llvm.dbg.value(metadata i8* %call.88, metadata !943, metadata !DIExpression()), !dbg !944
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !973, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !974
  call void @llvm.dbg.value(metadata i8* null, metadata !973, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !974
  %9 = bitcast { %Value.0*, %error.0 }* %sret.formal.8 to i8**, !dbg !975
  store i8* %call.88, i8** %9, align 8, !dbg !975
  %tmp.82.sroa.2.0.cast.1267.sroa_idx38 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.8, i64 0, i32 1, i32 0, !dbg !975
  %10 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.82.sroa.2.0.cast.1267.sroa_idx38 to i8*, !dbg !975
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false), !dbg !975
  ret void, !dbg !975

else.104:                                         ; preds = %fallthrough.103
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.88, i8* nonnull %cast.1253), !dbg !970
  br label %fallthrough.104

then.105:                                         ; preds = %then.104
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !970
  unreachable

else.105:                                         ; preds = %then.104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.88, i8* nonnull align 8 %cast.1253, i64 24, i1 false), !dbg !970
  br label %fallthrough.104

fallthrough.106:                                  ; preds = %else.102, %else.106
  %tmpv.350.0 = phi %_type.0* [ %.field.ld.47, %else.106 ], [ null, %else.102 ]
  %11 = inttoptr i64 %e.chunk1 to i8*, !dbg !967
  %tmp.83.sroa.0.0.cast.1273.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.349, i64 0, i64 0, i32 0, !dbg !967
  store %_type.0* %tmpv.350.0, %_type.0** %tmp.83.sroa.0.0.cast.1273.sroa_idx, align 8, !dbg !967
  %tmp.83.sroa.2.0.cast.1273.sroa_idx40 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.349, i64 0, i64 0, i32 1, !dbg !967
  store i8* %11, i8** %tmp.83.sroa.2.0.cast.1273.sroa_idx40, align 8, !dbg !967
  %cast.1277 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.349 to i8*, !dbg !967
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.89, i8* nonnull %cast.1277), !dbg !967
  %12 = bitcast %IPST.1* %tmp.84 to i8**, !dbg !967
  store i8* %call.89, i8** %12, align 8, !dbg !967
  %field.423 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.84, i64 0, i32 1, !dbg !967
  store i64 1, i64* %field.423, align 8, !dbg !967
  %field.424 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.84, i64 0, i32 2, !dbg !967
  store i64 1, i64* %field.424, align 8, !dbg !967
  call void %.field.ld.48(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.9, i64 ptrtoint ([16 x i8]* @const.164 to i64), i64 15, %IPST.1* byval nonnull %tmp.84), !dbg !967
  %13 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.396 to i64*, !dbg !976
  %.field.ld.4946 = load i64, i64* %13, align 8, !dbg !976
  %command_line_arguments.PkgLogger.field.ld.10 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !977
  %field.429 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.10, i64 0, i32 1, !dbg !977
  %.field.ld.50 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.429, align 8, !dbg !977
  %command_line_arguments.PkgLogger.field.ld.11 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !977
  %call.90 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !977
  %call.91 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0)), !dbg !977
  %14 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.355 to i64*
  store i64 %.field.ld.4946, i64* %14, align 8
  %cast.1287 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.355 to i8*, !dbg !977
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), i8* %call.91, i8* nonnull %cast.1287), !dbg !977
  %tmp.85.sroa.0.0.cast.1290.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.356, i64 0, i64 0, i32 0, !dbg !977
  store %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), %_type.0** %tmp.85.sroa.0.0.cast.1290.sroa_idx, align 8, !dbg !977
  %tmp.85.sroa.2.0.cast.1290.sroa_idx41 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.356, i64 0, i64 0, i32 1, !dbg !977
  store i8* %call.91, i8** %tmp.85.sroa.2.0.cast.1290.sroa_idx41, align 8, !dbg !977
  %cast.1294 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.356 to i8*, !dbg !977
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.90, i8* nonnull %cast.1294), !dbg !977
  %15 = bitcast %IPST.1* %tmp.86 to i8**, !dbg !977
  store i8* %call.90, i8** %15, align 8, !dbg !977
  %field.432 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.86, i64 0, i32 1, !dbg !977
  store i64 1, i64* %field.432, align 8, !dbg !977
  %field.433 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.86, i64 0, i32 2, !dbg !977
  store i64 1, i64* %field.433, align 8, !dbg !977
  call void %.field.ld.50(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.11, i64 ptrtoint ([16 x i8]* @const.164 to i64), i64 15, %IPST.1* byval nonnull %tmp.86), !dbg !977
  %cast.1299 = bitcast { i8*, i64 }* %tmpv.358 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1299, i8* nonnull align 8 %cast.1222, i64 16, i1 false)
  %call.92 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !978
  %cast.1302 = bitcast { i8*, i64 }* %tmpv.361 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1302, i8* nonnull align 8 %cast.1299, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.92, i8* nonnull %cast.1302), !dbg !978
  %tmp.87.sroa.0.0.cast.1307.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.362, i64 0, i64 0, i32 0, !dbg !978
  store %_type.0* @string..d, %_type.0** %tmp.87.sroa.0.0.cast.1307.sroa_idx, align 8, !dbg !978
  %tmp.87.sroa.2.0.cast.1307.sroa_idx42 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.362, i64 0, i64 0, i32 1, !dbg !978
  store i8* %call.92, i8** %tmp.87.sroa.2.0.cast.1307.sroa_idx42, align 8, !dbg !978
  %field.437 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.88, i64 0, i32 0, !dbg !978
  %cast.1312 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.362, i64 0, i64 0, !dbg !978
  store { %_type.0*, i8* }* %cast.1312, { %_type.0*, i8* }** %field.437, align 8, !dbg !978
  %field.438 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.88, i64 0, i32 1, !dbg !978
  store i64 1, i64* %field.438, align 8, !dbg !978
  %field.439 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.88, i64 0, i32 2, !dbg !978
  store i64 1, i64* %field.439, align 8, !dbg !978
  %call.93 = call { i64, i64 } @fmt.Sprintf(i8* nest undef, i64 ptrtoint ([19 x i8]* @const.168 to i64), i64 18, %IPST.1* byval nonnull %tmp.88), !dbg !978
  %call.93.fca.0.extract = extractvalue { i64, i64 } %call.93, 0, !dbg !978
  %call.93.fca.1.extract = extractvalue { i64, i64 } %call.93, 1, !dbg !978
  %call.94 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !979
  br i1 %icmp.131, label %fallthrough.109, label %else.109

else.106:                                         ; preds = %else.102
  %field.415 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %5, i64 0, i32 0, !dbg !968
  %.field.ld.47 = load %_type.0*, %_type.0** %field.415, align 8, !dbg !968
  br label %fallthrough.106

fallthrough.109:                                  ; preds = %fallthrough.106, %else.109
  %tmpv.367.0 = phi %_type.0* [ %.field.ld.51, %else.109 ], [ null, %fallthrough.106 ]
  %call.95 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.367.0), !dbg !980
  %16 = bitcast %EvalError.0* %tmpv.366 to i8**, !dbg !980
  store i8* %call.95, i8** %16, align 8, !dbg !980
  %tmp.89.sroa.2.0.cast.1323.sroa_idx43 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.366, i64 0, i32 0, i32 1, !dbg !980
  store i8* %11, i8** %tmp.89.sroa.2.0.cast.1323.sroa_idx43, align 8, !dbg !980
  %field.447 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.366, i64 0, i32 1, !dbg !980
  %cast.1325 = bitcast { i8*, i64 }* %field.447 to i8*, !dbg !980
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1325, i8* align 8 bitcast ({ i8*, i64 }* @const.167 to i8*), i64 16, i1 false), !dbg !980
  %tmpv.364.sroa.0.0.cast.1327.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.366, i64 0, i32 2, !dbg !980
  %tmpv.364.sroa.0.0.cast.1327.sroa_cast = bitcast { i8*, i64 }* %tmpv.364.sroa.0.0.cast.1327.sroa_idx to i64*, !dbg !980
  store i64 %call.93.fca.0.extract, i64* %tmpv.364.sroa.0.0.cast.1327.sroa_cast, align 8, !dbg !980
  %tmpv.364.sroa.2.0.cast.1327.sroa_idx5 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.366, i64 0, i32 2, i32 1, !dbg !980
  store i64 %call.93.fca.1.extract, i64* %tmpv.364.sroa.2.0.cast.1327.sroa_idx5, align 8, !dbg !980
  %cast.1331 = bitcast %EvalError.0* %tmpv.366 to i8*, !dbg !979
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.94, i8* nonnull %cast.1331), !dbg !979
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !943, metadata !DIExpression()), !dbg !944
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), metadata !973, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !974
  call void @llvm.dbg.value(metadata i8* %call.94, metadata !973, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !974
  %tmp.90.sroa.0.0.cast.1338.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.8, i64 0, i32 0, !dbg !979
  store %Value.0* null, %Value.0** %tmp.90.sroa.0.0.cast.1338.sroa_idx, align 8, !dbg !979
  %tmp.90.sroa.2.0.cast.1338.sroa_idx44 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.8, i64 0, i32 1, i32 0, !dbg !979
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.90.sroa.2.0.cast.1338.sroa_idx44, align 8, !dbg !979
  %tmp.90.sroa.3.0.cast.1338.sroa_idx45 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.8, i64 0, i32 1, i32 1, !dbg !979
  store i8* %call.94, i8** %tmp.90.sroa.3.0.cast.1338.sroa_idx45, align 8, !dbg !979
  ret void, !dbg !979

else.109:                                         ; preds = %fallthrough.106
  %field.442 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %5, i64 0, i32 0, !dbg !981
  %.field.ld.51 = load %_type.0*, %_type.0** %field.442, align 8, !dbg !981
  br label %fallthrough.109
}

define void @command_line_arguments.Context.evalIfStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.16, i8* nest nocapture readnone %nest.25, %Context.0* %c, %IfStmt.0* readonly %e) #0 !dbg !982 {
entry:
  %sret.actual.91 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.92 = alloca { %Value.0*, %error.0 }, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !993, metadata !DIExpression()), !dbg !994
  call void @llvm.dbg.value(metadata %IfStmt.0* %e, metadata !995, metadata !DIExpression()), !dbg !996
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !997, metadata !DIExpression()), !dbg !998
  %icmp.249 = icmp eq %IfStmt.0* %e, null, !dbg !999
  br i1 %icmp.249, label %then.221, label %else.221

then.221:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !999
  unreachable

else.221:                                         ; preds = %entry
  %tmpv.697.sroa.0.0.cast.2358.sroa_idx = getelementptr inbounds %IfStmt.0, %IfStmt.0* %e, i64 0, i32 2, i32 0
  %tmpv.697.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.697.sroa.0.0.cast.2358.sroa_idx, align 8
  %tmpv.697.sroa.3.0.cast.2358.sroa_idx19 = getelementptr inbounds %IfStmt.0, %IfStmt.0* %e, i64 0, i32 2, i32 1
  %0 = bitcast i8** %tmpv.697.sroa.3.0.cast.2358.sroa_idx19 to i64*
  %tmpv.697.sroa.3.0.copyload81 = load i64, i64* %0, align 8
  %icmp.250 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.697.sroa.0.0.copyload, null, !dbg !999
  br i1 %icmp.250, label %fallthrough.222, label %else.222

fallthrough.222:                                  ; preds = %else.221, %else.222
  %tmpv.699.0 = phi %_type.0* [ %.field.ld.107, %else.222 ], [ null, %else.221 ]
  %call.174 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.699.0), !dbg !999
  %1 = ptrtoint i8* %call.174 to i64, !dbg !999
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.91, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.697.sroa.3.0.copyload81), !dbg !1001
  %tmpv.696.sroa.3.sroa.0.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.91, i64 0, i32 1, i32 0, !dbg !1001
  %tmpv.696.sroa.3.sroa.0.0.copyload36 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.696.sroa.3.sroa.0.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx, align 8, !dbg !1001
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.696.sroa.3.sroa.0.0.copyload36, metadata !1002, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1003
  %icmp.251 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.696.sroa.3.sroa.0.0.copyload36, null, !dbg !1004
  br i1 %icmp.251, label %else.223, label %then.223

else.222:                                         ; preds = %else.221
  %field.926 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.697.sroa.0.0.copyload, i64 0, i32 0, !dbg !999
  %.field.ld.107 = load %_type.0*, %_type.0** %field.926, align 8, !dbg !999
  br label %fallthrough.222

then.223:                                         ; preds = %fallthrough.222
  %tmpv.696.sroa.3.sroa.3.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx37 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.91, i64 0, i32 1, i32 1, !dbg !1001
  %2 = bitcast i8** %tmpv.696.sroa.3.sroa.3.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx37 to i64*, !dbg !1001
  %tmpv.696.sroa.3.sroa.3.0.copyload3882 = load i64, i64* %2, align 8, !dbg !1001
  call void @llvm.dbg.value(metadata i8** %tmpv.696.sroa.3.sroa.3.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx37, metadata !1002, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1003
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !997, metadata !DIExpression()), !dbg !998
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.696.sroa.3.sroa.0.0.copyload36, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1006
  call void @llvm.dbg.value(metadata i8** %tmpv.696.sroa.3.sroa.3.0.tmpv.696.sroa.3.0.cast.2365.sroa_cast.sroa_idx37, metadata !1005, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1006
  %tmp.188.sroa.0.0.cast.2377.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 0, !dbg !1007
  store %Value.0* null, %Value.0** %tmp.188.sroa.0.0.cast.2377.sroa_idx, align 8, !dbg !1007
  %tmp.188.sroa.2.0.cast.2377.sroa_idx73 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 0, !dbg !1007
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.696.sroa.3.sroa.0.0.copyload36, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.188.sroa.2.0.cast.2377.sroa_idx73, align 8, !dbg !1007
  %tmp.188.sroa.3.0.cast.2377.sroa_idx74 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 1, !dbg !1007
  %3 = bitcast i8** %tmp.188.sroa.3.0.cast.2377.sroa_idx74 to i64*, !dbg !1007
  store i64 %tmpv.696.sroa.3.sroa.3.0.copyload3882, i64* %3, align 8, !dbg !1007
  ret void, !dbg !1007

else.223:                                         ; preds = %fallthrough.222
  %tmpv.696.sroa.0.0.cast.2365.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.91, i64 0, i32 0, !dbg !1001
  %tmpv.696.sroa.0.0.copyload20 = load %Value.0*, %Value.0** %tmpv.696.sroa.0.0.cast.2365.sroa_idx, align 8, !dbg !1001
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.696.sroa.0.0.copyload20, metadata !1008, metadata !DIExpression()), !dbg !1003
  %call.175 = call i8 @reflect.Value.Bool(i8* nest undef, %Value.0* %tmpv.696.sroa.0.0.copyload20), !dbg !1009
  %4 = and i8 %call.175, 1, !dbg !1010
  %trunc.238 = icmp eq i8 %4, 0, !dbg !1010
  br i1 %trunc.238, label %else.224, label %else.225

else.224:                                         ; preds = %else.223
  call void @llvm.dbg.value(metadata %Value.0* @command_line_arguments.False, metadata !997, metadata !DIExpression()), !dbg !998
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1006
  call void @llvm.dbg.value(metadata i8* null, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1006
  %tmp.192.sroa.0.0.cast.2417.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 0, !dbg !1011
  store %Value.0* @command_line_arguments.False, %Value.0** %tmp.192.sroa.0.0.cast.2417.sroa_idx, align 8, !dbg !1011
  %tmp.192.sroa.2.0.cast.2417.sroa_idx79 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 0, !dbg !1011
  %5 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.192.sroa.2.0.cast.2417.sroa_idx79 to i8*, !dbg !1011
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false), !dbg !1011
  ret void, !dbg !1011

else.225:                                         ; preds = %else.223
  %field.935 = getelementptr inbounds %IfStmt.0, %IfStmt.0* %e, i64 0, i32 3, !dbg !1012
  %6 = bitcast %BlockStmt.0** %field.935 to i64*, !dbg !1012
  %.field.ld.1088384 = load i64, i64* %6, align 8, !dbg !1012
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.92, i8* nest undef, %Context.0* %c, i64 ptrtoint ({ %_type.0*, i64 (i8*, %BlockStmt.0*)*, i64 (i8*, %BlockStmt.0*)* }* @pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt to i64), i64 %.field.ld.1088384), !dbg !1014
  %tmpv.704.sroa.3.sroa.0.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.92, i64 0, i32 1, i32 0, !dbg !1014
  %tmpv.704.sroa.3.sroa.0.0.copyload14 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.704.sroa.3.sroa.0.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx, align 8, !dbg !1014
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.704.sroa.3.sroa.0.0.copyload14, metadata !1015, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1016
  %icmp.253 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.704.sroa.3.sroa.0.0.copyload14, null, !dbg !1017
  br i1 %icmp.253, label %else.226, label %then.226

then.226:                                         ; preds = %else.225
  %tmpv.704.sroa.3.sroa.3.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx15 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.92, i64 0, i32 1, i32 1, !dbg !1014
  %7 = bitcast i8** %tmpv.704.sroa.3.sroa.3.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx15 to i64*, !dbg !1014
  %tmpv.704.sroa.3.sroa.3.0.copyload1686 = load i64, i64* %7, align 8, !dbg !1014
  call void @llvm.dbg.value(metadata i8** %tmpv.704.sroa.3.sroa.3.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx15, metadata !1015, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1016
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !997, metadata !DIExpression()), !dbg !998
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.704.sroa.3.sroa.0.0.copyload14, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1006
  call void @llvm.dbg.value(metadata i8** %tmpv.704.sroa.3.sroa.3.0.tmpv.704.sroa.3.0.cast.2388.sroa_cast.sroa_idx15, metadata !1005, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1006
  %tmp.190.sroa.0.0.cast.2400.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 0, !dbg !1018
  store %Value.0* null, %Value.0** %tmp.190.sroa.0.0.cast.2400.sroa_idx, align 8, !dbg !1018
  %tmp.190.sroa.2.0.cast.2400.sroa_idx75 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 0, !dbg !1018
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.704.sroa.3.sroa.0.0.copyload14, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.190.sroa.2.0.cast.2400.sroa_idx75, align 8, !dbg !1018
  %tmp.190.sroa.3.0.cast.2400.sroa_idx76 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 1, !dbg !1018
  %8 = bitcast i8** %tmp.190.sroa.3.0.cast.2400.sroa_idx76 to i64*, !dbg !1018
  store i64 %tmpv.704.sroa.3.sroa.3.0.copyload1686, i64* %8, align 8, !dbg !1018
  ret void, !dbg !1018

else.226:                                         ; preds = %else.225
  %9 = bitcast { %Value.0*, %error.0 }* %sret.actual.92 to i64*, !dbg !1014
  %tmpv.704.sroa.0.0.copyload285 = load i64, i64* %9, align 8, !dbg !1014
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.92, metadata !1019, metadata !DIExpression(DW_OP_deref)), !dbg !1016
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.92, metadata !997, metadata !DIExpression(DW_OP_deref)), !dbg !998
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1006
  call void @llvm.dbg.value(metadata i8* null, metadata !1005, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1006
  %10 = bitcast { %Value.0*, %error.0 }* %sret.formal.16 to i64*, !dbg !1020
  store i64 %tmpv.704.sroa.0.0.copyload285, i64* %10, align 8, !dbg !1020
  %tmp.191.sroa.2.0.cast.2409.sroa_idx77 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.16, i64 0, i32 1, i32 0, !dbg !1020
  %11 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.191.sroa.2.0.cast.2409.sroa_idx77 to i8*, !dbg !1020
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 16, i1 false), !dbg !1020
  ret void, !dbg !1020
}

define void @command_line_arguments.Context.evalReturnStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.15, i8* nest nocapture readnone %nest.24, %Context.0* %c, %ReturnStmt.0* %e) #0 !dbg !1021 {
entry:
  %tmp.183 = alloca %IPST.1, align 8
  %tmpv.668 = alloca %EvalError.0, align 8
  %tmpv.677 = alloca [1 x { %_type.0*, i8* }], align 8
  %sret.actual.90 = alloca { %Value.0*, %error.0 }, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !1029, metadata !DIExpression()), !dbg !1030
  call void @llvm.dbg.value(metadata %ReturnStmt.0* %e, metadata !1031, metadata !DIExpression()), !dbg !1032
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1033, metadata !DIExpression()), !dbg !1034
  %icmp.234 = icmp eq %ReturnStmt.0* %e, null, !dbg !1035
  br i1 %icmp.234, label %then.208, label %else.208

then.208:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1035
  unreachable

else.208:                                         ; preds = %entry
  %field.889 = getelementptr inbounds %ReturnStmt.0, %ReturnStmt.0* %e, i64 0, i32 1, i32 1, !dbg !1035
  %.field.field.ld.0 = load i64, i64* %field.889, align 8, !dbg !1035
  %icmp.235 = icmp eq i64 %.field.field.ld.0, 0, !dbg !1037
  br i1 %icmp.235, label %then.209, label %else.210

then.209:                                         ; preds = %else.208
  %call.170 = call { i64, i64 } @fmt.Sprintf(i8* nest undef, i64 ptrtoint ([28 x i8]* @const.215 to i64), i64 27, %IPST.1* byval nonnull @const.145), !dbg !1038
  %call.170.fca.0.extract = extractvalue { i64, i64 } %call.170, 0, !dbg !1038
  %call.170.fca.1.extract = extractvalue { i64, i64 } %call.170, 1, !dbg !1038
  %call.171 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !1039
  %tmp.180.sroa.0.0.cast.2277.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.668, i64 0, i32 0, i32 0, !dbg !1040
  store { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* bitcast ({ %_type.0*, i64 (i8*, %ReturnStmt.0*)*, i64 (i8*, %ReturnStmt.0*)* }* @pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*), { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }** %tmp.180.sroa.0.0.cast.2277.sroa_idx, align 8, !dbg !1040
  %tmp.180.sroa.2.0.cast.2277.sroa_idx55 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.668, i64 0, i32 0, i32 1, !dbg !1040
  %0 = bitcast i8** %tmp.180.sroa.2.0.cast.2277.sroa_idx55 to %ReturnStmt.0**, !dbg !1040
  store %ReturnStmt.0* %e, %ReturnStmt.0** %0, align 8, !dbg !1040
  %field.882 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.668, i64 0, i32 1, !dbg !1040
  %cast.2279 = bitcast { i8*, i64 }* %field.882 to i8*, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.2279, i8* align 8 bitcast ({ i8*, i64 }* @const.214 to i8*), i64 16, i1 false), !dbg !1040
  %tmpv.666.sroa.0.0.cast.2281.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.668, i64 0, i32 2, !dbg !1040
  %tmpv.666.sroa.0.0.cast.2281.sroa_cast = bitcast { i8*, i64 }* %tmpv.666.sroa.0.0.cast.2281.sroa_idx to i64*, !dbg !1040
  store i64 %call.170.fca.0.extract, i64* %tmpv.666.sroa.0.0.cast.2281.sroa_cast, align 8, !dbg !1040
  %tmpv.666.sroa.2.0.cast.2281.sroa_idx15 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.668, i64 0, i32 2, i32 1, !dbg !1040
  store i64 %call.170.fca.1.extract, i64* %tmpv.666.sroa.2.0.cast.2281.sroa_idx15, align 8, !dbg !1040
  %cast.2285 = bitcast %EvalError.0* %tmpv.668 to i8*, !dbg !1039
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.171, i8* nonnull %cast.2285), !dbg !1039
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1033, metadata !DIExpression()), !dbg !1034
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), metadata !1041, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1042
  call void @llvm.dbg.value(metadata i8* %call.171, metadata !1041, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1042
  %tmp.181.sroa.0.0.cast.2292.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 0, !dbg !1039
  store %Value.0* null, %Value.0** %tmp.181.sroa.0.0.cast.2292.sroa_idx, align 8, !dbg !1039
  %tmp.181.sroa.2.0.cast.2292.sroa_idx56 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 1, i32 0, !dbg !1039
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.181.sroa.2.0.cast.2292.sroa_idx56, align 8, !dbg !1039
  %tmp.181.sroa.3.0.cast.2292.sroa_idx57 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 1, i32 1, !dbg !1039
  store i8* %call.171, i8** %tmp.181.sroa.3.0.cast.2292.sroa_idx57, align 8, !dbg !1039
  ret void, !dbg !1039

else.210:                                         ; preds = %else.208
  %tmpv.671.sroa.0.0.cast.2297.sroa_idx = getelementptr inbounds %ReturnStmt.0, %ReturnStmt.0* %e, i64 0, i32 1, i32 0
  %tmpv.671.sroa.0.0.copyload = load %Expr.0*, %Expr.0** %tmpv.671.sroa.0.0.cast.2297.sroa_idx, align 8
  %icmp.237 = icmp slt i64 %.field.field.ld.0, 1, !dbg !1043
  br i1 %icmp.237, label %then.211, label %else.211

then.211:                                         ; preds = %else.210
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !1043
  unreachable

else.211:                                         ; preds = %else.210
  %tmpv.674.sroa.0.0.cast.2299.sroa_idx = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.671.sroa.0.0.copyload, i64 0, i32 0
  %tmpv.674.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.674.sroa.0.0.cast.2299.sroa_idx, align 8
  %tmpv.674.sroa.3.0.cast.2299.sroa_idx8 = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.671.sroa.0.0.copyload, i64 0, i32 1
  %1 = bitcast i8** %tmpv.674.sroa.3.0.cast.2299.sroa_idx8 to i64*
  %tmpv.674.sroa.3.0.copyload63 = load i64, i64* %1, align 8
  %command_line_arguments.PkgLogger.field.ld.37 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1044
  %field.900 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.37, i64 0, i32 1, !dbg !1044
  %.field.ld.105 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.900, align 8, !dbg !1044
  %command_line_arguments.PkgLogger.field.ld.38 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1044
  %call.172 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1044
  %icmp.239 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.674.sroa.0.0.copyload, null, !dbg !1044
  br i1 %icmp.239, label %fallthrough.212, label %else.212

fallthrough.212:                                  ; preds = %else.211, %else.212
  %tmpv.678.0 = phi %_type.0* [ %.field.ld.104, %else.212 ], [ null, %else.211 ]
  %tmp.182.sroa.0.0.cast.2304.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.677, i64 0, i64 0, i32 0, !dbg !1044
  store %_type.0* %tmpv.678.0, %_type.0** %tmp.182.sroa.0.0.cast.2304.sroa_idx, align 8, !dbg !1044
  %tmp.182.sroa.2.0.cast.2304.sroa_idx58 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.677, i64 0, i64 0, i32 1, !dbg !1044
  %2 = bitcast i8** %tmp.182.sroa.2.0.cast.2304.sroa_idx58 to i64*, !dbg !1044
  store i64 %tmpv.674.sroa.3.0.copyload63, i64* %2, align 8, !dbg !1044
  %cast.2308 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.677 to i8*, !dbg !1044
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.172, i8* nonnull %cast.2308), !dbg !1044
  %3 = bitcast %IPST.1* %tmp.183 to i8**, !dbg !1044
  store i8* %call.172, i8** %3, align 8, !dbg !1044
  %field.903 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.183, i64 0, i32 1, !dbg !1044
  store i64 1, i64* %field.903, align 8, !dbg !1044
  %field.904 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.183, i64 0, i32 2, !dbg !1044
  store i64 1, i64* %field.904, align 8, !dbg !1044
  call void %.field.ld.105(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.38, i64 ptrtoint ([21 x i8]* @const.217 to i64), i64 20, %IPST.1* byval nonnull %tmp.183), !dbg !1044
  %tmpv.680.sroa.0.0.copyload = load %Expr.0*, %Expr.0** %tmpv.671.sroa.0.0.cast.2297.sroa_idx, align 8
  %tmpv.680.sroa.2.0.copyload = load i64, i64* %field.889, align 8
  %icmp.241 = icmp slt i64 %tmpv.680.sroa.2.0.copyload, 1, !dbg !1045
  br i1 %icmp.241, label %then.214, label %else.214

else.212:                                         ; preds = %else.211
  %field.895 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.674.sroa.0.0.copyload, i64 0, i32 0, !dbg !1044
  %.field.ld.104 = load %_type.0*, %_type.0** %field.895, align 8, !dbg !1044
  br label %fallthrough.212

then.214:                                         ; preds = %fallthrough.212
  call void @__go_runtime_error(i8* nest undef, i32 0), !dbg !1045
  unreachable

else.214:                                         ; preds = %fallthrough.212
  %tmpv.683.sroa.0.0.cast.2317.sroa_idx = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.680.sroa.0.0.copyload, i64 0, i32 0
  %tmpv.683.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.683.sroa.0.0.cast.2317.sroa_idx, align 8
  %tmpv.683.sroa.3.0.cast.2317.sroa_idx1 = getelementptr inbounds %Expr.0, %Expr.0* %tmpv.680.sroa.0.0.copyload, i64 0, i32 1
  %4 = bitcast i8** %tmpv.683.sroa.3.0.cast.2317.sroa_idx1 to i64*
  %tmpv.683.sroa.3.0.copyload64 = load i64, i64* %4, align 8
  %icmp.243 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.683.sroa.0.0.copyload, null, !dbg !1045
  br i1 %icmp.243, label %fallthrough.215, label %else.215

fallthrough.215:                                  ; preds = %else.214, %else.215
  %tmpv.685.0 = phi %_type.0* [ %.field.ld.106, %else.215 ], [ null, %else.214 ]
  %call.173 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.685.0), !dbg !1045
  %5 = ptrtoint i8* %call.173 to i64, !dbg !1045
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.90, i8* nest undef, %Context.0* %c, i64 %5, i64 %tmpv.683.sroa.3.0.copyload64), !dbg !1046
  %tmpv.679.sroa.0.0.cast.2324.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.90, i64 0, i32 0, !dbg !1046
  %tmpv.679.sroa.0.0.copyload6 = load %Value.0*, %Value.0** %tmpv.679.sroa.0.0.cast.2324.sroa_idx, align 8, !dbg !1046
  %tmpv.679.sroa.3.sroa.0.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.90, i64 0, i32 1, i32 0, !dbg !1046
  %tmpv.679.sroa.3.sroa.0.0.copyload28 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.679.sroa.3.sroa.0.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx, align 8, !dbg !1046
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.679.sroa.0.0.copyload6, metadata !1047, metadata !DIExpression()), !dbg !1048
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.679.sroa.3.sroa.0.0.copyload28, metadata !1049, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1048
  %icmp.244 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.679.sroa.3.sroa.0.0.copyload28, null, !dbg !1050
  br i1 %icmp.244, label %else.216, label %then.216

else.215:                                         ; preds = %else.214
  %field.910 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.683.sroa.0.0.copyload, i64 0, i32 0, !dbg !1045
  %.field.ld.106 = load %_type.0*, %_type.0** %field.910, align 8, !dbg !1045
  br label %fallthrough.215

then.216:                                         ; preds = %fallthrough.215
  %tmpv.679.sroa.3.sroa.3.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx29 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.90, i64 0, i32 1, i32 1, !dbg !1046
  %6 = bitcast i8** %tmpv.679.sroa.3.sroa.3.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx29 to i64*, !dbg !1046
  %tmpv.679.sroa.3.sroa.3.0.copyload3065 = load i64, i64* %6, align 8, !dbg !1046
  call void @llvm.dbg.value(metadata i8** %tmpv.679.sroa.3.sroa.3.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx29, metadata !1049, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1048
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1033, metadata !DIExpression()), !dbg !1034
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.679.sroa.3.sroa.0.0.copyload28, metadata !1041, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1042
  call void @llvm.dbg.value(metadata i8** %tmpv.679.sroa.3.sroa.3.0.tmpv.679.sroa.3.0.cast.2324.sroa_cast.sroa_idx29, metadata !1041, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1042
  %tmp.185.sroa.0.0.cast.2336.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 0, !dbg !1051
  store %Value.0* null, %Value.0** %tmp.185.sroa.0.0.cast.2336.sroa_idx, align 8, !dbg !1051
  %tmp.185.sroa.2.0.cast.2336.sroa_idx59 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 1, i32 0, !dbg !1051
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.679.sroa.3.sroa.0.0.copyload28, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.185.sroa.2.0.cast.2336.sroa_idx59, align 8, !dbg !1051
  %tmp.185.sroa.3.0.cast.2336.sroa_idx60 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 1, i32 1, !dbg !1051
  %7 = bitcast i8** %tmp.185.sroa.3.0.cast.2336.sroa_idx60 to i64*, !dbg !1051
  store i64 %tmpv.679.sroa.3.sroa.3.0.copyload3065, i64* %7, align 8, !dbg !1051
  ret void, !dbg !1051

else.216:                                         ; preds = %fallthrough.215
  %icmp.245 = icmp eq %Context.0* %c, null, !dbg !1052
  br i1 %icmp.245, label %then.217, label %else.217

then.217:                                         ; preds = %else.216
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1052
  unreachable

else.217:                                         ; preds = %else.216
  %field.919 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 2, !dbg !1052
  store i8 1, i8* %field.919, align 1, !dbg !1053
  %field.920 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 3, !dbg !1054
  %runtime.writeBarrier.ld.20 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !1055
  %icmp.248 = icmp eq i32 %runtime.writeBarrier.ld.20, 0, !dbg !1055
  br i1 %icmp.248, label %else.220, label %else.219

fallthrough.219:                                  ; preds = %else.219, %else.220
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.679.sroa.0.0.copyload6, metadata !1033, metadata !DIExpression()), !dbg !1034
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !1041, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1042
  call void @llvm.dbg.value(metadata i8* null, metadata !1041, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1042
  %tmp.186.sroa.0.0.cast.2350.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 0, !dbg !1056
  store %Value.0* %tmpv.679.sroa.0.0.copyload6, %Value.0** %tmp.186.sroa.0.0.cast.2350.sroa_idx, align 8, !dbg !1056
  %tmp.186.sroa.2.0.cast.2350.sroa_idx61 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.15, i64 0, i32 1, i32 0, !dbg !1056
  %8 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.186.sroa.2.0.cast.2350.sroa_idx61 to i8*, !dbg !1056
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false), !dbg !1056
  ret void, !dbg !1056

else.219:                                         ; preds = %else.217
  %cast.2342 = bitcast %Value.0** %field.920 to i8*, !dbg !1055
  %cast.2343 = bitcast %Value.0* %tmpv.679.sroa.0.0.copyload6 to i8*, !dbg !1055
  call void @runtime.writebarrierptr(i8* nest undef, i8* nonnull %cast.2342, i8* %cast.2343), !dbg !1055
  br label %fallthrough.219

else.220:                                         ; preds = %else.217
  store %Value.0* %tmpv.679.sroa.0.0.copyload6, %Value.0** %field.920, align 8, !dbg !1055
  br label %fallthrough.219
}

define void @command_line_arguments.Context.evalSelectorExpr({ %Value.0*, %error.0 }* nocapture sret %sret.formal.9, i8* nest nocapture readnone %nest.15, %Context.0* %c, %SelectorExpr.0* %e) #0 !dbg !1057 {
entry:
  %tmp.161.i = alloca %IPST.1, align 8
  %sret.actual.77.i = alloca %Value.0, align 8
  %sret.actual.79.i = alloca %Method.0, align 8
  %tmpv.570.i = alloca { i8*, i64 }, align 8
  %tmpv.573.i = alloca %Value.0, align 8
  %tmpv.575.i = alloca { i8*, i64 }, align 8
  %tmpv.576.i = alloca [2 x { %_type.0*, i8* }], align 8
  %tmpv.369.sroa.0.0.copyload1090 = alloca %Value.0, align 8
  %tmp.115 = alloca %IPST.1, align 8
  %tmp.111 = alloca %IPST.1, align 8
  %tmp.109 = alloca %IPST.1, align 8
  %tmp.107 = alloca %IPST.1, align 8
  %tmp.102 = alloca %IPST.1, align 8
  %tmp.96 = alloca %IPST.1, align 8
  %tmp.94 = alloca %IPST.1, align 8
  %sret.actual.56 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.378 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.380 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.384 = alloca %EvalError.0, align 8
  %tmpv.389 = alloca { i8*, i64 }, align 8
  %tmpv.394 = alloca { i8*, i64 }, align 8
  %tmpv.395 = alloca [3 x { %_type.0*, i8* }], align 8
  %tmpv.399 = alloca { i8*, i64 }, align 8
  %tmpv.403 = alloca { i8*, i64 }, align 8
  %tmpv.404 = alloca [4 x { %_type.0*, i8* }], align 8
  %tmpv.407 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.412 = alloca %Value.0, align 8
  %sret.actual.59 = alloca %Value.0, align 8
  %tmpv.417 = alloca { i8*, i64 }, align 8
  %tmpv.421 = alloca { i8*, i64 }, align 8
  %tmpv.422 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.428 = alloca { i8*, i64 }, align 8
  %tmpv.431 = alloca { i8*, i64 }, align 8
  %tmpv.432 = alloca [3 x { %_type.0*, i8* }], align 8
  %tmpv.437 = alloca %EvalError.0, align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !1060, metadata !DIExpression()), !dbg !1061
  call void @llvm.dbg.value(metadata %SelectorExpr.0* %e, metadata !1062, metadata !DIExpression()), !dbg !1063
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1064, metadata !DIExpression()), !dbg !1065
  %icmp.135 = icmp eq %SelectorExpr.0* %e, null, !dbg !1066
  br i1 %icmp.135, label %then.110, label %else.110

then.110:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1066
  unreachable

else.110:                                         ; preds = %entry
  %tmpv.370.sroa.0.0.cast.1347.sroa_idx = getelementptr inbounds %SelectorExpr.0, %SelectorExpr.0* %e, i64 0, i32 0, i32 0
  %tmpv.370.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.370.sroa.0.0.cast.1347.sroa_idx, align 8
  %tmpv.370.sroa.3.0.cast.1347.sroa_idx9 = getelementptr inbounds %SelectorExpr.0, %SelectorExpr.0* %e, i64 0, i32 0, i32 1
  %0 = bitcast i8** %tmpv.370.sroa.3.0.cast.1347.sroa_idx9 to i64*
  %tmpv.370.sroa.3.0.copyload88 = load i64, i64* %0, align 8
  %icmp.136 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.370.sroa.0.0.copyload, null, !dbg !1066
  br i1 %icmp.136, label %fallthrough.111, label %else.111

fallthrough.111:                                  ; preds = %else.110, %else.111
  %tmpv.372.0 = phi %_type.0* [ %.field.ld.52, %else.111 ], [ null, %else.110 ]
  %call.96 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.372.0), !dbg !1066
  %1 = ptrtoint i8* %call.96 to i64, !dbg !1066
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.56, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.370.sroa.3.0.copyload88), !dbg !1068
  %tmpv.369.sroa.0.0.cast.1354.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.56, i64 0, i32 0, !dbg !1068
  %tmpv.369.sroa.0.0.copyload10 = load %Value.0*, %Value.0** %tmpv.369.sroa.0.0.cast.1354.sroa_idx, align 8, !dbg !1068
  %tmpv.369.sroa.3.sroa.0.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.56, i64 0, i32 1, i32 0, !dbg !1068
  %tmpv.369.sroa.3.sroa.0.0.copyload30 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.369.sroa.3.sroa.0.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx, align 8, !dbg !1068
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload10, metadata !1069, metadata !DIExpression()), !dbg !1070
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.369.sroa.3.sroa.0.0.copyload30, metadata !1071, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1070
  %icmp.137 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.369.sroa.3.sroa.0.0.copyload30, null, !dbg !1072
  br i1 %icmp.137, label %else.112, label %then.112

else.111:                                         ; preds = %else.110
  %field.456 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.370.sroa.0.0.copyload, i64 0, i32 0, !dbg !1066
  %.field.ld.52 = load %_type.0*, %_type.0** %field.456, align 8, !dbg !1066
  br label %fallthrough.111

then.112:                                         ; preds = %fallthrough.111
  %tmpv.369.sroa.3.sroa.3.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx31 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.56, i64 0, i32 1, i32 1, !dbg !1068
  %2 = bitcast i8** %tmpv.369.sroa.3.sroa.3.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx31 to i64*, !dbg !1068
  %tmpv.369.sroa.3.sroa.3.0.copyload3289 = load i64, i64* %2, align 8, !dbg !1068
  call void @llvm.dbg.value(metadata i8** %tmpv.369.sroa.3.sroa.3.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx31, metadata !1071, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1070
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1064, metadata !DIExpression()), !dbg !1065
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.369.sroa.3.sroa.0.0.copyload30, metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1074
  call void @llvm.dbg.value(metadata i8** %tmpv.369.sroa.3.sroa.3.0.tmpv.369.sroa.3.0.cast.1354.sroa_cast.sroa_idx31, metadata !1073, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1074
  %tmp.92.sroa.0.0.cast.1366.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 0, !dbg !1075
  store %Value.0* null, %Value.0** %tmp.92.sroa.0.0.cast.1366.sroa_idx, align 8, !dbg !1075
  %tmp.92.sroa.2.0.cast.1366.sroa_idx64 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 0, !dbg !1075
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.369.sroa.3.sroa.0.0.copyload30, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.92.sroa.2.0.cast.1366.sroa_idx64, align 8, !dbg !1075
  %tmp.92.sroa.3.0.cast.1366.sroa_idx65 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 1, !dbg !1075
  %3 = bitcast i8** %tmp.92.sroa.3.0.cast.1366.sroa_idx65 to i64*, !dbg !1075
  store i64 %tmpv.369.sroa.3.sroa.3.0.copyload3289, i64* %3, align 8, !dbg !1075
  ret void, !dbg !1075

else.112:                                         ; preds = %fallthrough.111
  %call.100 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %tmpv.369.sroa.0.0.copyload10), !dbg !1076
  %icmp.138 = icmp eq i8 %call.100, 0, !dbg !1077
  br i1 %icmp.138, label %then.113, label %else.113

then.113:                                         ; preds = %else.112
  %command_line_arguments.PkgLogger.field.ld.12 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1078
  %field.468 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.12, i64 0, i32 1, !dbg !1078
  %.field.ld.53 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.468, align 8, !dbg !1078
  %command_line_arguments.PkgLogger.field.ld.13 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1078
  %call.97 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1078
  %tmp.93.sroa.0.0.cast.1373.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.378, i64 0, i64 0, i32 0, !dbg !1078
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0** %tmp.93.sroa.0.0.cast.1373.sroa_idx, align 8, !dbg !1078
  %tmp.93.sroa.2.0.cast.1373.sroa_idx66 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.378, i64 0, i64 0, i32 1, !dbg !1078
  %4 = bitcast i8** %tmp.93.sroa.2.0.cast.1373.sroa_idx66 to %SelectorExpr.0**, !dbg !1078
  store %SelectorExpr.0* %e, %SelectorExpr.0** %4, align 8, !dbg !1078
  %cast.1377 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.378 to i8*, !dbg !1078
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.97, i8* nonnull %cast.1377), !dbg !1078
  %5 = bitcast %IPST.1* %tmp.94 to i8**, !dbg !1078
  store i8* %call.97, i8** %5, align 8, !dbg !1078
  %field.471 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.94, i64 0, i32 1, !dbg !1078
  store i64 1, i64* %field.471, align 8, !dbg !1078
  %field.472 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.94, i64 0, i32 2, !dbg !1078
  store i64 1, i64* %field.472, align 8, !dbg !1078
  call void %.field.ld.53(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.13, i64 ptrtoint ([31 x i8]* @const.170 to i64), i64 30, %IPST.1* byval nonnull %tmp.94), !dbg !1078
  %tmp.95.sroa.0.0.cast.1383.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.380, i64 0, i64 0, i32 0, !dbg !1079
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0** %tmp.95.sroa.0.0.cast.1383.sroa_idx, align 8, !dbg !1079
  %tmp.95.sroa.2.0.cast.1383.sroa_idx67 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.380, i64 0, i64 0, i32 1, !dbg !1079
  %6 = bitcast i8** %tmp.95.sroa.2.0.cast.1383.sroa_idx67 to %SelectorExpr.0**, !dbg !1079
  store %SelectorExpr.0* %e, %SelectorExpr.0** %6, align 8, !dbg !1079
  %field.475 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.96, i64 0, i32 0, !dbg !1079
  %cast.1388 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.380, i64 0, i64 0, !dbg !1079
  store { %_type.0*, i8* }* %cast.1388, { %_type.0*, i8* }** %field.475, align 8, !dbg !1079
  %field.476 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.96, i64 0, i32 1, !dbg !1079
  store i64 1, i64* %field.476, align 8, !dbg !1079
  %field.477 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.96, i64 0, i32 2, !dbg !1079
  store i64 1, i64* %field.477, align 8, !dbg !1079
  %call.98 = call { i64, i64 } @fmt.Sprintf(i8* nest undef, i64 ptrtoint ([21 x i8]* @const.174 to i64), i64 20, %IPST.1* byval nonnull %tmp.96), !dbg !1079
  %call.98.fca.0.extract = extractvalue { i64, i64 } %call.98, 0, !dbg !1079
  %call.98.fca.1.extract = extractvalue { i64, i64 } %call.98, 1, !dbg !1079
  %call.99 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !1080
  %tmp.97.sroa.0.0.cast.1397.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.384, i64 0, i32 0, i32 0, !dbg !1081
  store { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* bitcast ({ %_type.0*, i64 (i8*, %SelectorExpr.0*)*, i64 (i8*, %SelectorExpr.0*)* }* @pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*), { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }** %tmp.97.sroa.0.0.cast.1397.sroa_idx, align 8, !dbg !1081
  %tmp.97.sroa.2.0.cast.1397.sroa_idx68 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.384, i64 0, i32 0, i32 1, !dbg !1081
  %7 = bitcast i8** %tmp.97.sroa.2.0.cast.1397.sroa_idx68 to %SelectorExpr.0**, !dbg !1081
  store %SelectorExpr.0* %e, %SelectorExpr.0** %7, align 8, !dbg !1081
  %field.481 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.384, i64 0, i32 1, !dbg !1081
  %cast.1399 = bitcast { i8*, i64 }* %field.481 to i8*, !dbg !1081
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1399, i8* align 8 bitcast ({ i8*, i64 }* @const.173 to i8*), i64 16, i1 false), !dbg !1081
  %tmpv.382.sroa.0.0.cast.1401.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.384, i64 0, i32 2, !dbg !1081
  %tmpv.382.sroa.0.0.cast.1401.sroa_cast = bitcast { i8*, i64 }* %tmpv.382.sroa.0.0.cast.1401.sroa_idx to i64*, !dbg !1081
  store i64 %call.98.fca.0.extract, i64* %tmpv.382.sroa.0.0.cast.1401.sroa_cast, align 8, !dbg !1081
  %tmpv.382.sroa.2.0.cast.1401.sroa_idx8 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.384, i64 0, i32 2, i32 1, !dbg !1081
  store i64 %call.98.fca.1.extract, i64* %tmpv.382.sroa.2.0.cast.1401.sroa_idx8, align 8, !dbg !1081
  %cast.1405 = bitcast %EvalError.0* %tmpv.384 to i8*, !dbg !1080
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.99, i8* nonnull %cast.1405), !dbg !1080
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1064, metadata !DIExpression()), !dbg !1065
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1074
  call void @llvm.dbg.value(metadata i8* %call.99, metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1074
  %tmp.98.sroa.0.0.cast.1412.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 0, !dbg !1080
  store %Value.0* null, %Value.0** %tmp.98.sroa.0.0.cast.1412.sroa_idx, align 8, !dbg !1080
  %tmp.98.sroa.2.0.cast.1412.sroa_idx69 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 0, !dbg !1080
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.98.sroa.2.0.cast.1412.sroa_idx69, align 8, !dbg !1080
  %tmp.98.sroa.3.0.cast.1412.sroa_idx70 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 1, !dbg !1080
  store i8* %call.99, i8** %tmp.98.sroa.3.0.cast.1412.sroa_idx70, align 8, !dbg !1080
  ret void, !dbg !1080

else.113:                                         ; preds = %else.112
  %call.101 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %tmpv.369.sroa.0.0.copyload10), !dbg !1082
  %field.487 = getelementptr inbounds %SelectorExpr.0, %SelectorExpr.0* %e, i64 0, i32 1, !dbg !1083
  %.field.ld.54 = load %Ident.0*, %Ident.0** %field.487, align 8, !dbg !1083
  %icmp.140 = icmp eq %Ident.0* %.field.ld.54, null, !dbg !1084
  br i1 %icmp.140, label %then.115, label %else.115

then.115:                                         ; preds = %else.113
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1084
  unreachable

else.115:                                         ; preds = %else.113
  %field.488 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.54, i64 0, i32 1, !dbg !1084
  %cast.1416 = bitcast { i8*, i64 }* %tmpv.389 to i8*
  %cast.1417 = bitcast { i8*, i64 }* %field.488 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1416, i8* nonnull align 8 %cast.1417, i64 16, i1 false)
  %command_line_arguments.PkgLogger.field.ld.14 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1085
  %field.496 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.14, i64 0, i32 1, !dbg !1085
  %.field.ld.55 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.496, align 8, !dbg !1085
  %command_line_arguments.PkgLogger.field.ld.15 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1085
  %call.102 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...63x.7interface.4.5, i64 0, i32 0)), !dbg !1085
  %call.103 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !1085
  store i8 %call.101, i8* %call.103, align 1, !dbg !1085
  %call.104 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1085
  %cast.1424 = bitcast { i8*, i64 }* %tmpv.394 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1424, i8* nonnull align 8 %cast.1416, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.104, i8* nonnull %cast.1424), !dbg !1085
  %tmp.99.sroa.0.0.cast.1431.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 0, i32 0, !dbg !1085
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0** %tmp.99.sroa.0.0.cast.1431.sroa_idx, align 8, !dbg !1085
  %tmp.99.sroa.2.0.cast.1431.sroa_idx71 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 0, i32 1, !dbg !1085
  %8 = bitcast i8** %tmp.99.sroa.2.0.cast.1431.sroa_idx71 to %SelectorExpr.0**, !dbg !1085
  store %SelectorExpr.0* %e, %SelectorExpr.0** %8, align 8, !dbg !1085
  %tmp.100.sroa.0.0.cast.1433.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 1, i32 0, !dbg !1085
  store %_type.0* @bool..d, %_type.0** %tmp.100.sroa.0.0.cast.1433.sroa_idx, align 8, !dbg !1085
  %tmp.100.sroa.2.0.cast.1433.sroa_idx72 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 1, i32 1, !dbg !1085
  store i8* %call.103, i8** %tmp.100.sroa.2.0.cast.1433.sroa_idx72, align 8, !dbg !1085
  %tmp.101.sroa.0.0.cast.1435.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 2, i32 0, !dbg !1085
  store %_type.0* @string..d, %_type.0** %tmp.101.sroa.0.0.cast.1435.sroa_idx, align 8, !dbg !1085
  %tmp.101.sroa.2.0.cast.1435.sroa_idx73 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.395, i64 0, i64 2, i32 1, !dbg !1085
  store i8* %call.104, i8** %tmp.101.sroa.2.0.cast.1435.sroa_idx73, align 8, !dbg !1085
  %cast.1439 = bitcast [3 x { %_type.0*, i8* }]* %tmpv.395 to i8*, !dbg !1085
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...63x.7interface.4.5, i64 0, i32 0), i8* %call.102, i8* nonnull %cast.1439), !dbg !1085
  %9 = bitcast %IPST.1* %tmp.102 to i8**, !dbg !1085
  store i8* %call.102, i8** %9, align 8, !dbg !1085
  %field.499 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.102, i64 0, i32 1, !dbg !1085
  store i64 3, i64* %field.499, align 8, !dbg !1085
  %field.500 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.102, i64 0, i32 2, !dbg !1085
  store i64 3, i64* %field.500, align 8, !dbg !1085
  call void %.field.ld.55(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.15, i64 ptrtoint ([46 x i8]* @const.176 to i64), i64 45, %IPST.1* byval nonnull %tmp.102), !dbg !1085
  %call.105 = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* %tmpv.369.sroa.0.0.copyload10), !dbg !1086
  %call.105.fca.0.extract = extractvalue { i64, i64 } %call.105, 0, !dbg !1086
  %call.105.fca.1.extract = extractvalue { i64, i64 } %call.105, 1, !dbg !1086
  %.field.ld.56 = load %Ident.0*, %Ident.0** %field.487, align 8, !dbg !1087
  %icmp.142 = icmp eq %Ident.0* %.field.ld.56, null, !dbg !1088
  br i1 %icmp.142, label %then.117, label %else.117

then.117:                                         ; preds = %else.115
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1088
  unreachable

else.117:                                         ; preds = %else.115
  %field.502 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.56, i64 0, i32 1, !dbg !1088
  %cast.1447 = bitcast { i8*, i64 }* %tmpv.399 to i8*
  %cast.1448 = bitcast { i8*, i64 }* %field.502 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1447, i8* nonnull align 8 %cast.1448, i64 16, i1 false)
  %command_line_arguments.PkgLogger.field.ld.16 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1089
  %field.516 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.16, i64 0, i32 1, !dbg !1089
  %.field.ld.58 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.516, align 8, !dbg !1089
  %command_line_arguments.PkgLogger.field.ld.17 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1089
  %call.106 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...64x.7interface.4.5, i64 0, i32 0)), !dbg !1089
  %icmp.143 = icmp eq i64 %call.105.fca.0.extract, 0, !dbg !1086
  br i1 %icmp.143, label %fallthrough.118, label %else.118

fallthrough.118:                                  ; preds = %else.117, %else.118
  %tmpv.405.0 = phi %_type.0* [ %.field.ld.57, %else.118 ], [ null, %else.117 ]
  %10 = inttoptr i64 %call.105.fca.1.extract to i8*, !dbg !1089
  %call.107 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1089
  %cast.1455 = bitcast { i8*, i64 }* %tmpv.403 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1455, i8* nonnull align 8 %cast.1447, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.107, i8* nonnull %cast.1455), !dbg !1089
  %tmp.103.sroa.0.0.cast.1466.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 0, i32 0, !dbg !1089
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0** %tmp.103.sroa.0.0.cast.1466.sroa_idx, align 8, !dbg !1089
  %tmp.103.sroa.2.0.cast.1466.sroa_idx74 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 0, i32 1, !dbg !1089
  %11 = bitcast i8** %tmp.103.sroa.2.0.cast.1466.sroa_idx74 to %SelectorExpr.0**, !dbg !1089
  store %SelectorExpr.0* %e, %SelectorExpr.0** %11, align 8, !dbg !1089
  %tmp.104.sroa.0.0.cast.1468.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 1, i32 0, !dbg !1089
  store %_type.0* %tmpv.405.0, %_type.0** %tmp.104.sroa.0.0.cast.1468.sroa_idx, align 8, !dbg !1089
  %tmp.104.sroa.2.0.cast.1468.sroa_idx75 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 1, i32 1, !dbg !1089
  store i8* %10, i8** %tmp.104.sroa.2.0.cast.1468.sroa_idx75, align 8, !dbg !1089
  %tmp.105.sroa.0.0.cast.1470.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 2, i32 0, !dbg !1089
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.105.sroa.0.0.cast.1470.sroa_idx, align 8, !dbg !1089
  %tmp.105.sroa.2.0.cast.1470.sroa_idx76 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 2, i32 1, !dbg !1089
  %12 = bitcast i8** %tmp.105.sroa.2.0.cast.1470.sroa_idx76 to %Value.0**, !dbg !1089
  store %Value.0* %tmpv.369.sroa.0.0.copyload10, %Value.0** %12, align 8, !dbg !1089
  %tmp.106.sroa.0.0.cast.1472.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 3, i32 0, !dbg !1089
  store %_type.0* @string..d, %_type.0** %tmp.106.sroa.0.0.cast.1472.sroa_idx, align 8, !dbg !1089
  %tmp.106.sroa.2.0.cast.1472.sroa_idx77 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.404, i64 0, i64 3, i32 1, !dbg !1089
  store i8* %call.107, i8** %tmp.106.sroa.2.0.cast.1472.sroa_idx77, align 8, !dbg !1089
  %cast.1476 = bitcast [4 x { %_type.0*, i8* }]* %tmpv.404 to i8*, !dbg !1089
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...64x.7interface.4.5, i64 0, i32 0), i8* %call.106, i8* nonnull %cast.1476), !dbg !1089
  %13 = bitcast %IPST.1* %tmp.107 to i8**, !dbg !1089
  store i8* %call.106, i8** %13, align 8, !dbg !1089
  %field.519 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.107, i64 0, i32 1, !dbg !1089
  store i64 4, i64* %field.519, align 8, !dbg !1089
  %field.520 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.107, i64 0, i32 2, !dbg !1089
  store i64 4, i64* %field.520, align 8, !dbg !1089
  call void %.field.ld.58(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.17, i64 ptrtoint ([54 x i8]* @const.179 to i64), i64 53, %IPST.1* byval nonnull %tmp.107), !dbg !1089
  %command_line_arguments.PkgLogger.field.ld.18 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1090
  %field.524 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.18, i64 0, i32 1, !dbg !1090
  %.field.ld.59 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.524, align 8, !dbg !1090
  %command_line_arguments.PkgLogger.field.ld.19 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1090
  %call.108 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1090
  %tmp.108.sroa.0.0.cast.1483.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.407, i64 0, i64 0, i32 0, !dbg !1090
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.SelectorExpr, i64 0, i32 0), %_type.0** %tmp.108.sroa.0.0.cast.1483.sroa_idx, align 8, !dbg !1090
  %tmp.108.sroa.2.0.cast.1483.sroa_idx78 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.407, i64 0, i64 0, i32 1, !dbg !1090
  %14 = bitcast i8** %tmp.108.sroa.2.0.cast.1483.sroa_idx78 to %SelectorExpr.0**, !dbg !1090
  store %SelectorExpr.0* %e, %SelectorExpr.0** %14, align 8, !dbg !1090
  %cast.1487 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.407 to i8*, !dbg !1090
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.108, i8* nonnull %cast.1487), !dbg !1090
  %15 = bitcast %IPST.1* %tmp.109 to i8**, !dbg !1090
  store i8* %call.108, i8** %15, align 8, !dbg !1090
  %field.527 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.109, i64 0, i32 1, !dbg !1090
  store i64 1, i64* %field.527, align 8, !dbg !1090
  %field.528 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.109, i64 0, i32 2, !dbg !1090
  store i64 1, i64* %field.528, align 8, !dbg !1090
  call void %.field.ld.59(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.19, i64 ptrtoint ([29 x i8]* @const.182 to i64), i64 28, %IPST.1* byval nonnull %tmp.109), !dbg !1090
  %call.109 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !1091
  %cast.1491 = bitcast i8* %call.109 to %Value.0*, !dbg !1091
  call void @llvm.dbg.value(metadata %Value.0* %cast.1491, metadata !1092, metadata !DIExpression()), !dbg !1093
  %.field.ld.60 = load %Ident.0*, %Ident.0** %field.487, align 8, !dbg !1094
  %icmp.145 = icmp eq %Ident.0* %.field.ld.60, null, !dbg !1095
  br i1 %icmp.145, label %then.120, label %else.120

else.118:                                         ; preds = %else.117
  %16 = inttoptr i64 %call.105.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !1086
  %field.505 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %16, i64 0, i32 0, !dbg !1086
  %.field.ld.57 = load %_type.0*, %_type.0** %field.505, align 8, !dbg !1086
  br label %fallthrough.118

then.120:                                         ; preds = %fallthrough.118
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1095
  unreachable

else.120:                                         ; preds = %fallthrough.118
  %field.530 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.60, i64 0, i32 1, !dbg !1095
  %field0.72 = bitcast { i8*, i64 }* %field.530 to i64*, !dbg !1096
  %ld.131 = load i64, i64* %field0.72, align 8, !dbg !1096
  %17 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.60, i64 0, i32 1, i32 1, !dbg !1096
  %ld.132 = load i64, i64* %17, align 8, !dbg !1096
  call void @reflect.Value.MethodByName(%Value.0* nonnull sret %sret.actual.59, i8* nest undef, %Value.0* %tmpv.369.sroa.0.0.copyload10, i64 %ld.131, i64 %ld.132), !dbg !1096
  %cast.1495 = bitcast %Value.0* %tmpv.412 to i8*
  %cast.1496 = bitcast %Value.0* %sret.actual.59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1495, i8* nonnull align 8 %cast.1496, i64 24, i1 false)
  %runtime.writeBarrier.ld.14 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !1096
  %icmp.147 = icmp eq i32 %runtime.writeBarrier.ld.14, 0, !dbg !1096
  br i1 %icmp.147, label %then.121, label %else.121

then.121:                                         ; preds = %else.120
  %icmp.146 = icmp eq i8* %call.109, null, !dbg !1096
  br i1 %icmp.146, label %then.122, label %else.122

fallthrough.121:                                  ; preds = %else.121, %else.122
  %call.116 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %cast.1491), !dbg !1097
  %icmp.154 = icmp eq i8 %call.116, 0, !dbg !1098
  br i1 %icmp.154, label %else.124, label %else.123

else.121:                                         ; preds = %else.120
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.109, i8* nonnull %cast.1495), !dbg !1096
  br label %fallthrough.121

then.122:                                         ; preds = %then.121
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1096
  unreachable

else.122:                                         ; preds = %then.121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.109, i8* nonnull align 8 %cast.1495, i64 24, i1 false), !dbg !1096
  br label %fallthrough.121

else.123:                                         ; preds = %fallthrough.121
  call void @llvm.dbg.value(metadata %Value.0* %cast.1491, metadata !1064, metadata !DIExpression()), !dbg !1065
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1074
  call void @llvm.dbg.value(metadata i8* null, metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1074
  %18 = bitcast { %Value.0*, %error.0 }* %sret.formal.9 to i8**, !dbg !1099
  store i8* %call.109, i8** %18, align 8, !dbg !1099
  %tmp.118.sroa.2.0.cast.1581.sroa_idx86 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 0, !dbg !1099
  %19 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.118.sroa.2.0.cast.1581.sroa_idx86 to i8*, !dbg !1099
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 16, i1 false), !dbg !1099
  ret void, !dbg !1099

else.124:                                         ; preds = %fallthrough.121
  %.field.ld.61 = load %Ident.0*, %Ident.0** %field.487, align 8, !dbg !1100
  %icmp.149 = icmp eq %Ident.0* %.field.ld.61, null, !dbg !1101
  br i1 %icmp.149, label %then.125, label %else.125

then.125:                                         ; preds = %else.124
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1101
  unreachable

else.125:                                         ; preds = %else.124
  %field.532 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.61, i64 0, i32 1, !dbg !1101
  %cast.1505 = bitcast { i8*, i64 }* %tmpv.417 to i8*
  %cast.1506 = bitcast { i8*, i64 }* %field.532 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1505, i8* nonnull align 8 %cast.1506, i64 16, i1 false)
  %command_line_arguments.PkgLogger.field.ld.20 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1102
  %field.536 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.20, i64 0, i32 1, !dbg !1102
  %.field.ld.62 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.536, align 8, !dbg !1102
  %command_line_arguments.PkgLogger.field.ld.21 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1102
  %call.110 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1102
  %call.111 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1102
  %cast.1510 = bitcast { i8*, i64 }* %tmpv.421 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1510, i8* nonnull align 8 %cast.1505, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.111, i8* nonnull %cast.1510), !dbg !1102
  %tmp.110.sroa.0.0.cast.1515.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.422, i64 0, i64 0, i32 0, !dbg !1102
  store %_type.0* @string..d, %_type.0** %tmp.110.sroa.0.0.cast.1515.sroa_idx, align 8, !dbg !1102
  %tmp.110.sroa.2.0.cast.1515.sroa_idx79 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.422, i64 0, i64 0, i32 1, !dbg !1102
  store i8* %call.111, i8** %tmp.110.sroa.2.0.cast.1515.sroa_idx79, align 8, !dbg !1102
  %cast.1519 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.422 to i8*, !dbg !1102
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.110, i8* nonnull %cast.1519), !dbg !1102
  %20 = bitcast %IPST.1* %tmp.111 to i8**, !dbg !1102
  store i8* %call.110, i8** %20, align 8, !dbg !1102
  %field.539 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.111, i64 0, i32 1, !dbg !1102
  store i64 1, i64* %field.539, align 8, !dbg !1102
  %field.540 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.111, i64 0, i32 2, !dbg !1102
  store i64 1, i64* %field.540, align 8, !dbg !1102
  call void %.field.ld.62(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.21, i64 ptrtoint ([39 x i8]* @const.184 to i64), i64 38, %IPST.1* byval nonnull %tmp.111), !dbg !1102
  %icmp.150 = icmp eq %Value.0* %tmpv.369.sroa.0.0.copyload10, null, !dbg !1103
  br i1 %icmp.150, label %then.126, label %else.126

then.126:                                         ; preds = %else.125
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1103
  unreachable

else.126:                                         ; preds = %else.125
  %21 = bitcast %Value.0* %tmpv.369.sroa.0.0.copyload1090 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21)
  %22 = bitcast %IPST.1* %tmp.161.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22)
  %23 = bitcast %Value.0* %sret.actual.77.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23)
  %24 = bitcast %Method.0* %sret.actual.79.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %24)
  %tmpv.570.i.0.sroa_cast = bitcast { i8*, i64 }* %tmpv.570.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %tmpv.570.i.0.sroa_cast)
  %25 = bitcast %Value.0* %tmpv.573.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25)
  %26 = bitcast { i8*, i64 }* %tmpv.575.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26)
  %27 = bitcast [2 x { %_type.0*, i8* }]* %tmpv.576.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27)
  %28 = bitcast %Value.0* %tmpv.369.sroa.0.0.copyload10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 1 %28, i64 24, i1 false)
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload1090, metadata !1104, metadata !DIExpression(DW_OP_deref)), !dbg !1109
  %call.151.i = call i64 @reflect.Value.Kind(i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload1090), !dbg !1111
  %icmp.197.i = icmp eq i64 %call.151.i, 22, !dbg !1112
  br i1 %icmp.197.i, label %then.172.i, label %fallthrough.172.i

then.172.i:                                       ; preds = %else.126
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload1090, metadata !1104, metadata !DIExpression(DW_OP_deref)), !dbg !1109
  call void @reflect.Value.Elem(%Value.0* nonnull sret %sret.actual.77.i, i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload1090), !dbg !1113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* nonnull align 8 %23, i64 24, i1 false), !dbg !1114
  br label %fallthrough.172.i

fallthrough.172.i:                                ; preds = %then.172.i, %else.126
  call void @llvm.dbg.value(metadata i64 0, metadata !1115, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload1090, metadata !1104, metadata !DIExpression(DW_OP_deref)), !dbg !1109
  %call.1563.i = call i64 @reflect.Value.NumMethod(i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload1090), !dbg !1118
  %icmp.1984.i = icmp sgt i64 %call.1563.i, 0, !dbg !1119
  br i1 %icmp.1984.i, label %then.173.lr.ph.i, label %command_line_arguments.printMethods.exit

then.173.lr.ph.i:                                 ; preds = %fallthrough.172.i
  %tmp.159.sroa.0.0.cast.2004.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.576.i, i64 0, i64 0, i32 0
  %tmp.159.sroa.2.0.cast.2004.sroa_idx6.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.576.i, i64 0, i64 0, i32 1
  %tmp.160.sroa.0.0.cast.2006.sroa_idx.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.576.i, i64 0, i64 1, i32 0
  %tmp.160.sroa.2.0.cast.2006.sroa_idx7.i = getelementptr inbounds [2 x { %_type.0*, i8* }], [2 x { %_type.0*, i8* }]* %tmpv.576.i, i64 0, i64 1, i32 1
  %29 = bitcast %IPST.1* %tmp.161.i to i8**
  %field.757.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.161.i, i64 0, i32 1
  %field.758.i = getelementptr inbounds %IPST.1, %IPST.1* %tmp.161.i, i64 0, i32 2
  br label %then.173.i

then.173.i:                                       ; preds = %then.173.i, %then.173.lr.ph.i
  %i.05.i = phi i64 [ 0, %then.173.lr.ph.i ], [ %add.5.i, %then.173.i ]
  call void @llvm.dbg.value(metadata i64 %i.05.i, metadata !1115, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload1090, metadata !1104, metadata !DIExpression(DW_OP_deref)), !dbg !1109
  %call.152.i = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload1090), !dbg !1120
  %call.152.fca.0.extract.i = extractvalue { i64, i64 } %call.152.i, 0, !dbg !1120
  %call.152.fca.1.extract.i = extractvalue { i64, i64 } %call.152.i, 1, !dbg !1120
  %30 = inttoptr i64 %call.152.fca.0.extract.i to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !1122
  %field.746.i = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %30, i64 0, i32 19, !dbg !1122
  %.field.ld.85.i = load void (%Method.0*, i8*, i8*, i64)*, void (%Method.0*, i8*, i8*, i64)** %field.746.i, align 8, !dbg !1122
  %31 = inttoptr i64 %call.152.fca.1.extract.i to i8*, !dbg !1122
  call void %.field.ld.85.i(%Method.0* nonnull sret %sret.actual.79.i, i8* nest undef, i8* %31, i64 %i.05.i), !dbg !1122
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmpv.570.i.0.sroa_cast, i8* nonnull align 8 %24, i64 16, i1 false)
  %command_line_arguments.PkgLogger.field.ld.33.i = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1123
  %field.754.i = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.33.i, i64 0, i32 1, !dbg !1123
  %.field.ld.86.i = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.754.i, align 8, !dbg !1123
  %command_line_arguments.PkgLogger.field.ld.34.i = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1123
  %call.153.i = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0)), !dbg !1123
  %call.154.i = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !1123
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* nonnull align 8 %21, i64 24, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.154.i, i8* nonnull %25), !dbg !1123
  %call.155.i = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1123
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %tmpv.570.i.0.sroa_cast, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.155.i, i8* nonnull %26), !dbg !1123
  store %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), %_type.0** %tmp.159.sroa.0.0.cast.2004.sroa_idx.i, align 8, !dbg !1123
  store i8* %call.154.i, i8** %tmp.159.sroa.2.0.cast.2004.sroa_idx6.i, align 8, !dbg !1123
  store %_type.0* @string..d, %_type.0** %tmp.160.sroa.0.0.cast.2006.sroa_idx.i, align 8, !dbg !1123
  store i8* %call.155.i, i8** %tmp.160.sroa.2.0.cast.2006.sroa_idx7.i, align 8, !dbg !1123
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...62x.7interface.4.5, i64 0, i32 0), i8* %call.153.i, i8* nonnull %27), !dbg !1123
  store i8* %call.153.i, i8** %29, align 8, !dbg !1123
  store i64 2, i64* %field.757.i, align 8, !dbg !1123
  store i64 2, i64* %field.758.i, align 8, !dbg !1123
  call void %.field.ld.86.i(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.34.i, i64 ptrtoint ([16 x i8]* @const.207 to i64), i64 15, %IPST.1* byval nonnull %tmp.161.i), !dbg !1123
  %add.5.i = add nuw nsw i64 %i.05.i, 1, !dbg !1124
  call void @llvm.dbg.value(metadata i64 %add.5.i, metadata !1115, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.369.sroa.0.0.copyload1090, metadata !1104, metadata !DIExpression(DW_OP_deref)), !dbg !1109
  %call.156.i = call i64 @reflect.Value.NumMethod(i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload1090), !dbg !1118
  %icmp.198.i = icmp slt i64 %add.5.i, %call.156.i, !dbg !1119
  br i1 %icmp.198.i, label %then.173.i, label %command_line_arguments.printMethods.exit

command_line_arguments.printMethods.exit:         ; preds = %then.173.i, %fallthrough.172.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23)
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %24)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %tmpv.570.i.0.sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27)
  %call.112 = call { i64, i64 } @reflect.Value.Type(i8* nest undef, %Value.0* nonnull %tmpv.369.sroa.0.0.copyload10), !dbg !1125
  %call.112.fca.0.extract = extractvalue { i64, i64 } %call.112, 0, !dbg !1125
  %call.112.fca.1.extract = extractvalue { i64, i64 } %call.112, 1, !dbg !1125
  %.field.ld.63 = load %Ident.0*, %Ident.0** %field.487, align 8, !dbg !1126
  %icmp.152 = icmp eq %Ident.0* %.field.ld.63, null, !dbg !1127
  br i1 %icmp.152, label %then.128, label %else.128

then.128:                                         ; preds = %command_line_arguments.printMethods.exit
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1127
  unreachable

else.128:                                         ; preds = %command_line_arguments.printMethods.exit
  %field.542 = getelementptr inbounds %Ident.0, %Ident.0* %.field.ld.63, i64 0, i32 1, !dbg !1127
  %cast.1529 = bitcast { i8*, i64 }* %tmpv.428 to i8*
  %cast.1530 = bitcast { i8*, i64 }* %field.542 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1529, i8* nonnull align 8 %cast.1530, i64 16, i1 false)
  %icmp.153 = icmp eq i64 %call.112.fca.0.extract, 0, !dbg !1125
  br i1 %icmp.153, label %fallthrough.129, label %else.129

fallthrough.129:                                  ; preds = %else.128, %else.129
  %tmpv.433.0 = phi %_type.0* [ %.field.ld.64, %else.129 ], [ null, %else.128 ]
  %32 = inttoptr i64 %call.112.fca.1.extract to i8*, !dbg !1128
  %call.113 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1128
  %cast.1532 = bitcast { i8*, i64 }* %tmpv.431 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1532, i8* nonnull align 8 %cast.1529, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.113, i8* nonnull %cast.1532), !dbg !1128
  %tmp.112.sroa.0.0.cast.1541.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 0, i32 0, !dbg !1128
  store %_type.0* %tmpv.433.0, %_type.0** %tmp.112.sroa.0.0.cast.1541.sroa_idx, align 8, !dbg !1128
  %tmp.112.sroa.2.0.cast.1541.sroa_idx80 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 0, i32 1, !dbg !1128
  store i8* %32, i8** %tmp.112.sroa.2.0.cast.1541.sroa_idx80, align 8, !dbg !1128
  %tmp.113.sroa.0.0.cast.1543.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 1, i32 0, !dbg !1128
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.113.sroa.0.0.cast.1543.sroa_idx, align 8, !dbg !1128
  %tmp.113.sroa.2.0.cast.1543.sroa_idx81 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 1, i32 1, !dbg !1128
  %33 = bitcast i8** %tmp.113.sroa.2.0.cast.1543.sroa_idx81 to %Value.0**, !dbg !1128
  store %Value.0* %tmpv.369.sroa.0.0.copyload10, %Value.0** %33, align 8, !dbg !1128
  %tmp.114.sroa.0.0.cast.1545.sroa_idx = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 2, i32 0, !dbg !1128
  store %_type.0* @string..d, %_type.0** %tmp.114.sroa.0.0.cast.1545.sroa_idx, align 8, !dbg !1128
  %tmp.114.sroa.2.0.cast.1545.sroa_idx82 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 2, i32 1, !dbg !1128
  store i8* %call.113, i8** %tmp.114.sroa.2.0.cast.1545.sroa_idx82, align 8, !dbg !1128
  %field.553 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.115, i64 0, i32 0, !dbg !1128
  %cast.1548 = getelementptr inbounds [3 x { %_type.0*, i8* }], [3 x { %_type.0*, i8* }]* %tmpv.432, i64 0, i64 0, !dbg !1128
  store { %_type.0*, i8* }* %cast.1548, { %_type.0*, i8* }** %field.553, align 8, !dbg !1128
  %field.554 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.115, i64 0, i32 1, !dbg !1128
  store i64 3, i64* %field.554, align 8, !dbg !1128
  %field.555 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.115, i64 0, i32 2, !dbg !1128
  store i64 3, i64* %field.555, align 8, !dbg !1128
  %call.114 = call { i64, i64 } @fmt.Sprintf(i8* nest undef, i64 ptrtoint ([25 x i8]* @const.186 to i64), i64 24, %IPST.1* byval nonnull %tmp.115), !dbg !1128
  %call.114.fca.0.extract = extractvalue { i64, i64 } %call.114, 0, !dbg !1128
  %call.114.fca.1.extract = extractvalue { i64, i64 } %call.114, 1, !dbg !1128
  %call.115 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !1129
  %tmp.116.sroa.0.0.cast.1558.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.437, i64 0, i32 0, i32 0, !dbg !1130
  store { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* bitcast ({ %_type.0*, i64 (i8*, %SelectorExpr.0*)*, i64 (i8*, %SelectorExpr.0*)* }* @pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*), { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }** %tmp.116.sroa.0.0.cast.1558.sroa_idx, align 8, !dbg !1130
  %tmp.116.sroa.2.0.cast.1558.sroa_idx83 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.437, i64 0, i32 0, i32 1, !dbg !1130
  %34 = bitcast i8** %tmp.116.sroa.2.0.cast.1558.sroa_idx83 to %SelectorExpr.0**, !dbg !1130
  store %SelectorExpr.0* %e, %SelectorExpr.0** %34, align 8, !dbg !1130
  %field.559 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.437, i64 0, i32 1, !dbg !1130
  %cast.1560 = bitcast { i8*, i64 }* %field.559 to i8*, !dbg !1130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1560, i8* align 8 bitcast ({ i8*, i64 }* @const.189 to i8*), i64 16, i1 false), !dbg !1130
  %tmpv.434.sroa.0.0.cast.1562.sroa_idx = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.437, i64 0, i32 2, !dbg !1130
  %tmpv.434.sroa.0.0.cast.1562.sroa_cast = bitcast { i8*, i64 }* %tmpv.434.sroa.0.0.cast.1562.sroa_idx to i64*, !dbg !1130
  store i64 %call.114.fca.0.extract, i64* %tmpv.434.sroa.0.0.cast.1562.sroa_cast, align 8, !dbg !1130
  %tmpv.434.sroa.2.0.cast.1562.sroa_idx3 = getelementptr inbounds %EvalError.0, %EvalError.0* %tmpv.437, i64 0, i32 2, i32 1, !dbg !1130
  store i64 %call.114.fca.1.extract, i64* %tmpv.434.sroa.2.0.cast.1562.sroa_idx3, align 8, !dbg !1130
  %cast.1566 = bitcast %EvalError.0* %tmpv.437 to i8*, !dbg !1129
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.115, i8* nonnull %cast.1566), !dbg !1129
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1064, metadata !DIExpression()), !dbg !1065
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1074
  call void @llvm.dbg.value(metadata i8* %call.115, metadata !1073, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1074
  %tmp.117.sroa.0.0.cast.1573.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 0, !dbg !1129
  store %Value.0* null, %Value.0** %tmp.117.sroa.0.0.cast.1573.sroa_idx, align 8, !dbg !1129
  %tmp.117.sroa.2.0.cast.1573.sroa_idx84 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 0, !dbg !1129
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* bitcast ({ %_type.0*, { i64, i64 } (i8*, %EvalError.0*)* }* @imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError to { %_type.0*, { i64, i64 } (i8*, i8*)* }*), { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.117.sroa.2.0.cast.1573.sroa_idx84, align 8, !dbg !1129
  %tmp.117.sroa.3.0.cast.1573.sroa_idx85 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.9, i64 0, i32 1, i32 1, !dbg !1129
  store i8* %call.115, i8** %tmp.117.sroa.3.0.cast.1573.sroa_idx85, align 8, !dbg !1129
  ret void, !dbg !1129

else.129:                                         ; preds = %else.128
  %35 = inttoptr i64 %call.112.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !1125
  %field.545 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %35, i64 0, i32 0, !dbg !1125
  %.field.ld.64 = load %_type.0*, %_type.0** %field.545, align 8, !dbg !1125
  br label %fallthrough.129
}

define void @command_line_arguments.Context.evalStmt({ %Value.0*, %error.0 }* nocapture sret %sret.formal.12, i8* nest nocapture readnone %nest.21, %Context.0* %c, i64 %stmt.chunk0, i64 %stmt.chunk1) #0 !dbg !1131 {
entry:
  %tmp.172 = alloca %IPST.1, align 8
  %tmp.163 = alloca %IPST.1, align 8
  %tmpv.579 = alloca [1 x { %_type.0*, i8* }], align 8
  %sret.actual.80 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.81 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.82 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.83 = alloca { %Value.0*, %error.0 }, align 8
  %sret.actual.84 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.621 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !1134, metadata !DIExpression()), !dbg !1135
  call void @llvm.dbg.value(metadata i64 %stmt.chunk0, metadata !1136, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1137
  call void @llvm.dbg.value(metadata i64 %stmt.chunk1, metadata !1136, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1137
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1138, metadata !DIExpression()), !dbg !1139
  %icmp.204 = icmp eq %Context.0* %c, null, !dbg !1140
  br i1 %icmp.204, label %then.174, label %else.174

then.174:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1140
  unreachable

else.174:                                         ; preds = %entry
  %field.776 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 2, !dbg !1140
  %.field.ld.91 = load i8, i8* %field.776, align 1, !dbg !1140
  %0 = and i8 %.field.ld.91, 1, !dbg !1141
  %trunc.192 = icmp eq i8 %0, 0, !dbg !1141
  br i1 %trunc.192, label %else.175, label %else.176

else.175:                                         ; preds = %else.174
  %call.159 = call %_type.0* @runtime.ifacetype(i8* nest undef, i64 %stmt.chunk0, i64 %stmt.chunk1), !dbg !1142
  %call.160 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i64 0, i32 0), %_type.0* %call.159), !dbg !1143
  %icmp.205 = icmp eq i8 %call.160, 0, !dbg !1143
  br i1 %icmp.205, label %label.0, label %else.181

else.176:                                         ; preds = %else.174
  store i8 0, i8* %field.776, align 1, !dbg !1144
  %field.772 = getelementptr inbounds %Context.0, %Context.0* %c, i64 0, i32 3, !dbg !1145
  %.field.ld.89 = load %Value.0*, %Value.0** %field.772, align 8, !dbg !1145
  %call.158 = call i8 @reflect.Value.IsValid(i8* nest undef, %Value.0* %.field.ld.89), !dbg !1146
  %icmp.202 = icmp eq i8 %call.158, 0, !dbg !1147
  br i1 %icmp.202, label %then.178, label %else.180

then.178:                                         ; preds = %else.176
  %command_line_arguments.PkgLogger.field.ld.35 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1148
  %field.767 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.35, i64 0, i32 1, !dbg !1148
  %.field.ld.88 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.767, align 8, !dbg !1148
  %command_line_arguments.PkgLogger.field.ld.36 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1148
  %call.157 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1148
  %icmp.200 = icmp eq i64 %stmt.chunk0, 0, !dbg !1149
  br i1 %icmp.200, label %fallthrough.179, label %else.179

fallthrough.179:                                  ; preds = %then.178, %else.179
  %tmpv.580.0 = phi %_type.0* [ %.field.ld.87, %else.179 ], [ null, %then.178 ]
  %1 = inttoptr i64 %stmt.chunk1 to i8*, !dbg !1148
  %tmp.162.sroa.0.0.cast.2018.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.579, i64 0, i64 0, i32 0, !dbg !1148
  store %_type.0* %tmpv.580.0, %_type.0** %tmp.162.sroa.0.0.cast.2018.sroa_idx, align 8, !dbg !1148
  %tmp.162.sroa.2.0.cast.2018.sroa_idx40 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.579, i64 0, i64 0, i32 1, !dbg !1148
  store i8* %1, i8** %tmp.162.sroa.2.0.cast.2018.sroa_idx40, align 8, !dbg !1148
  %cast.2022 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.579 to i8*, !dbg !1148
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.157, i8* nonnull %cast.2022), !dbg !1148
  %2 = bitcast %IPST.1* %tmp.163 to i8**, !dbg !1148
  store i8* %call.157, i8** %2, align 8, !dbg !1148
  %field.770 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.163, i64 0, i32 1, !dbg !1148
  store i64 1, i64* %field.770, align 8, !dbg !1148
  %field.771 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.163, i64 0, i32 2, !dbg !1148
  store i64 1, i64* %field.771, align 8, !dbg !1148
  call void %.field.ld.88(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.36, i64 ptrtoint ([11 x i8]* @const.209 to i64), i64 10, %IPST.1* byval nonnull %tmp.163), !dbg !1148
  br label %else.180

else.179:                                         ; preds = %then.178
  %3 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1149
  %field.762 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %3, i64 0, i32 0, !dbg !1149
  %.field.ld.87 = load %_type.0*, %_type.0** %field.762, align 8, !dbg !1149
  br label %fallthrough.179

else.180:                                         ; preds = %fallthrough.179, %else.176
  %4 = bitcast %Value.0** %field.772 to i64*, !dbg !1150
  %.field.ld.9088 = load i64, i64* %4, align 8, !dbg !1150
  call void @llvm.dbg.value(metadata %Value.0** %field.772, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %5 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1151
  store i64 %.field.ld.9088, i64* %5, align 8, !dbg !1151
  %tmp.164.sroa.2.0.cast.2033.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1151
  %tmp.164.sroa.2.0.cast.2033.sroa_cast = bitcast %error.0* %tmp.164.sroa.2.0.cast.2033.sroa_idx to i8*, !dbg !1151
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.164.sroa.2.0.cast.2033.sroa_cast, i8 0, i64 16, i1 false), !dbg !1151
  ret void, !dbg !1151

else.181:                                         ; preds = %else.175
  %icmp.206 = icmp eq i64 %stmt.chunk0, 0, !dbg !1152
  br i1 %icmp.206, label %fallthrough.182, label %else.182

label.0:                                          ; preds = %else.175
  %call.161 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.IfStmt, i64 0, i32 0), %_type.0* %call.159), !dbg !1154
  %icmp.207 = icmp eq i8 %call.161, 0, !dbg !1154
  br i1 %icmp.207, label %label.2, label %else.183

fallthrough.182:                                  ; preds = %else.181, %else.182
  %tmpv.589.0 = phi %_type.0* [ %.field.ld.92, %else.182 ], [ null, %else.181 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.BlockStmt, i64 0, i32 0), %_type.0* %tmpv.589.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0)), !dbg !1155
  %cast.2045 = inttoptr i64 %stmt.chunk1 to %BlockStmt.0*, !dbg !1155
  call void @llvm.dbg.value(metadata %BlockStmt.0* %cast.2045, metadata !1156, metadata !DIExpression()), !dbg !1157
  call void @command_line_arguments.Context.evalBlockStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.80, i8* nest undef, %Context.0* nonnull %c, %BlockStmt.0* %cast.2045), !dbg !1158
  %6 = bitcast { %Value.0*, %error.0 }* %sret.actual.80 to i64*, !dbg !1158
  %tmpv.590.sroa.0.0.copyload2181 = load i64, i64* %6, align 8, !dbg !1158
  %tmpv.590.sroa.3.0.cast.2049.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.80, i64 0, i32 1, !dbg !1158
  %tmpv.590.sroa.3.0.cast.2049.sroa_cast = bitcast %error.0* %tmpv.590.sroa.3.0.cast.2049.sroa_idx to i8*, !dbg !1158
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.80, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %7 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1159
  store i64 %tmpv.590.sroa.0.0.copyload2181, i64* %7, align 8, !dbg !1159
  %tmp.165.sroa.2.0.cast.2058.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1159
  %tmp.165.sroa.2.0.cast.2058.sroa_cast = bitcast %error.0* %tmp.165.sroa.2.0.cast.2058.sroa_idx to i8*, !dbg !1159
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.165.sroa.2.0.cast.2058.sroa_cast, i8* nonnull align 8 %tmpv.590.sroa.3.0.cast.2049.sroa_cast, i64 16, i1 false), !dbg !1159
  ret void, !dbg !1159

else.182:                                         ; preds = %else.181
  %8 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1152
  %field.779 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %8, i64 0, i32 0, !dbg !1152
  %.field.ld.92 = load %_type.0*, %_type.0** %field.779, align 8, !dbg !1152
  br label %fallthrough.182

else.183:                                         ; preds = %label.0
  %icmp.208 = icmp eq i64 %stmt.chunk0, 0, !dbg !1160
  br i1 %icmp.208, label %fallthrough.184, label %else.184

label.2:                                          ; preds = %label.0
  %call.162 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ReturnStmt, i64 0, i32 0), %_type.0* %call.159), !dbg !1162
  %icmp.209 = icmp eq i8 %call.162, 0, !dbg !1162
  br i1 %icmp.209, label %label.3, label %else.185

fallthrough.184:                                  ; preds = %else.183, %else.184
  %tmpv.595.0 = phi %_type.0* [ %.field.ld.93, %else.184 ], [ null, %else.183 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.IfStmt, i64 0, i32 0), %_type.0* %tmpv.595.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0)), !dbg !1163
  %cast.2065 = inttoptr i64 %stmt.chunk1 to %IfStmt.0*, !dbg !1163
  call void @llvm.dbg.value(metadata %IfStmt.0* %cast.2065, metadata !1164, metadata !DIExpression()), !dbg !1157
  call void @command_line_arguments.Context.evalIfStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.81, i8* nest undef, %Context.0* nonnull %c, %IfStmt.0* %cast.2065), !dbg !1165
  %9 = bitcast { %Value.0*, %error.0 }* %sret.actual.81 to i64*, !dbg !1165
  %tmpv.596.sroa.0.0.copyload1882 = load i64, i64* %9, align 8, !dbg !1165
  %tmpv.596.sroa.3.0.cast.2069.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.81, i64 0, i32 1, !dbg !1165
  %tmpv.596.sroa.3.0.cast.2069.sroa_cast = bitcast %error.0* %tmpv.596.sroa.3.0.cast.2069.sroa_idx to i8*, !dbg !1165
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.81, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %10 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1166
  store i64 %tmpv.596.sroa.0.0.copyload1882, i64* %10, align 8, !dbg !1166
  %tmp.166.sroa.2.0.cast.2078.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1166
  %tmp.166.sroa.2.0.cast.2078.sroa_cast = bitcast %error.0* %tmp.166.sroa.2.0.cast.2078.sroa_idx to i8*, !dbg !1166
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.166.sroa.2.0.cast.2078.sroa_cast, i8* nonnull align 8 %tmpv.596.sroa.3.0.cast.2069.sroa_cast, i64 16, i1 false), !dbg !1166
  ret void, !dbg !1166

else.184:                                         ; preds = %else.183
  %11 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1160
  %field.787 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %11, i64 0, i32 0, !dbg !1160
  %.field.ld.93 = load %_type.0*, %_type.0** %field.787, align 8, !dbg !1160
  br label %fallthrough.184

else.185:                                         ; preds = %label.2
  %icmp.210 = icmp eq i64 %stmt.chunk0, 0, !dbg !1167
  br i1 %icmp.210, label %fallthrough.186, label %else.186

label.3:                                          ; preds = %label.2
  %call.163 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.AssignStmt, i64 0, i32 0), %_type.0* %call.159), !dbg !1169
  %icmp.211 = icmp eq i8 %call.163, 0, !dbg !1169
  br i1 %icmp.211, label %label.4, label %else.187

fallthrough.186:                                  ; preds = %else.185, %else.186
  %tmpv.601.0 = phi %_type.0* [ %.field.ld.94, %else.186 ], [ null, %else.185 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ReturnStmt, i64 0, i32 0), %_type.0* %tmpv.601.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0)), !dbg !1170
  %cast.2085 = inttoptr i64 %stmt.chunk1 to %ReturnStmt.0*, !dbg !1170
  call void @llvm.dbg.value(metadata %ReturnStmt.0* %cast.2085, metadata !1171, metadata !DIExpression()), !dbg !1157
  call void @command_line_arguments.Context.evalReturnStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.82, i8* nest undef, %Context.0* nonnull %c, %ReturnStmt.0* %cast.2085), !dbg !1172
  %12 = bitcast { %Value.0*, %error.0 }* %sret.actual.82 to i64*, !dbg !1172
  %tmpv.602.sroa.0.0.copyload1583 = load i64, i64* %12, align 8, !dbg !1172
  %tmpv.602.sroa.3.0.cast.2089.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.82, i64 0, i32 1, !dbg !1172
  %tmpv.602.sroa.3.0.cast.2089.sroa_cast = bitcast %error.0* %tmpv.602.sroa.3.0.cast.2089.sroa_idx to i8*, !dbg !1172
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.82, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %13 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1173
  store i64 %tmpv.602.sroa.0.0.copyload1583, i64* %13, align 8, !dbg !1173
  %tmp.167.sroa.2.0.cast.2098.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1173
  %tmp.167.sroa.2.0.cast.2098.sroa_cast = bitcast %error.0* %tmp.167.sroa.2.0.cast.2098.sroa_idx to i8*, !dbg !1173
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.167.sroa.2.0.cast.2098.sroa_cast, i8* nonnull align 8 %tmpv.602.sroa.3.0.cast.2089.sroa_cast, i64 16, i1 false), !dbg !1173
  ret void, !dbg !1173

else.186:                                         ; preds = %else.185
  %14 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1167
  %field.795 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %14, i64 0, i32 0, !dbg !1167
  %.field.ld.94 = load %_type.0*, %_type.0** %field.795, align 8, !dbg !1167
  br label %fallthrough.186

else.187:                                         ; preds = %label.3
  %icmp.212 = icmp eq i64 %stmt.chunk0, 0, !dbg !1174
  br i1 %icmp.212, label %fallthrough.188, label %else.188

label.4:                                          ; preds = %label.3
  %call.164 = call i8 @runtime.ifacetypeeq(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ExprStmt, i64 0, i32 0), %_type.0* %call.159), !dbg !1176
  %icmp.213 = icmp eq i8 %call.164, 0, !dbg !1176
  %icmp.215 = icmp eq i64 %stmt.chunk0, 0, !dbg !1177
  br i1 %icmp.213, label %label.5, label %else.189

fallthrough.188:                                  ; preds = %else.187, %else.188
  %tmpv.607.0 = phi %_type.0* [ %.field.ld.95, %else.188 ], [ null, %else.187 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.AssignStmt, i64 0, i32 0), %_type.0* %tmpv.607.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0)), !dbg !1179
  %cast.2105 = inttoptr i64 %stmt.chunk1 to %AssignStmt.0*, !dbg !1179
  call void @llvm.dbg.value(metadata %AssignStmt.0* %cast.2105, metadata !1180, metadata !DIExpression()), !dbg !1157
  call void @command_line_arguments.Context.evalAssignStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.83, i8* nest undef, %Context.0* nonnull %c, %AssignStmt.0* %cast.2105), !dbg !1181
  %15 = bitcast { %Value.0*, %error.0 }* %sret.actual.83 to i64*, !dbg !1181
  %tmpv.608.sroa.0.0.copyload1284 = load i64, i64* %15, align 8, !dbg !1181
  %tmpv.608.sroa.3.0.cast.2109.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.83, i64 0, i32 1, !dbg !1181
  %tmpv.608.sroa.3.0.cast.2109.sroa_cast = bitcast %error.0* %tmpv.608.sroa.3.0.cast.2109.sroa_idx to i8*, !dbg !1181
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.83, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %16 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1182
  store i64 %tmpv.608.sroa.0.0.copyload1284, i64* %16, align 8, !dbg !1182
  %tmp.168.sroa.2.0.cast.2118.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1182
  %tmp.168.sroa.2.0.cast.2118.sroa_cast = bitcast %error.0* %tmp.168.sroa.2.0.cast.2118.sroa_idx to i8*, !dbg !1182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.168.sroa.2.0.cast.2118.sroa_cast, i8* nonnull align 8 %tmpv.608.sroa.3.0.cast.2109.sroa_cast, i64 16, i1 false), !dbg !1182
  ret void, !dbg !1182

else.188:                                         ; preds = %else.187
  %17 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1174
  %field.803 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %17, i64 0, i32 0, !dbg !1174
  %.field.ld.95 = load %_type.0*, %_type.0** %field.803, align 8, !dbg !1174
  br label %fallthrough.188

else.189:                                         ; preds = %label.4
  br i1 %icmp.215, label %fallthrough.190, label %else.190

label.5:                                          ; preds = %label.4
  call void @llvm.dbg.value(metadata i64 %stmt.chunk0, metadata !1183, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1157
  call void @llvm.dbg.value(metadata i64 %stmt.chunk1, metadata !1183, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1157
  br i1 %icmp.215, label %fallthrough.191, label %else.191

fallthrough.190:                                  ; preds = %else.189, %else.190
  %tmpv.613.0 = phi %_type.0* [ %.field.ld.96, %else.190 ], [ null, %else.189 ]
  call void @runtime.assertI2T(i8* nest undef, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1go_ast.ExprStmt, i64 0, i32 0), %_type.0* %tmpv.613.0, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Stmt..d, i64 0, i32 0)), !dbg !1185
  %cast.2125 = inttoptr i64 %stmt.chunk1 to %ExprStmt.0*, !dbg !1185
  call void @llvm.dbg.value(metadata %ExprStmt.0* %cast.2125, metadata !1186, metadata !DIExpression()), !dbg !1157
  call void @command_line_arguments.Context.evalExprStmt({ %Value.0*, %error.0 }* nonnull sret %sret.actual.84, i8* nest undef, %Context.0* nonnull %c, %ExprStmt.0* %cast.2125), !dbg !1187
  %18 = bitcast { %Value.0*, %error.0 }* %sret.actual.84 to i64*, !dbg !1187
  %tmpv.614.sroa.0.0.copyload985 = load i64, i64* %18, align 8, !dbg !1187
  %tmpv.614.sroa.3.0.cast.2129.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.84, i64 0, i32 1, !dbg !1187
  %tmpv.614.sroa.3.0.cast.2129.sroa_cast = bitcast %error.0* %tmpv.614.sroa.3.0.cast.2129.sroa_idx to i8*, !dbg !1187
  call void @llvm.dbg.value(metadata { %Value.0*, %error.0 }* %sret.actual.84, metadata !1138, metadata !DIExpression(DW_OP_deref)), !dbg !1139
  %19 = bitcast { %Value.0*, %error.0 }* %sret.formal.12 to i64*, !dbg !1188
  store i64 %tmpv.614.sroa.0.0.copyload985, i64* %19, align 8, !dbg !1188
  %tmp.169.sroa.2.0.cast.2138.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.12, i64 0, i32 1, !dbg !1188
  %tmp.169.sroa.2.0.cast.2138.sroa_cast = bitcast %error.0* %tmp.169.sroa.2.0.cast.2138.sroa_idx to i8*, !dbg !1188
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %tmp.169.sroa.2.0.cast.2138.sroa_cast, i8* nonnull align 8 %tmpv.614.sroa.3.0.cast.2129.sroa_cast, i64 16, i1 false), !dbg !1188
  ret void, !dbg !1188

else.190:                                         ; preds = %else.189
  %20 = inttoptr i64 %stmt.chunk0 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, !dbg !1189
  %field.811 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %20, i64 0, i32 0, !dbg !1189
  %.field.ld.96 = load %_type.0*, %_type.0** %field.811, align 8, !dbg !1189
  br label %fallthrough.190

fallthrough.191:                                  ; preds = %label.5, %else.191
  %tmpv.620.0 = phi i64 [ %.field.ld.9786, %else.191 ], [ 0, %label.5 ]
  %call.165 = call { i64, i64 } @reflect.TypeOf(i8* nest undef, i64 %tmpv.620.0, i64 %stmt.chunk1), !dbg !1190
  %call.165.fca.0.extract = extractvalue { i64, i64 } %call.165, 0, !dbg !1190
  %call.165.fca.1.extract = extractvalue { i64, i64 } %call.165, 1, !dbg !1190
  %icmp.216 = icmp eq i64 %call.165.fca.0.extract, 0, !dbg !1190
  br i1 %icmp.216, label %fallthrough.192, label %else.192

else.191:                                         ; preds = %label.5
  %21 = inttoptr i64 %stmt.chunk0 to i64*, !dbg !1191
  %.field.ld.9786 = load i64, i64* %21, align 8, !dbg !1191
  br label %fallthrough.191

fallthrough.192:                                  ; preds = %fallthrough.191, %else.192
  %tmpv.622.0 = phi %_type.0* [ %.field.ld.98, %else.192 ], [ null, %fallthrough.191 ]
  %22 = inttoptr i64 %call.165.fca.1.extract to i8*, !dbg !1192
  %tmp.171.sroa.0.0.cast.2150.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.621, i64 0, i64 0, i32 0, !dbg !1192
  store %_type.0* %tmpv.622.0, %_type.0** %tmp.171.sroa.0.0.cast.2150.sroa_idx, align 8, !dbg !1192
  %tmp.171.sroa.2.0.cast.2150.sroa_idx80 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.621, i64 0, i64 0, i32 1, !dbg !1192
  store i8* %22, i8** %tmp.171.sroa.2.0.cast.2150.sroa_idx80, align 8, !dbg !1192
  %field.829 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.172, i64 0, i32 0, !dbg !1192
  %cast.2153 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.621, i64 0, i64 0, !dbg !1192
  store { %_type.0*, i8* }* %cast.2153, { %_type.0*, i8* }** %field.829, align 8, !dbg !1192
  %field.830 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.172, i64 0, i32 1, !dbg !1192
  store i64 1, i64* %field.830, align 8, !dbg !1192
  %field.831 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.172, i64 0, i32 2, !dbg !1192
  store i64 1, i64* %field.831, align 8, !dbg !1192
  %call.166 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([31 x i8]* @const.211 to i64), i64 30, %IPST.1* byval nonnull %tmp.172), !dbg !1192
  %call.166.fca.0.extract = extractvalue { i64, i64 } %call.166, 0, !dbg !1192
  %call.166.fca.1.extract = extractvalue { i64, i64 } %call.166, 1, !dbg !1192
  %icmp.217 = icmp eq i64 %call.166.fca.0.extract, 0, !dbg !1192
  br i1 %icmp.217, label %fallthrough.193, label %else.193

else.192:                                         ; preds = %fallthrough.191
  %23 = inttoptr i64 %call.165.fca.0.extract to { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, !dbg !1190
  %field.825 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.8*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i64, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i64, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*, i64)*, { i64, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i64, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }* %23, i64 0, i32 0, !dbg !1190
  %.field.ld.98 = load %_type.0*, %_type.0** %field.825, align 8, !dbg !1190
  br label %fallthrough.192

fallthrough.193:                                  ; preds = %fallthrough.192, %else.193
  %tmpv.624.0 = phi i64 [ %.field.ld.9987, %else.193 ], [ 0, %fallthrough.192 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.624.0, i64 %call.166.fca.1.extract), !dbg !1193
  unreachable

else.193:                                         ; preds = %fallthrough.192
  %24 = inttoptr i64 %call.166.fca.0.extract to i64*, !dbg !1192
  %.field.ld.9987 = load i64, i64* %24, align 8, !dbg !1192
  br label %fallthrough.193
}

define void @command_line_arguments.Context.evalUnaryExpr({ %Value.0*, %error.0 }* nocapture sret %sret.formal.11, i8* nest nocapture readnone %nest.17, %Context.0* %c, %UnaryExpr.0* readonly %e) #0 !dbg !1194 {
entry:
  %tmp.154 = alloca %IPST.1, align 8
  %tmp.150 = alloca %IPST.1, align 8
  %sret.actual.71 = alloca { %Value.0*, %error.0 }, align 8
  %tmpv.536 = alloca [1 x { %_type.0*, i8* }], align 8
  %tmpv.540 = alloca %Value.0, align 8
  %sret.actual.72 = alloca %Value.0, align 8
  %tmpv.549 = alloca [1 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %Context.0* %c, metadata !1197, metadata !DIExpression()), !dbg !1198
  call void @llvm.dbg.value(metadata %UnaryExpr.0* %e, metadata !1199, metadata !DIExpression()), !dbg !1200
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1201, metadata !DIExpression()), !dbg !1202
  %icmp.183 = icmp eq %UnaryExpr.0* %e, null, !dbg !1203
  br i1 %icmp.183, label %then.159, label %else.159

then.159:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1203
  unreachable

else.159:                                         ; preds = %entry
  %tmpv.528.sroa.0.0.cast.1848.sroa_idx = getelementptr inbounds %UnaryExpr.0, %UnaryExpr.0* %e, i64 0, i32 2, i32 0
  %tmpv.528.sroa.0.0.copyload = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }** %tmpv.528.sroa.0.0.cast.1848.sroa_idx, align 8
  %tmpv.528.sroa.3.0.cast.1848.sroa_idx3 = getelementptr inbounds %UnaryExpr.0, %UnaryExpr.0* %e, i64 0, i32 2, i32 1
  %0 = bitcast i8** %tmpv.528.sroa.3.0.cast.1848.sroa_idx3 to i64*
  %tmpv.528.sroa.3.0.copyload42 = load i64, i64* %0, align 8
  %icmp.184 = icmp eq { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.528.sroa.0.0.copyload, null, !dbg !1203
  br i1 %icmp.184, label %fallthrough.160, label %else.160

fallthrough.160:                                  ; preds = %else.159, %else.160
  %tmpv.530.0 = phi %_type.0* [ %.field.ld.78, %else.160 ], [ null, %else.159 ]
  %call.137 = call i8* @runtime.requireitab(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @go_ast.Node..d, i64 0, i32 0), %_type.0* %tmpv.530.0), !dbg !1203
  %1 = ptrtoint i8* %call.137 to i64, !dbg !1203
  call void @command_line_arguments.Context.Eval({ %Value.0*, %error.0 }* nonnull sret %sret.actual.71, i8* nest undef, %Context.0* %c, i64 %1, i64 %tmpv.528.sroa.3.0.copyload42), !dbg !1205
  %tmpv.527.sroa.0.0.cast.1855.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.71, i64 0, i32 0, !dbg !1205
  %tmpv.527.sroa.0.0.copyload4 = load %Value.0*, %Value.0** %tmpv.527.sroa.0.0.cast.1855.sroa_idx, align 8, !dbg !1205
  %tmpv.527.sroa.3.sroa.0.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.71, i64 0, i32 1, i32 0, !dbg !1205
  %tmpv.527.sroa.3.sroa.0.0.copyload16 = load { %_type.0*, { i64, i64 } (i8*, i8*)* }*, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmpv.527.sroa.3.sroa.0.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx, align 8, !dbg !1205
  call void @llvm.dbg.value(metadata %Value.0* %tmpv.527.sroa.0.0.copyload4, metadata !1206, metadata !DIExpression()), !dbg !1207
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.527.sroa.3.sroa.0.0.copyload16, metadata !1208, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1207
  %icmp.185 = icmp eq { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.527.sroa.3.sroa.0.0.copyload16, null, !dbg !1209
  br i1 %icmp.185, label %else.161, label %then.161

else.160:                                         ; preds = %else.159
  %field.694 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (i8*, i8*)* }* %tmpv.528.sroa.0.0.copyload, i64 0, i32 0, !dbg !1203
  %.field.ld.78 = load %_type.0*, %_type.0** %field.694, align 8, !dbg !1203
  br label %fallthrough.160

then.161:                                         ; preds = %fallthrough.160
  %tmpv.527.sroa.3.sroa.3.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx17 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.actual.71, i64 0, i32 1, i32 1, !dbg !1205
  %2 = bitcast i8** %tmpv.527.sroa.3.sroa.3.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx17 to i64*, !dbg !1205
  %tmpv.527.sroa.3.sroa.3.0.copyload1843 = load i64, i64* %2, align 8, !dbg !1205
  call void @llvm.dbg.value(metadata i8** %tmpv.527.sroa.3.sroa.3.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx17, metadata !1208, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1207
  call void @llvm.dbg.value(metadata %Value.0* null, metadata !1201, metadata !DIExpression()), !dbg !1202
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.527.sroa.3.sroa.0.0.copyload16, metadata !1210, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1211
  call void @llvm.dbg.value(metadata i8** %tmpv.527.sroa.3.sroa.3.0.tmpv.527.sroa.3.0.cast.1855.sroa_cast.sroa_idx17, metadata !1210, metadata !DIExpression(DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)), !dbg !1211
  %tmp.148.sroa.0.0.cast.1867.sroa_idx = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.11, i64 0, i32 0, !dbg !1212
  store %Value.0* null, %Value.0** %tmp.148.sroa.0.0.cast.1867.sroa_idx, align 8, !dbg !1212
  %tmp.148.sroa.2.0.cast.1867.sroa_idx36 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.11, i64 0, i32 1, i32 0, !dbg !1212
  store { %_type.0*, { i64, i64 } (i8*, i8*)* }* %tmpv.527.sroa.3.sroa.0.0.copyload16, { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.148.sroa.2.0.cast.1867.sroa_idx36, align 8, !dbg !1212
  %tmp.148.sroa.3.0.cast.1867.sroa_idx37 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.11, i64 0, i32 1, i32 1, !dbg !1212
  %3 = bitcast i8** %tmp.148.sroa.3.0.cast.1867.sroa_idx37 to i64*, !dbg !1212
  store i64 %tmpv.527.sroa.3.sroa.3.0.copyload1843, i64* %3, align 8, !dbg !1212
  ret void, !dbg !1212

else.161:                                         ; preds = %fallthrough.160
  %command_line_arguments.PkgLogger.field.ld.28 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1213
  %field.706 = getelementptr inbounds { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.28, i64 0, i32 1, !dbg !1213
  %.field.ld.79 = load void (i8*, i8*, i64, i64, %IPST.1*)*, void (i8*, i8*, i64, i64, %IPST.1*)** %field.706, align 8, !dbg !1213
  %command_line_arguments.PkgLogger.field.ld.29 = load i8*, i8** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 1), align 8, !dbg !1213
  %call.138 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0)), !dbg !1213
  %tmp.149.sroa.0.0.cast.1874.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.536, i64 0, i64 0, i32 0, !dbg !1213
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type...1reflect.Value, i64 0, i32 0), %_type.0** %tmp.149.sroa.0.0.cast.1874.sroa_idx, align 8, !dbg !1213
  %tmp.149.sroa.2.0.cast.1874.sroa_idx38 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.536, i64 0, i64 0, i32 1, !dbg !1213
  %4 = bitcast i8** %tmp.149.sroa.2.0.cast.1874.sroa_idx38 to %Value.0**, !dbg !1213
  store %Value.0* %tmpv.527.sroa.0.0.copyload4, %Value.0** %4, align 8, !dbg !1213
  %cast.1878 = bitcast [1 x { %_type.0*, i8* }]* %tmpv.536 to i8*, !dbg !1213
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.1, %ArrayType.1* @type...61x.7interface.4.5, i64 0, i32 0), i8* %call.138, i8* nonnull %cast.1878), !dbg !1213
  %5 = bitcast %IPST.1* %tmp.150 to i8**, !dbg !1213
  store i8* %call.138, i8** %5, align 8, !dbg !1213
  %field.709 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.150, i64 0, i32 1, !dbg !1213
  store i64 1, i64* %field.709, align 8, !dbg !1213
  %field.710 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.150, i64 0, i32 2, !dbg !1213
  store i64 1, i64* %field.710, align 8, !dbg !1213
  call void %.field.ld.79(i8* nest undef, i8* %command_line_arguments.PkgLogger.field.ld.29, i64 ptrtoint ([20 x i8]* @const.196 to i64), i64 19, %IPST.1* byval nonnull %tmp.150), !dbg !1213
  %field.727 = getelementptr inbounds %UnaryExpr.0, %UnaryExpr.0* %e, i64 0, i32 1, !dbg !1214
  %.field.ld.82 = load i64, i64* %field.727, align 8, !dbg !1214
  %cond = icmp eq i64 %.field.ld.82, 43
  br i1 %cond, label %case.5, label %else.165

case.5:                                           ; preds = %else.161
  %call.139 = call i8 @reflect.Value.Bool(i8* nest undef, %Value.0* %tmpv.527.sroa.0.0.copyload4), !dbg !1215
  %icmp.186 = icmp eq i8 %call.139, 0, !dbg !1217
  %zext.186 = zext i1 %icmp.186 to i8, !dbg !1217
  %call.140 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @bool..d), !dbg !1217
  store i8 %zext.186, i8* %call.140, align 1, !dbg !1217
  %6 = ptrtoint i8* %call.140 to i64, !dbg !1217
  call void @reflect.ValueOf(%Value.0* nonnull sret %sret.actual.72, i8* nest undef, i64 ptrtoint (%_type.0* @bool..d to i64), i64 %6), !dbg !1218
  %cast.1882 = bitcast %Value.0* %tmpv.540 to i8*
  %cast.1883 = bitcast %Value.0* %sret.actual.72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.1882, i8* nonnull align 8 %cast.1883, i64 24, i1 false)
  %call.141 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0)), !dbg !1219
  %runtime.writeBarrier.ld.17 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !1218
  %icmp.188 = icmp eq i32 %runtime.writeBarrier.ld.17, 0, !dbg !1218
  br i1 %icmp.188, label %then.163, label %else.163

then.163:                                         ; preds = %case.5
  call void @llvm.dbg.value(metadata i8* %call.141, metadata !1220, metadata !DIExpression()), !dbg !1221
  %icmp.187 = icmp eq i8* %call.141, null, !dbg !1218
  br i1 %icmp.187, label %then.164, label %else.164

fallthrough.163:                                  ; preds = %else.163, %else.164
  call void @llvm.dbg.value(metadata i8* %call.141, metadata !1201, metadata !DIExpression()), !dbg !1202
  call void @llvm.dbg.value(metadata { %_type.0*, { i64, i64 } (i8*, i8*)* }* null, metadata !1210, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1211
  call void @llvm.dbg.value(metadata i8* null, metadata !1210, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1211
  %7 = bitcast { %Value.0*, %error.0 }* %sret.formal.11 to i8**, !dbg !1222
  store i8* %call.141, i8** %7, align 8, !dbg !1222
  %tmp.152.sroa.2.0.cast.1898.sroa_idx39 = getelementptr inbounds { %Value.0*, %error.0 }, { %Value.0*, %error.0 }* %sret.formal.11, i64 0, i32 1, i32 0, !dbg !1222
  %8 = bitcast { %_type.0*, { i64, i64 } (i8*, i8*)* }** %tmp.152.sroa.2.0.cast.1898.sroa_idx39 to i8*, !dbg !1222
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false), !dbg !1222
  ret void, !dbg !1222

else.163:                                         ; preds = %case.5
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @reflect.Value..d, i64 0, i32 0), i8* %call.141, i8* nonnull %cast.1882), !dbg !1218
  br label %fallthrough.163

then.164:                                         ; preds = %then.163
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1218
  unreachable

else.164:                                         ; preds = %then.163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.141, i8* nonnull align 8 %cast.1882, i64 24, i1 false), !dbg !1218
  br label %fallthrough.163

else.165:                                         ; preds = %else.161
  %call.142 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @go_token.Token..d), !dbg !1223
  %cast.1901 = bitcast i8* %call.142 to i64*, !dbg !1223
  store i64 %.field.ld.82, i64* %cast.1901, align 8, !dbg !1223
  %tmp.153.sroa.0.0.cast.1903.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.549, i64 0, i64 0, i32 0, !dbg !1223
  store %_type.0* @go_token.Token..d, %_type.0** %tmp.153.sroa.0.0.cast.1903.sroa_idx, align 8, !dbg !1223
  %tmp.153.sroa.2.0.cast.1903.sroa_idx41 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.549, i64 0, i64 0, i32 1, !dbg !1223
  store i8* %call.142, i8** %tmp.153.sroa.2.0.cast.1903.sroa_idx41, align 8, !dbg !1223
  %field.718 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.154, i64 0, i32 0, !dbg !1223
  %cast.1906 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.549, i64 0, i64 0, !dbg !1223
  store { %_type.0*, i8* }* %cast.1906, { %_type.0*, i8* }** %field.718, align 8, !dbg !1223
  %field.719 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.154, i64 0, i32 1, !dbg !1223
  store i64 1, i64* %field.719, align 8, !dbg !1223
  %field.720 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.154, i64 0, i32 2, !dbg !1223
  store i64 1, i64* %field.720, align 8, !dbg !1223
  %call.143 = call { i64, i64 } @fmt.Errorf(i8* nest undef, i64 ptrtoint ([24 x i8]* @const.198 to i64), i64 23, %IPST.1* byval nonnull %tmp.154), !dbg !1223
  %call.143.fca.0.extract = extractvalue { i64, i64 } %call.143, 0, !dbg !1223
  %call.143.fca.1.extract = extractvalue { i64, i64 } %call.143, 1, !dbg !1223
  %icmp.190 = icmp eq i64 %call.143.fca.0.extract, 0, !dbg !1223
  br i1 %icmp.190, label %fallthrough.166, label %else.166

fallthrough.166:                                  ; preds = %else.165, %else.166
  %tmpv.551.0 = phi i64 [ %.field.ld.8144, %else.166 ], [ 0, %else.165 ]
  call void @runtime.gopanic(i8* nest undef, i64 %tmpv.551.0, i64 %call.143.fca.1.extract), !dbg !1224
  unreachable

else.166:                                         ; preds = %else.165
  %9 = inttoptr i64 %call.143.fca.0.extract to i64*, !dbg !1223
  %.field.ld.8144 = load i64, i64* %9, align 8, !dbg !1223
  br label %fallthrough.166
}

define void @command_line_arguments.NewContext({ %Context.0*, %error.0 }* nocapture sret %sret.formal.1, i8* nest nocapture readnone %nest.5, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %identifiers) #0 !dbg !1225 {
entry:
  %tmp.17 = alloca %IPST.1, align 8
  %tmpv.59 = alloca %Context.0, align 8
  %k = alloca { i8*, i64 }, align 8
  %v = alloca { %_type.0*, i8* }, align 8
  %tmpv.60 = alloca { i8*, i64 }, align 8
  %tmpv.62 = alloca %IPST.2, align 8
  %tmpv.65 = alloca { i8*, i64 }, align 8
  %tmpv.74 = alloca { i8*, i64 }, align 8
  %tmpv.75 = alloca [1 x { %_type.0*, i8* }], align 8
  %sret.actual.16 = alloca { i64, %error.0 }, align 8
  %tmpv.77 = alloca { i8*, i64 }, align 8
  %tmpv.78 = alloca { %_type.0*, i8* }, align 8
  call void @llvm.dbg.value(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %identifiers, metadata !1232, metadata !DIExpression()), !dbg !1233
  call void @llvm.dbg.value(metadata %Context.0* null, metadata !1234, metadata !DIExpression()), !dbg !1235
  %call.26 = call %FileSet.0* @go_token.NewFileSet(i8* nest undef), !dbg !1236
  %call.27 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Context..d, i64 0, i32 0)), !dbg !1238
  %field.61 = getelementptr inbounds %Context.0, %Context.0* %tmpv.59, i64 0, i32 0, !dbg !1239
  store %FileSet.0* %call.26, %FileSet.0** %field.61, align 8, !dbg !1239
  %field.62 = getelementptr inbounds %Context.0, %Context.0* %tmpv.59, i64 0, i32 1, !dbg !1239
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %identifiers, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.62, align 8, !dbg !1239
  %field.63 = getelementptr inbounds %Context.0, %Context.0* %tmpv.59, i64 0, i32 2, !dbg !1239
  store i8 0, i8* %field.63, align 8, !dbg !1239
  %field.64 = getelementptr inbounds %Context.0, %Context.0* %tmpv.59, i64 0, i32 3, !dbg !1239
  store %Value.0* null, %Value.0** %field.64, align 8, !dbg !1239
  %cast.396 = bitcast %Context.0* %tmpv.59 to i8*, !dbg !1238
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.Context..d, i64 0, i32 0), i8* %call.27, i8* nonnull %cast.396), !dbg !1238
  call void @llvm.dbg.value(metadata i8* %call.27, metadata !1240, metadata !DIExpression()), !dbg !1241
  %k.0.sroa_cast = bitcast { i8*, i64 }* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %k.0.sroa_cast)
  %v.0.sroa_cast = bitcast { %_type.0*, i8* }* %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %v.0.sroa_cast)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %k.0.sroa_cast, i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %v.0.sroa_cast, i8 0, i64 16, i1 false)
  %cast.401 = bitcast { i8*, i64 }* %tmpv.60 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %cast.401, i8 0, i64 16, i1 false)
  %cast.405 = bitcast %IPST.2* %tmpv.62 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %cast.405, i8 0, i64 96, i1 false)
  %command_line_arguments.types.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** @command_line_arguments.types, align 8, !dbg !1242
  call void @runtime.mapiterinit(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %command_line_arguments.types.ld.0, i8* nonnull %cast.405), !dbg !1242
  %field.76 = getelementptr inbounds %IPST.2, %IPST.2* %tmpv.62, i64 0, i32 0, !dbg !1242
  %tmpv.62.field.ld.215 = load { i8*, i64 }*, { i8*, i64 }** %field.76, align 8, !dbg !1242
  %icmp.2316 = icmp eq { i8*, i64 }* %tmpv.62.field.ld.215, null, !dbg !1242
  br i1 %icmp.2316, label %else.23, label %then.23.lr.ph

then.23.lr.ph:                                    ; preds = %entry
  %field.66 = getelementptr inbounds %IPST.2, %IPST.2* %tmpv.62, i64 0, i32 1
  %0 = bitcast { %_type.0*, i8* }** %field.66 to i8**
  %cast.421 = bitcast { i8*, i64 }* %tmpv.65 to i8*
  %icmp.19 = icmp eq i8* %call.27, null
  %field.67 = getelementptr inbounds i8, i8* %call.27, i64 8
  %1 = bitcast i8* %field.67 to { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }**
  %cast.446 = bitcast { i8*, i64 }* %tmpv.77 to i8*
  %cast.448 = bitcast { %_type.0*, i8* }* %tmpv.78 to i8*
  %cast.435 = bitcast { i8*, i64 }* %tmpv.74 to i8*
  %tmp.16.sroa.0.0.cast.440.sroa_idx = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.75, i64 0, i64 0, i32 0
  %tmp.16.sroa.2.0.cast.440.sroa_idx6 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.75, i64 0, i64 0, i32 1
  %field.72 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.17, i64 0, i32 0
  %cast.443 = getelementptr inbounds [1 x { %_type.0*, i8* }], [1 x { %_type.0*, i8* }]* %tmpv.75, i64 0, i64 0
  %field.73 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.17, i64 0, i32 1
  %field.74 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.17, i64 0, i32 2
  %k18 = bitcast { i8*, i64 }* %k to i8*
  %v19 = bitcast { %_type.0*, i8* }* %v to i8*
  br label %then.23

then.18:                                          ; preds = %then.23
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1244
  unreachable

else.18:                                          ; preds = %then.23
  %.field.ld.7 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %1, align 8, !dbg !1244
  %call.28 = call { i64, i8 } @runtime.mapaccess2(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.7, i8* nonnull %cast.421), !dbg !1246
  %call.28.fca.1.extract = extractvalue { i64, i8 } %call.28, 1, !dbg !1246
  call void @llvm.dbg.value(metadata i8 %call.28.fca.1.extract, metadata !1247, metadata !DIExpression()), !dbg !1248
  %2 = and i8 %call.28.fca.1.extract, 1, !dbg !1249
  %trunc.21 = icmp eq i8 %2, 0, !dbg !1249
  br i1 %trunc.21, label %else.19, label %then.19

then.19:                                          ; preds = %else.18
  %call.29 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1250
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.435, i8* nonnull align 8 %k.0.sroa_cast, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.29, i8* nonnull %cast.435), !dbg !1250
  store %_type.0* @string..d, %_type.0** %tmp.16.sroa.0.0.cast.440.sroa_idx, align 8, !dbg !1250
  store i8* %call.29, i8** %tmp.16.sroa.2.0.cast.440.sroa_idx6, align 8, !dbg !1250
  store { %_type.0*, i8* }* %cast.443, { %_type.0*, i8* }** %field.72, align 8, !dbg !1250
  store i64 1, i64* %field.73, align 8, !dbg !1250
  store i64 1, i64* %field.74, align 8, !dbg !1250
  call void @fmt.Printf({ i64, %error.0 }* nonnull sret %sret.actual.16, i8* nest undef, i64 ptrtoint ([27 x i8]* @const.118 to i64), i64 26, %IPST.1* byval nonnull %tmp.17), !dbg !1250
  br label %label.2

else.19:                                          ; preds = %else.18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.446, i8* nonnull align 8 %k.0.sroa_cast, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.448, i8* nonnull align 8 %v.0.sroa_cast, i64 16, i1 false)
  %.field.ld.8 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %1, align 8, !dbg !1251
  %call.30 = call i8* @runtime.mapassign(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.1, %MapType.1* @type..map.6string.7interface.4.5, i64 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %.field.ld.8, i8* nonnull %cast.446), !dbg !1252
  %runtime.writeBarrier.ld.3 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !1252
  %icmp.22 = icmp eq i32 %runtime.writeBarrier.ld.3, 0, !dbg !1252
  br i1 %icmp.22, label %then.21, label %else.21

label.2:                                          ; preds = %else.22, %else.21, %then.19
  call void @runtime.mapiternext(i8* nest undef, i8* nonnull %cast.405), !dbg !1242
  %tmpv.62.field.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %field.76, align 8, !dbg !1242
  %icmp.23 = icmp eq { i8*, i64 }* %tmpv.62.field.ld.2, null, !dbg !1242
  br i1 %icmp.23, label %else.23, label %then.23

then.21:                                          ; preds = %else.19
  %icmp.21 = icmp eq i8* %call.30, null, !dbg !1252
  br i1 %icmp.21, label %then.22, label %else.22

else.21:                                          ; preds = %else.19
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @type..interface.4.5, i64 0, i32 0), i8* %call.30, i8* nonnull %cast.448), !dbg !1252
  br label %label.2

then.22:                                          ; preds = %then.21
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1252
  unreachable

else.22:                                          ; preds = %then.21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call.30, i8* nonnull align 8 %cast.448, i64 16, i1 false), !dbg !1252
  br label %label.2

then.23:                                          ; preds = %then.23.lr.ph, %label.2
  %tmpv.62.field.ld.217 = phi { i8*, i64 }* [ %tmpv.62.field.ld.215, %then.23.lr.ph ], [ %tmpv.62.field.ld.2, %label.2 ]
  %cast.410 = bitcast { i8*, i64 }* %tmpv.62.field.ld.217 to i8*, !dbg !1242
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.401, i8* align 8 %cast.410, i64 16, i1 false), !dbg !1242
  %tmpv.62.field.ld.19 = load i8*, i8** %0, align 8, !dbg !1242
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %k18, i8* nonnull align 8 %cast.401, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %v19, i8* align 8 %tmpv.62.field.ld.19, i64 16, i1 false)
  call void @llvm.dbg.value(metadata i8 0, metadata !1247, metadata !DIExpression()), !dbg !1248
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.421, i8* nonnull align 8 %cast.401, i64 16, i1 false)
  br i1 %icmp.19, label %then.18, label %else.18

else.23:                                          ; preds = %label.2, %entry
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %k.0.sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %v.0.sroa_cast)
  call void @llvm.dbg.value(metadata i8* %call.27, metadata !1234, metadata !DIExpression()), !dbg !1235
  %3 = bitcast { %Context.0*, %error.0 }* %sret.formal.1 to i8**, !dbg !1253
  store i8* %call.27, i8** %3, align 8, !dbg !1253
  %tmp.18.sroa.2.0.cast.468.sroa_idx = getelementptr inbounds { %Context.0*, %error.0 }, { %Context.0*, %error.0 }* %sret.formal.1, i64 0, i32 1, !dbg !1253
  %tmp.18.sroa.2.0.cast.468.sroa_cast = bitcast %error.0* %tmp.18.sroa.2.0.cast.468.sroa_idx to i8*, !dbg !1253
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %tmp.18.sroa.2.0.cast.468.sroa_cast, i8 0, i64 16, i1 false), !dbg !1253
  ret void, !dbg !1253
}

declare %FileSet.0* @go_token.NewFileSet(i8*) local_unnamed_addr #0

declare void @runtime.mapiterinit(i8*, %_type.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8*) local_unnamed_addr #0

declare void @fmt.Printf({ i64, %error.0 }*, i8*, i64, i64, %IPST.1*) local_unnamed_addr #0

declare void @runtime.mapiternext(i8*, i8*) local_unnamed_addr #0

declare %_type.0* @runtime.ifacetype(i8*, i64, i64) local_unnamed_addr #0

declare void @runtime.assertI2T(i8*, %_type.0*, %_type.0*, %_type.0*) local_unnamed_addr #0

declare { i64, i64 } @reflect.TypeOf(i8*, i64, i64) local_unnamed_addr #0

declare { i64, i64 } @errors.New(i8*, i64, i64) local_unnamed_addr #0

declare i8 @runtime.ifaceT2Ip(i8*, %_type.0*, %_type.0*) local_unnamed_addr #0

declare i8* @runtime.assertitab(i8*, %_type.0*, %_type.0*) local_unnamed_addr #0

define i64 @command_line_arguments.command_line_arguments.EvalError..hash(i8* nest nocapture readnone %nest.29, i8* %key, i64 %seed) #0 !dbg !1254 {
entry:
  call void @llvm.dbg.value(metadata i8* %key, metadata !1255, metadata !DIExpression()), !dbg !1256
  call void @llvm.dbg.value(metadata i64 %seed, metadata !1257, metadata !DIExpression()), !dbg !1256
  call void @llvm.dbg.value(metadata i64 0, metadata !1258, metadata !DIExpression()), !dbg !1256
  %pticast.5 = ptrtoint i8* %key to i64, !dbg !1256
  %call.184 = call i64 @runtime.interhash(i8* nest undef, i8* %key, i64 %seed), !dbg !1256
  %add.8 = add i64 %pticast.5, 16, !dbg !1256
  %itpcast.1 = inttoptr i64 %add.8 to i8*, !dbg !1256
  %call.185 = call i64 @runtime.strhash(i8* nest undef, i8* %itpcast.1, i64 %call.184), !dbg !1256
  %add.9 = add i64 %pticast.5, 32, !dbg !1256
  %itpcast.2 = inttoptr i64 %add.9 to i8*, !dbg !1256
  %call.186 = call i64 @runtime.strhash(i8* nest undef, i8* %itpcast.2, i64 %call.185), !dbg !1256
  call void @llvm.dbg.value(metadata i64 %call.186, metadata !1258, metadata !DIExpression()), !dbg !1256
  ret i64 %call.186, !dbg !1256
}

define i8 @command_line_arguments.command_line_arguments.EvalError..eq(i8* nest nocapture readnone %nest.30, i8* readonly %key1, i8* readonly %key2) #0 !dbg !1259 {
entry:
  call void @llvm.dbg.value(metadata i8* %key1, metadata !1260, metadata !DIExpression()), !dbg !1261
  call void @llvm.dbg.value(metadata i8* %key2, metadata !1262, metadata !DIExpression()), !dbg !1261
  call void @llvm.dbg.value(metadata i8 0, metadata !1263, metadata !DIExpression()), !dbg !1261
  %icmp.270 = icmp eq i8* %key1, null, !dbg !1261
  br i1 %icmp.270, label %then.243, label %else.243

then.243:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1261
  unreachable

else.243:                                         ; preds = %entry
  %icmp.271 = icmp eq i8* %key2, null, !dbg !1261
  br i1 %icmp.271, label %then.244, label %else.244

then.244:                                         ; preds = %else.243
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1261
  unreachable

else.244:                                         ; preds = %else.243
  %field0.110 = bitcast i8* %key1 to i64*, !dbg !1261
  %ld.205 = load i64, i64* %field0.110, align 8, !dbg !1261
  %field1.110 = getelementptr inbounds i8, i8* %key1, i64 8, !dbg !1261
  %0 = bitcast i8* %field1.110 to i64*, !dbg !1261
  %ld.206 = load i64, i64* %0, align 8, !dbg !1261
  %field0.111 = bitcast i8* %key2 to i64*, !dbg !1261
  %ld.207 = load i64, i64* %field0.111, align 8, !dbg !1261
  %field1.111 = getelementptr inbounds i8, i8* %key2, i64 8, !dbg !1261
  %1 = bitcast i8* %field1.111 to i64*, !dbg !1261
  %ld.208 = load i64, i64* %1, align 8, !dbg !1261
  %call.187 = call i8 @runtime.ifaceeq(i8* nest undef, i64 %ld.205, i64 %ld.206, i64 %ld.207, i64 %ld.208), !dbg !1261
  %icmp.272 = icmp eq i8 %call.187, 1, !dbg !1261
  br i1 %icmp.272, label %else.247, label %then.245

then.245:                                         ; preds = %else.247, %else.244
  call void @llvm.dbg.value(metadata i8 0, metadata !1263, metadata !DIExpression()), !dbg !1261
  ret i8 0, !dbg !1261

else.247:                                         ; preds = %else.244
  %field.996 = getelementptr inbounds i8, i8* %key1, i64 16, !dbg !1261
  %field.997 = getelementptr inbounds i8, i8* %key2, i64 16, !dbg !1261
  %field0.112 = bitcast i8* %field.996 to i64*, !dbg !1261
  %ld.209 = load i64, i64* %field0.112, align 8, !dbg !1261
  %field1.112 = getelementptr inbounds i8, i8* %key1, i64 24, !dbg !1261
  %2 = bitcast i8* %field1.112 to i64*, !dbg !1261
  %ld.210 = load i64, i64* %2, align 8, !dbg !1261
  %field0.113 = bitcast i8* %field.997 to i64*, !dbg !1261
  %ld.211 = load i64, i64* %field0.113, align 8, !dbg !1261
  %field1.113 = getelementptr inbounds i8, i8* %key2, i64 24, !dbg !1261
  %3 = bitcast i8* %field1.113 to i64*, !dbg !1261
  %ld.212 = load i64, i64* %3, align 8, !dbg !1261
  %call.188 = call i8 @runtime.eqstring(i8* nest undef, i64 %ld.209, i64 %ld.210, i64 %ld.211, i64 %ld.212), !dbg !1261
  %icmp.275 = icmp eq i8 %call.188, 1, !dbg !1261
  br i1 %icmp.275, label %else.250, label %then.245

else.250:                                         ; preds = %else.247
  %field.998 = getelementptr inbounds i8, i8* %key1, i64 32, !dbg !1261
  %field.999 = getelementptr inbounds i8, i8* %key2, i64 32, !dbg !1261
  %field0.114 = bitcast i8* %field.998 to i64*, !dbg !1261
  %ld.213 = load i64, i64* %field0.114, align 8, !dbg !1261
  %field1.114 = getelementptr inbounds i8, i8* %key1, i64 40, !dbg !1261
  %4 = bitcast i8* %field1.114 to i64*, !dbg !1261
  %ld.214 = load i64, i64* %4, align 8, !dbg !1261
  %field0.115 = bitcast i8* %field.999 to i64*, !dbg !1261
  %ld.215 = load i64, i64* %field0.115, align 8, !dbg !1261
  %field1.115 = getelementptr inbounds i8, i8* %key2, i64 40, !dbg !1261
  %5 = bitcast i8* %field1.115 to i64*, !dbg !1261
  %ld.216 = load i64, i64* %5, align 8, !dbg !1261
  %call.189 = call i8 @runtime.eqstring(i8* nest undef, i64 %ld.213, i64 %ld.214, i64 %ld.215, i64 %ld.216), !dbg !1261
  %icmp.278 = icmp eq i8 %call.189, 1, !dbg !1261
  %spec.select = zext i1 %icmp.278 to i8
  ret i8 %spec.select
}

define i64 @command_line_arguments.EvalError.End..stub(i8* nest nocapture readnone %nest.28, %EvalError.0* readonly %"$this8.pointer") #0 !dbg !1264 {
entry:
  %tmpv.751 = alloca %EvalError.0, align 8
  call void @llvm.dbg.value(metadata %EvalError.0* %"$this8.pointer", metadata !1273, metadata !DIExpression()), !dbg !1274
  %call.182 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !1274
  %icmp.267 = icmp eq %EvalError.0* %"$this8.pointer", null, !dbg !1274
  br i1 %icmp.267, label %then.240, label %else.240

then.240:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1274
  unreachable

else.240:                                         ; preds = %entry
  %cast.2521 = bitcast %EvalError.0* %tmpv.751 to i8*
  %cast.2522 = bitcast %EvalError.0* %"$this8.pointer" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.2521, i8* align 8 %cast.2522, i64 48, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.182, i8* nonnull %cast.2521), !dbg !1274
  call void @llvm.dbg.value(metadata i8* %call.182, metadata !1275, metadata !DIExpression()), !dbg !1274
  call void @llvm.dbg.value(metadata i64 0, metadata !1276, metadata !DIExpression()), !dbg !1274
  %icmp.268 = icmp eq i8* %call.182, null, !dbg !1277
  br i1 %icmp.268, label %then.241, label %else.242

then.241:                                         ; preds = %else.240
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1277
  unreachable

else.242:                                         ; preds = %else.240
  %field.991 = bitcast i8* %call.182 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }**, !dbg !1277
  %.field.ld.116 = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }** %field.991, align 8, !dbg !1277
  %field.992 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* %.field.ld.116, i64 0, i32 1, !dbg !1277
  %.field.ld.117 = load i64 (i8*, i8*)*, i64 (i8*, i8*)** %field.992, align 8, !dbg !1277
  %field.993 = getelementptr inbounds i8, i8* %call.182, i64 8, !dbg !1277
  %0 = bitcast i8* %field.993 to i8**, !dbg !1277
  %.field.ld.118 = load i8*, i8** %0, align 8, !dbg !1277
  %call.183 = call i64 %.field.ld.117(i8* nest undef, i8* %.field.ld.118), !dbg !1277
  call void @llvm.dbg.value(metadata i64 %call.183, metadata !1276, metadata !DIExpression()), !dbg !1274
  ret i64 %call.183, !dbg !1277
}

define { i64, i64 } @command_line_arguments.EvalError.Error(i8* nest nocapture readnone %nest.10, %EvalError.0* readonly %pointer) #0 !dbg !1279 {
entry:
  %tmp.42 = alloca %IPST.1, align 8
  %e = alloca %EvalError.0, align 8
  %tmpv.161 = alloca { i8*, i64 }, align 8
  %tmpv.162 = alloca { i8*, i64 }, align 8
  %tmpv.164 = alloca { i8*, i64 }, align 8
  %tmpv.168 = alloca { i8*, i64 }, align 8
  %tmpv.169 = alloca [4 x { %_type.0*, i8* }], align 8
  call void @llvm.dbg.value(metadata %EvalError.0* %pointer, metadata !1282, metadata !DIExpression()), !dbg !1283
  %0 = bitcast %EvalError.0* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %0)
  %icmp.50 = icmp eq %EvalError.0* %pointer, null, !dbg !1283
  br i1 %icmp.50, label %then.40, label %else.40

then.40:                                          ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1283
  unreachable

else.40:                                          ; preds = %entry
  %cast.775 = bitcast %EvalError.0* %pointer to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* align 8 %cast.775, i64 48, i1 false)
  call void @llvm.dbg.value(metadata %EvalError.0* %e, metadata !1284, metadata !DIExpression(DW_OP_deref)), !dbg !1283
  %call.49 = call i64 @command_line_arguments.EvalError.Pos..stub(i8* nest undef, %EvalError.0* nonnull %e), !dbg !1285
  call void @llvm.dbg.value(metadata %EvalError.0* %e, metadata !1284, metadata !DIExpression(DW_OP_deref)), !dbg !1283
  %call.50 = call i64 @command_line_arguments.EvalError.End..stub(i8* nest undef, %EvalError.0* nonnull %e), !dbg !1286
  %field.179 = getelementptr inbounds %EvalError.0, %EvalError.0* %e, i64 0, i32 1, !dbg !1287
  %cast.737 = bitcast { i8*, i64 }* %tmpv.161 to i8*
  %cast.738 = bitcast { i8*, i64 }* %field.179 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.737, i8* nonnull align 8 %cast.738, i64 16, i1 false)
  %field.180 = getelementptr inbounds %EvalError.0, %EvalError.0* %e, i64 0, i32 2, !dbg !1288
  %cast.739 = bitcast { i8*, i64 }* %tmpv.162 to i8*
  %cast.740 = bitcast { i8*, i64 }* %field.180 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.739, i8* nonnull align 8 %cast.740, i64 16, i1 false)
  %call.51 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1289
  %cast.742 = bitcast { i8*, i64 }* %tmpv.164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.742, i8* nonnull align 8 %cast.737, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.51, i8* nonnull %cast.742), !dbg !1289
  %call.52 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @go_token.Pos..d), !dbg !1289
  %cast.746 = bitcast i8* %call.52 to i64*, !dbg !1289
  store i64 %call.49, i64* %cast.746, align 8, !dbg !1289
  %call.53 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @go_token.Pos..d), !dbg !1289
  %cast.747 = bitcast i8* %call.53 to i64*, !dbg !1289
  store i64 %call.50, i64* %cast.747, align 8, !dbg !1289
  %call.54 = call i8* @runtime.newobject(i8* nest undef, %_type.0* nonnull @string..d), !dbg !1289
  %cast.749 = bitcast { i8*, i64 }* %tmpv.168 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.749, i8* nonnull align 8 %cast.739, i64 16, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* nonnull @string..d, i8* %call.54, i8* nonnull %cast.749), !dbg !1289
  %tmp.38.sroa.0.0.cast.757.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 0, i32 0, !dbg !1289
  store %_type.0* @string..d, %_type.0** %tmp.38.sroa.0.0.cast.757.sroa_idx, align 8, !dbg !1289
  %tmp.38.sroa.2.0.cast.757.sroa_idx5 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 0, i32 1, !dbg !1289
  store i8* %call.51, i8** %tmp.38.sroa.2.0.cast.757.sroa_idx5, align 8, !dbg !1289
  %tmp.39.sroa.0.0.cast.759.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 1, i32 0, !dbg !1289
  store %_type.0* @go_token.Pos..d, %_type.0** %tmp.39.sroa.0.0.cast.759.sroa_idx, align 8, !dbg !1289
  %tmp.39.sroa.2.0.cast.759.sroa_idx6 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 1, i32 1, !dbg !1289
  store i8* %call.52, i8** %tmp.39.sroa.2.0.cast.759.sroa_idx6, align 8, !dbg !1289
  %tmp.40.sroa.0.0.cast.761.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 2, i32 0, !dbg !1289
  store %_type.0* @go_token.Pos..d, %_type.0** %tmp.40.sroa.0.0.cast.761.sroa_idx, align 8, !dbg !1289
  %tmp.40.sroa.2.0.cast.761.sroa_idx7 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 2, i32 1, !dbg !1289
  store i8* %call.53, i8** %tmp.40.sroa.2.0.cast.761.sroa_idx7, align 8, !dbg !1289
  %tmp.41.sroa.0.0.cast.763.sroa_idx = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 3, i32 0, !dbg !1289
  store %_type.0* @string..d, %_type.0** %tmp.41.sroa.0.0.cast.763.sroa_idx, align 8, !dbg !1289
  %tmp.41.sroa.2.0.cast.763.sroa_idx8 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 3, i32 1, !dbg !1289
  store i8* %call.54, i8** %tmp.41.sroa.2.0.cast.763.sroa_idx8, align 8, !dbg !1289
  %field.189 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.42, i64 0, i32 0, !dbg !1289
  %cast.766 = getelementptr inbounds [4 x { %_type.0*, i8* }], [4 x { %_type.0*, i8* }]* %tmpv.169, i64 0, i64 0, !dbg !1289
  store { %_type.0*, i8* }* %cast.766, { %_type.0*, i8* }** %field.189, align 8, !dbg !1289
  %field.190 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.42, i64 0, i32 1, !dbg !1289
  store i64 4, i64* %field.190, align 8, !dbg !1289
  %field.191 = getelementptr inbounds %IPST.1, %IPST.1* %tmp.42, i64 0, i32 2, !dbg !1289
  store i64 4, i64* %field.191, align 8, !dbg !1289
  %call.55 = call { i64, i64 } @fmt.Sprintf(i8* nest undef, i64 ptrtoint ([14 x i8]* @const.143 to i64), i64 13, %IPST.1* byval nonnull %tmp.42), !dbg !1289
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %0), !dbg !1290
  ret { i64, i64 } %call.55, !dbg !1290
}

define i64 @command_line_arguments.EvalError.Pos..stub(i8* nest nocapture readnone %nest.27, %EvalError.0* readonly %"$this7.pointer") #0 !dbg !1291 {
entry:
  %tmpv.744 = alloca %EvalError.0, align 8
  call void @llvm.dbg.value(metadata %EvalError.0* %"$this7.pointer", metadata !1292, metadata !DIExpression()), !dbg !1293
  %call.180 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0)), !dbg !1293
  %icmp.264 = icmp eq %EvalError.0* %"$this7.pointer", null, !dbg !1293
  br i1 %icmp.264, label %then.237, label %else.237

then.237:                                         ; preds = %entry
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1293
  unreachable

else.237:                                         ; preds = %entry
  %cast.2511 = bitcast %EvalError.0* %tmpv.744 to i8*
  %cast.2512 = bitcast %EvalError.0* %"$this7.pointer" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %cast.2511, i8* align 8 %cast.2512, i64 48, i1 false)
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @command_line_arguments.EvalError..d, i64 0, i32 0), i8* %call.180, i8* nonnull %cast.2511), !dbg !1293
  call void @llvm.dbg.value(metadata i8* %call.180, metadata !1294, metadata !DIExpression()), !dbg !1293
  call void @llvm.dbg.value(metadata i64 0, metadata !1295, metadata !DIExpression()), !dbg !1293
  %icmp.265 = icmp eq i8* %call.180, null, !dbg !1296
  br i1 %icmp.265, label %then.238, label %else.239

then.238:                                         ; preds = %else.237
  call void @__go_runtime_error(i8* nest undef, i32 6), !dbg !1296
  unreachable

else.239:                                         ; preds = %else.237
  %field.987 = bitcast i8* %call.180 to { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }**, !dbg !1296
  %.field.ld.113 = load { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }*, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }** %field.987, align 8, !dbg !1296
  %field.988 = getelementptr inbounds { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }, { %_type.0*, i64 (i8*, i8*)*, i64 (i8*, i8*)* }* %.field.ld.113, i64 0, i32 2, !dbg !1296
  %.field.ld.114 = load i64 (i8*, i8*)*, i64 (i8*, i8*)** %field.988, align 8, !dbg !1296
  %field.989 = getelementptr inbounds i8, i8* %call.180, i64 8, !dbg !1296
  %0 = bitcast i8* %field.989 to i8**, !dbg !1296
  %.field.ld.115 = load i8*, i8** %0, align 8, !dbg !1296
  %call.181 = call i64 %.field.ld.114(i8* nest undef, i8* %.field.ld.115), !dbg !1296
  call void @llvm.dbg.value(metadata i64 %call.181, metadata !1295, metadata !DIExpression()), !dbg !1293
  ret i64 %call.181, !dbg !1296
}

declare { i64, i64 } @fmt.Sprintf(i8*, i64, i64, %IPST.1*) local_unnamed_addr #0

declare i8 @reflect.Value.IsValid(i8*, %Value.0*) local_unnamed_addr #0

declare i64 @reflect.Value.Kind(i8*, %Value.0*) local_unnamed_addr #0

declare i8 @reflect.Value.IsNil(i8*, %Value.0*) local_unnamed_addr #0

declare void @strconv.Unquote({ { i8*, i64 }, %error.0 }*, i8*, i64, i64) local_unnamed_addr #0

declare i8* @runtime.requireitab(i8*, %_type.0*, %_type.0*) local_unnamed_addr #0

declare void @runtime.growslice(%IPST.7*, i8*, %_type.0*, %IPST.7*, i64) local_unnamed_addr #0

declare void @reflect.Value.Call(%IPST.6*, i8*, %Value.0*, %IPST.6*) local_unnamed_addr #0

declare { i64, i8 } @runtime.ifaceI2T2P(i8*, %_type.0*, i64, i64) local_unnamed_addr #0

declare i64 @go_ast.SelectorExpr.End(i8*, %SelectorExpr.0*) #0

declare i64 @go_ast.SelectorExpr.Pos(i8*, %SelectorExpr.0*) #0

declare void @reflect.Value.MethodByName(%Value.0*, i8*, %Value.0*, i64, i64) local_unnamed_addr #0

declare i8 @reflect.Value.Bool(i8*, %Value.0*) local_unnamed_addr #0

define void @command_line_arguments.command_line_arguments..init0(i8* nest nocapture readnone %nest.18) #0 !dbg !1298 {
entry:
  %tmpv.555 = alloca %.command-line-arguments.logger.0, align 8
  %command_line_arguments.PkgLogger.field.ld.30 = load { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*, { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** getelementptr inbounds (%.command-line-arguments.logger.0, %.command-line-arguments.logger.0* @command_line_arguments.PkgLogger, i64 0, i32 0), align 8, !dbg !1299
  %icmp.194 = icmp eq { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* %command_line_arguments.PkgLogger.field.ld.30, null, !dbg !1299
  br i1 %icmp.194, label %then.167, label %fallthrough.167

then.167:                                         ; preds = %entry
  %call.144 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.1, %StructType.1* @github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger..d, i64 0, i32 0)), !dbg !1300
  %field.728 = getelementptr inbounds %.command-line-arguments.logger.0, %.command-line-arguments.logger.0* %tmpv.555, i64 0, i32 0, !dbg !1301
  store { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }* bitcast ({ %_type.0*, void (i8*, %NullLogger.0*, i64, i64, %IPST.1*)* }* @pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger to { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }*), { %_type.0*, void (i8*, i8*, i64, i64, %IPST.1*)* }** %field.728, align 8, !dbg !1301
  %field.729 = getelementptr inbounds %.command-line-arguments.logger.0, %.command-line-arguments.logger.0* %tmpv.555, i64 0, i32 1, !dbg !1301
  store i8* %call.144, i8** %field.729, align 8, !dbg !1301
  %runtime.writeBarrier.ld.18 = load i32, i32* @runtime.writeBarrier, align 4, !dbg !1301
  %icmp.193 = icmp eq i32 %runtime.writeBarrier.ld.18, 0, !dbg !1301
  %cast.1930 = bitcast %.command-line-arguments.logger.0* %tmpv.555 to i8*, !dbg !1301
  br i1 %icmp.193, label %else.169, label %else.168

fallthrough.167:                                  ; preds = %else.169, %else.168, %entry
  ret void

else.168:                                         ; preds = %then.167
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%InterfaceType.1, %InterfaceType.1* @command_line_arguments..command_line_arguments.logger..d, i64 0, i32 0), i8* bitcast (%.command-line-arguments.logger.0* @command_line_arguments.PkgLogger to i8*), i8* nonnull %cast.1930), !dbg !1301
  br label %fallthrough.167

else.169:                                         ; preds = %then.167
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%.command-line-arguments.logger.0* @command_line_arguments.PkgLogger to i8*), i8* nonnull align 8 %cast.1930, i64 16, i1 false), !dbg !1301
  br label %fallthrough.167
}

declare void @github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger.Printf(i8*, %NullLogger.0*, i64, i64, %IPST.1*) #0

declare void @reflect.Value.Elem(%Value.0*, i8*, %Value.0*) local_unnamed_addr #0

declare i64 @reflect.Value.NumMethod(i8*, %Value.0*) local_unnamed_addr #0

declare i64 @go_ast.ReturnStmt.End(i8*, %ReturnStmt.0*) #0

declare i64 @go_ast.ReturnStmt.Pos(i8*, %ReturnStmt.0*) #0

declare i64 @go_ast.BlockStmt.End(i8*, %BlockStmt.0*) #0

declare i64 @go_ast.BlockStmt.Pos(i8*, %BlockStmt.0*) #0

declare i64 @runtime.interhash(i8*, i8*, i64) local_unnamed_addr #0

declare i64 @runtime.strhash(i8*, i8*, i64) local_unnamed_addr #0

declare i8 @runtime.eqstring(i8*, i64, i64, i64, i64) local_unnamed_addr #0

declare void @runtime.registerGCRoots(i8*, i8*) local_unnamed_addr #0

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #1

attributes #0 = { "disable-tail-calls"="true" "no-frame-pointer-elim"="false" "split-stack" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "disable-tail-calls"="true" "no-frame-pointer-elim"="false" "split-stack" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind "disable-tail-calls"="true" "no-frame-pointer-elim"="false" "split-stack" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 7, !"PIC Level", i32 0}
!1 = distinct !DICompileUnit(language: DW_LANG_Go, file: !2, producer: "llvm-goc", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, globals: !4)
!2 = !DIFile(filename: "./binop.go", directory: "/home/wangcong/go_path/src/github.com/ChrisRx/dungeonfs/pkg/eval")
!3 = !{}
!4 = !{!5, !9, !30, !96, !98, !100, !152, !154}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "runtime.writeBarrier", linkageName: "runtime.writeBarrier", scope: !1, file: !7, line: 1, type: !8, isLocal: false, isDefinition: true)
!7 = !DIFile(filename: "<built-in>", directory: "")
!8 = !DIBasicType(name: "uint32", size: 32, encoding: DW_ATE_unsigned)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "command_line_arguments.types", linkageName: "command_line_arguments.types", scope: !1, file: !11, line: 9, type: !12, isLocal: true, isDefinition: true)
!11 = !DIFile(filename: "context.go", directory: ".")
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DICompositeType(tag: DW_TAG_structure_type, name: "runtime.hmap", file: !7, line: 1, size: 384, align: 8, elements: !14)
!14 = !{!15, !17, !19, !20, !22, !23, !26, !27, !29}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "count", file: !7, line: 1, baseType: !16, size: 64, align: 64)
!16 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "flags", file: !7, line: 1, baseType: !18, size: 8, align: 8, offset: 64)
!18 = !DIBasicType(name: "uint8", size: 8, encoding: DW_ATE_unsigned)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "B", file: !7, line: 1, baseType: !18, size: 8, align: 8, offset: 72)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "noverflow", file: !7, line: 1, baseType: !21, size: 16, align: 16, offset: 80)
!21 = !DIBasicType(name: "uint16", size: 16, encoding: DW_ATE_unsigned)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "hash0", file: !7, line: 1, baseType: !8, size: 32, align: 32, offset: 96)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "buckets", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 128)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIBasicType(name: "void")
!26 = !DIDerivedType(tag: DW_TAG_member, name: "oldbuckets", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 192)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "nevacuate", file: !7, line: 1, baseType: !28, size: 64, align: 64, offset: 256)
!28 = !DIBasicType(name: "uintptr", size: 64, encoding: DW_ATE_unsigned)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "extra", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 320)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "command_line_arguments.False", linkageName: "command_line_arguments.False", scope: !1, file: !32, line: 11, type: !33, isLocal: false, isDefinition: true)
!32 = !DIFile(filename: "eval.go", directory: ".")
!33 = !DICompositeType(tag: DW_TAG_structure_type, name: "Value", file: !34, line: 6, size: 192, align: 8, elements: !35)
!34 = !DIFile(filename: "binop.go", directory: ".")
!35 = !{!36, !93, !94}
!36 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !34, line: 6, baseType: !37, size: 64, align: 64)
!37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64)
!38 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.rtype", file: !34, line: 6, size: 576, align: 8, elements: !39)
!39 = !{!40, !41, !42, !43, !44, !46, !47, !48, !56, !65, !67, !73, !92}
!40 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !34, line: 6, baseType: !28, size: 64, align: 64)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "ptrdata", file: !34, line: 6, baseType: !28, size: 64, align: 64, offset: 64)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "hash", file: !34, line: 6, baseType: !8, size: 32, align: 32, offset: 128)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "kind", file: !34, line: 6, baseType: !18, size: 8, align: 8, offset: 160)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "align", file: !34, line: 6, baseType: !45, size: 8, align: 8, offset: 168)
!45 = !DIBasicType(name: "int8", size: 8, encoding: DW_ATE_signed)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "fieldAlign", file: !34, line: 6, baseType: !18, size: 8, align: 8, offset: 176)
!47 = !DIDerivedType(tag: DW_TAG_member, name: "_", file: !34, line: 6, baseType: !18, size: 8, align: 8, offset: 184)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "hashfn", file: !34, line: 6, baseType: !49, size: 64, align: 64, offset: 192)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!50 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !34, line: 6, size: 64, align: 8, elements: !51)
!51 = !{!52}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !34, line: 6, baseType: !53, size: 64, align: 64)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!54 = !DISubroutineType(types: !55)
!55 = !{!28, !24, !28}
!56 = !DIDerivedType(tag: DW_TAG_member, name: "equalfn", file: !34, line: 6, baseType: !57, size: 64, align: 64, offset: 256)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !34, line: 6, size: 64, align: 8, elements: !59)
!59 = !{!60}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !34, line: 6, baseType: !61, size: 64, align: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DISubroutineType(types: !63)
!63 = !{!64, !24, !24}
!64 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_unsigned)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "gcdata", file: !34, line: 6, baseType: !66, size: 64, align: 64, offset: 320)
!66 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "string", file: !34, line: 6, baseType: !68, size: 64, align: 64, offset: 384)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", file: !7, line: 1, size: 128, align: 8, elements: !70)
!70 = !{!71, !72}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "__data", file: !7, line: 1, baseType: !66, size: 64, align: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "__length", file: !7, line: 1, baseType: !16, size: 64, align: 64, offset: 64)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "uncommonType", file: !34, line: 6, baseType: !74, size: 64, align: 64, offset: 448)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !75, size: 64)
!75 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.uncommonType", file: !34, line: 6, size: 320, align: 8, elements: !76)
!76 = !{!77, !78, !79}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "name", file: !34, line: 6, baseType: !68, size: 64, align: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "pkgPath", file: !34, line: 6, baseType: !68, size: 64, align: 64, offset: 64)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "methods", file: !34, line: 6, baseType: !80, size: 192, align: 64, offset: 128)
!80 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*.reflect.method,int,int}", file: !81, size: 192, align: 8, elements: !82)
!81 = !DIFile(filename: "", directory: "")
!82 = !{!83, !90, !91}
!83 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !84, size: 64, align: 64)
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.method", file: !34, line: 6, size: 320, align: 8, elements: !86)
!86 = !{!77, !78, !87, !88, !89}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "mtyp", file: !34, line: 6, baseType: !24, size: 64, align: 64, offset: 128)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !34, line: 6, baseType: !24, size: 64, align: 64, offset: 192)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "tfn", file: !34, line: 6, baseType: !24, size: 64, align: 64, offset: 256)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "__count", file: !81, line: 1, baseType: !16, size: 64, align: 64, offset: 64)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "__capacity", file: !81, line: 1, baseType: !16, size: 64, align: 64, offset: 128)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "ptrToThis", file: !34, line: 6, baseType: !24, size: 64, align: 64, offset: 512)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", file: !34, line: 6, baseType: !24, size: 64, align: 64, offset: 64)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "flag", file: !34, line: 6, baseType: !95, size: 64, align: 64, offset: 128)
!95 = !DIBasicType(name: ".reflect.flag", size: 64, encoding: DW_ATE_unsigned)
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "command_line_arguments.True", linkageName: "command_line_arguments.True", scope: !1, file: !32, line: 12, type: !33, isLocal: false, isDefinition: true)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "command_line_arguments.Nil", linkageName: "command_line_arguments.Nil", scope: !1, file: !32, line: 13, type: !33, isLocal: false, isDefinition: true)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "command_line_arguments.ErrInvalidValue", linkageName: "command_line_arguments.ErrInvalidValue", scope: !1, file: !32, line: 15, type: !102, isLocal: false, isDefinition: true)
!102 = !DICompositeType(tag: DW_TAG_structure_type, name: "error", file: !7, line: 1, size: 128, align: 8, elements: !103)
!103 = !{!104, !151}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !7, line: 1, baseType: !105, size: 64, align: 64)
!105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!106 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)string}", file: !81, size: 128, align: 8, elements: !107)
!107 = !{!108, !147}
!108 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !81, line: 1, baseType: !109, size: 64, align: 64)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DICompositeType(tag: DW_TAG_structure_type, name: "_type", file: !7, line: 1, size: 576, align: 8, elements: !111)
!111 = !{!112, !113, !114, !115, !116, !117, !118, !123, !128, !129, !130, !146}
!112 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !7, line: 1, baseType: !28, size: 64, align: 64)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "ptrdata", file: !7, line: 1, baseType: !28, size: 64, align: 64, offset: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "hash", file: !7, line: 1, baseType: !8, size: 32, align: 32, offset: 128)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "kind", file: !7, line: 1, baseType: !18, size: 8, align: 8, offset: 160)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "align", file: !7, line: 1, baseType: !18, size: 8, align: 8, offset: 168)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "fieldAlign", file: !7, line: 1, baseType: !18, size: 8, align: 8, offset: 176)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "hashfn", file: !7, line: 1, baseType: !119, size: 64, align: 64, offset: 192)
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !120, size: 64)
!120 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !7, line: 1, size: 64, align: 8, elements: !121)
!121 = !{!122}
!122 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !7, line: 1, baseType: !53, size: 64, align: 64)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "equalfn", file: !7, line: 1, baseType: !124, size: 64, align: 64, offset: 256)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !7, line: 1, size: 64, align: 8, elements: !126)
!126 = !{!127}
!127 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !7, line: 1, baseType: !61, size: 64, align: 64)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "gcdata", file: !7, line: 1, baseType: !66, size: 64, align: 64, offset: 320)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "string", file: !7, line: 1, baseType: !68, size: 64, align: 64, offset: 384)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "uncommonType", file: !7, line: 1, baseType: !131, size: 64, align: 64, offset: 448)
!131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !132, size: 64)
!132 = !DICompositeType(tag: DW_TAG_structure_type, name: "uncommonType", file: !7, line: 1, size: 320, align: 8, elements: !133)
!133 = !{!134, !135, !136}
!134 = !DIDerivedType(tag: DW_TAG_member, name: "name", file: !7, line: 1, baseType: !68, size: 64, align: 64)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "pkgPath", file: !7, line: 1, baseType: !68, size: 64, align: 64, offset: 64)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "methods", file: !7, line: 1, baseType: !137, size: 192, align: 64, offset: 128)
!137 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*method,int,int}", file: !81, size: 192, align: 8, elements: !138)
!138 = !{!139, !90, !91}
!139 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !140, size: 64, align: 64)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = !DICompositeType(tag: DW_TAG_structure_type, name: "method", file: !7, line: 1, size: 320, align: 8, elements: !142)
!142 = !{!134, !135, !143, !144, !145}
!143 = !DIDerivedType(tag: DW_TAG_member, name: "mtyp", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 128)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 192)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "tfn", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 256)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "ptrToThis", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 512)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "Error", file: !81, line: 1, baseType: !148, size: 64, align: 64, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !149, size: 64)
!149 = !DISubroutineType(types: !150)
!150 = !{!69, !24}
!151 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !7, line: 1, baseType: !24, size: 64, align: 64, offset: 64)
!152 = !DIGlobalVariableExpression(var: !153, expr: !DIExpression())
!153 = distinct !DIGlobalVariable(name: "command_line_arguments.ErrReturnValue", linkageName: "command_line_arguments.ErrReturnValue", scope: !1, file: !32, line: 16, type: !102, isLocal: false, isDefinition: true)
!154 = !DIGlobalVariableExpression(var: !155, expr: !DIExpression())
!155 = distinct !DIGlobalVariable(name: "command_line_arguments.PkgLogger", linkageName: "command_line_arguments.PkgLogger", scope: !1, file: !156, line: 11, type: !157, isLocal: false, isDefinition: true)
!156 = !DIFile(filename: "logging.go", directory: ".")
!157 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.logger", file: !156, line: 7, size: 128, align: 8, elements: !158)
!158 = !{!159, !175}
!159 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !156, line: 7, baseType: !160, size: 64, align: 64)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !161, size: 64)
!161 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,string,struct{*struct{*_type,*void},int,int})void}", file: !81, size: 128, align: 8, elements: !162)
!162 = !{!163, !164}
!163 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !81, line: 7, baseType: !109, size: 64, align: 64)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "Printf", file: !81, line: 7, baseType: !165, size: 64, align: 64, offset: 64)
!165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!166 = !DISubroutineType(types: !167)
!167 = !{!25, !24, !69, !168}
!168 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*struct{*_type,*void},int,int}", file: !81, size: 192, align: 8, elements: !169)
!169 = !{!170, !90, !91}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !171, size: 64, align: 64)
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!172 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*void}", file: !81, size: 128, align: 8, elements: !173)
!173 = !{!108, !174}
!174 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !81, line: 1, baseType: !24, size: 64, align: 64, offset: 64)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !156, line: 1, baseType: !24, size: 64, align: 64, offset: 64)
!176 = distinct !DISubprogram(name: "eval.checkValues", scope: null, file: !32, line: 42, type: !177, isLocal: true, isDefinition: true, scopeLine: 42, isOptimized: false, unit: !1, retainedNodes: !3)
!177 = !DISubroutineType(types: !178)
!178 = !{!102, !179}
!179 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**Value,int,int}", file: !81, size: 192, align: 8, elements: !180)
!180 = !{!181, !90, !91}
!181 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !182, size: 64, align: 64)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!184 = !DILocalVariable(name: "values", arg: 1, scope: !176, file: !32, line: 42, type: !179)
!185 = !DILocation(line: 42, column: 18, scope: !176)
!186 = !DILocalVariable(name: "v", scope: !187, file: !32, line: 43, type: !183)
!187 = distinct !DILexicalBlock(scope: !176, file: !32, line: 43, column: 2)
!188 = !DILocation(line: 43, column: 6, scope: !176)
!189 = !DILocation(line: 43, column: 2, scope: !187)
!190 = !DILocation(line: 44, column: 8, scope: !187)
!191 = !DILocation(line: 44, column: 6, scope: !187)
!192 = !DILocation(line: 44, column: 23, scope: !187)
!193 = !DILocation(line: 44, column: 31, scope: !187)
!194 = !DILocation(line: 44, column: 3, scope: !187)
!195 = !DILocation(line: 44, column: 50, scope: !187)
!196 = !DILocation(line: 45, column: 15, scope: !187)
!197 = !DILocation(line: 45, column: 4, scope: !187)
!198 = !DILocalVariable(name: "$ret15", scope: !176, file: !32, line: 42, type: !102)
!199 = !DILocation(line: 42, column: 44, scope: !176)
!200 = !DILocation(line: 48, column: 2, scope: !176)
!201 = distinct !DISubprogram(name: "eval.command_line_arguments..import", linkageName: "command_line_arguments..import", scope: null, file: !34, line: 1, type: !202, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !1, retainedNodes: !3)
!202 = !DISubroutineType(types: !203)
!203 = !{!25}
!204 = !DILocation(line: 1, column: 1, scope: !205)
!205 = !DILexicalBlockFile(scope: !201, file: !7, discriminator: 0)
!206 = !DILocation(line: 9, column: 13, scope: !207)
!207 = !DILexicalBlockFile(scope: !201, file: !11, discriminator: 0)
!208 = !DILocation(line: 9, column: 5, scope: !207)
!209 = !DILocation(line: 11, column: 26, scope: !210)
!210 = !DILexicalBlockFile(scope: !201, file: !32, discriminator: 0)
!211 = !DILocation(line: 11, column: 18, scope: !210)
!212 = !DILocation(line: 11, column: 2, scope: !210)
!213 = !DILocation(line: 12, column: 26, scope: !210)
!214 = !DILocation(line: 12, column: 18, scope: !210)
!215 = !DILocation(line: 12, column: 2, scope: !210)
!216 = !DILocation(line: 13, column: 18, scope: !210)
!217 = !DILocation(line: 13, column: 2, scope: !210)
!218 = !DILocation(line: 15, column: 27, scope: !210)
!219 = !DILocation(line: 15, column: 2, scope: !210)
!220 = !DILocation(line: 16, column: 27, scope: !210)
!221 = !DILocation(line: 16, column: 2, scope: !210)
!222 = !DILocation(line: 13, column: 1, scope: !223)
!223 = !DILexicalBlockFile(scope: !201, file: !156, discriminator: 0)
!224 = distinct !DISubprogram(name: "eval.Insert..1command_line_arguments.Scope", linkageName: "command_line_arguments.Scope.Insert", scope: null, file: !11, line: 24, type: !225, isLocal: false, isDefinition: true, scopeLine: 24, isOptimized: false, unit: !1, retainedNodes: !3)
!225 = !DISubroutineType(types: !226)
!226 = !{!25, !227, !227, !69, !172}
!227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !228, size: 64)
!228 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scope", file: !11, line: 14, size: 64, align: 8, elements: !229)
!229 = !{!230}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "Objects", file: !11, line: 15, baseType: !12, size: 64, align: 64)
!231 = !DILocalVariable(name: "s", arg: 1, scope: !224, file: !11, line: 24, type: !227)
!232 = !DILocation(line: 24, column: 1, scope: !224)
!233 = !DILocalVariable(name: "k", arg: 2, scope: !224, file: !11, line: 24, type: !69)
!234 = !DILocation(line: 24, column: 24, scope: !224)
!235 = !DILocalVariable(name: "v", arg: 3, scope: !224, file: !11, line: 24, type: !172)
!236 = !DILocation(line: 24, column: 34, scope: !224)
!237 = !DILocation(line: 25, column: 3, scope: !224)
!238 = !DILocation(line: 25, column: 15, scope: !224)
!239 = distinct !DISubprogram(name: "eval.Lookup..1command_line_arguments.Scope", linkageName: "command_line_arguments.Scope.Lookup", scope: null, file: !11, line: 28, type: !240, isLocal: false, isDefinition: true, scopeLine: 28, isOptimized: false, unit: !1, retainedNodes: !3)
!240 = !DISubroutineType(types: !241)
!241 = !{!172, !227, !227, !69}
!242 = !DILocalVariable(name: "s", arg: 1, scope: !239, file: !11, line: 28, type: !227)
!243 = !DILocation(line: 28, column: 1, scope: !239)
!244 = !DILocalVariable(name: "name", arg: 2, scope: !239, file: !11, line: 28, type: !69)
!245 = !DILocation(line: 28, column: 24, scope: !239)
!246 = !DILocalVariable(name: "ok", scope: !247, file: !11, line: 29, type: !64)
!247 = distinct !DILexicalBlock(scope: !239, file: !11, line: 29, column: 2)
!248 = !DILocation(line: 29, column: 5, scope: !239)
!249 = !DILocation(line: 29, column: 17, scope: !247)
!250 = !DILocation(line: 29, column: 5, scope: !247)
!251 = !DILocation(line: 29, column: 2, scope: !247)
!252 = !DILocalVariable(name: "val", scope: !247, file: !11, line: 29, type: !172)
!253 = !DILocalVariable(name: "$ret3", scope: !239, file: !11, line: 28, type: !172)
!254 = !DILocation(line: 28, column: 37, scope: !239)
!255 = !DILocation(line: 30, column: 3, scope: !247)
!256 = !DILocation(line: 32, column: 2, scope: !239)
!257 = distinct !DISubprogram(name: "eval.NewScope", linkageName: "command_line_arguments.NewScope", scope: null, file: !11, line: 18, type: !258, isLocal: false, isDefinition: true, scopeLine: 18, isOptimized: false, unit: !1, retainedNodes: !3)
!258 = !DISubroutineType(types: !259)
!259 = !{!227}
!260 = !DILocalVariable(name: "$ret2", scope: !257, file: !11, line: 18, type: !227)
!261 = !DILocation(line: 18, column: 17, scope: !257)
!262 = !DILocation(line: 20, column: 12, scope: !257)
!263 = !DILocation(line: 19, column: 9, scope: !257)
!264 = !DILocation(line: 19, column: 10, scope: !257)
!265 = !DILocation(line: 19, column: 2, scope: !257)
!266 = distinct !DISubprogram(name: "eval.Eval..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.Eval", scope: null, file: !32, line: 19, type: !267, isLocal: false, isDefinition: true, scopeLine: 19, isOptimized: false, unit: !1, retainedNodes: !3)
!267 = !DISubroutineType(types: !268)
!268 = !{!269, !273, !273, !325}
!269 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Value,error}", file: !81, size: 192, align: 8, elements: !270)
!270 = !{!271, !272}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !81, line: 10, baseType: !183, size: 64, align: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !81, line: 10, baseType: !102, size: 128, align: 64, offset: 64)
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64)
!274 = !DICompositeType(tag: DW_TAG_structure_type, name: "Context", file: !11, line: 35, size: 256, align: 8, elements: !275)
!275 = !{!276, !322, !323, !324}
!276 = !DIDerivedType(tag: DW_TAG_member, name: "fset", file: !11, line: 36, baseType: !277, size: 64, align: 64)
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !278, size: 64)
!278 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileSet", file: !11, line: 5, size: 512, align: 8, elements: !279)
!279 = !{!280, !293, !294, !321}
!280 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", file: !11, line: 5, baseType: !281, size: 192, align: 32)
!281 = !DICompositeType(tag: DW_TAG_structure_type, name: "RWMutex", file: !11, line: 5, size: 192, align: 8, elements: !282)
!282 = !{!283, !289, !290, !291, !292}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "w", file: !11, line: 5, baseType: !284, size: 64, align: 32)
!284 = !DICompositeType(tag: DW_TAG_structure_type, name: "Mutex", file: !11, line: 5, size: 64, align: 8, elements: !285)
!285 = !{!286, !288}
!286 = !DIDerivedType(tag: DW_TAG_member, name: "state", file: !11, line: 5, baseType: !287, size: 32, align: 32)
!287 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "sema", file: !11, line: 5, baseType: !8, size: 32, align: 32, offset: 32)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "writerSem", file: !11, line: 5, baseType: !8, size: 32, align: 32, offset: 64)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "readerSem", file: !11, line: 5, baseType: !8, size: 32, align: 32, offset: 96)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "readerCount", file: !11, line: 5, baseType: !287, size: 32, align: 32, offset: 128)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "readerWait", file: !11, line: 5, baseType: !287, size: 32, align: 32, offset: 160)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "base", file: !11, line: 5, baseType: !16, size: 64, align: 64, offset: 192)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "files", file: !11, line: 5, baseType: !295, size: 192, align: 64, offset: 256)
!295 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**File,int,int}", file: !81, size: 192, align: 8, elements: !296)
!296 = !{!297, !90, !91}
!297 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !298, size: 64, align: 64)
!298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !299, size: 64)
!299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !300, size: 64)
!300 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", file: !11, line: 5, size: 768, align: 8, elements: !301)
!301 = !{!302, !303, !293, !304, !305, !306, !311}
!302 = !DIDerivedType(tag: DW_TAG_member, name: "set", file: !11, line: 5, baseType: !24, size: 64, align: 64)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "name", file: !11, line: 5, baseType: !69, size: 128, align: 64, offset: 64)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !11, line: 5, baseType: !16, size: 64, align: 64, offset: 256)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", file: !11, line: 5, baseType: !284, size: 64, align: 32, offset: 320)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "lines", file: !11, line: 5, baseType: !307, size: 192, align: 64, offset: 384)
!307 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*int,int,int}", file: !81, size: 192, align: 8, elements: !308)
!308 = !{!309, !90, !91}
!309 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !310, size: 64, align: 64)
!310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "infos", file: !11, line: 5, baseType: !312, size: 192, align: 64, offset: 576)
!312 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*.go/token.lineInfo,int,int}", file: !81, size: 192, align: 8, elements: !313)
!313 = !{!314, !90, !91}
!314 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !315, size: 64, align: 64)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!316 = !DICompositeType(tag: DW_TAG_structure_type, name: ".go/token.lineInfo", file: !11, line: 5, size: 256, align: 8, elements: !317)
!317 = !{!318, !319, !320}
!318 = !DIDerivedType(tag: DW_TAG_member, name: "Offset", file: !11, line: 5, baseType: !16, size: 64, align: 64)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "Filename", file: !11, line: 5, baseType: !69, size: 128, align: 64, offset: 64)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "Line", file: !11, line: 5, baseType: !16, size: 64, align: 64, offset: 192)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "last", file: !11, line: 5, baseType: !299, size: 64, align: 64, offset: 448)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "identifiers", file: !11, line: 37, baseType: !12, size: 64, align: 64, offset: 64)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "returnSet", file: !11, line: 38, baseType: !64, size: 8, align: 8, offset: 128)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "returnValue", file: !11, line: 39, baseType: !183, size: 64, align: 64, offset: 192)
!325 = !DICompositeType(tag: DW_TAG_structure_type, name: "Node", file: !326, line: 5, size: 128, align: 8, elements: !327)
!326 = !DIFile(filename: "decl.go", directory: ".")
!327 = !{!328, !339}
!328 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !326, line: 5, baseType: !329, size: 64, align: 64)
!329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !330, size: 64)
!330 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Pos,*func(*void)Pos}", file: !81, size: 192, align: 8, elements: !331)
!331 = !{!332, !333, !338}
!332 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !81, line: 5, baseType: !109, size: 64, align: 64)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "End", file: !81, line: 5, baseType: !334, size: 64, align: 64, offset: 64)
!334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !335, size: 64)
!335 = !DISubroutineType(types: !336)
!336 = !{!337, !24}
!337 = !DIBasicType(name: "Pos", size: 64, encoding: DW_ATE_signed)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "Pos", file: !81, line: 5, baseType: !334, size: 64, align: 64, offset: 128)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !326, line: 1, baseType: !24, size: 64, align: 64, offset: 64)
!340 = !DILocalVariable(name: "c", arg: 1, scope: !266, file: !32, line: 19, type: !273)
!341 = !DILocation(line: 19, column: 1, scope: !266)
!342 = !DILocalVariable(name: "node", arg: 2, scope: !266, file: !32, line: 19, type: !325)
!343 = !DILocation(line: 19, column: 24, scope: !266)
!344 = !DILocalVariable(name: "$ret12", scope: !266, file: !32, line: 19, type: !183)
!345 = !DILocation(line: 19, column: 40, scope: !266)
!346 = !DILocation(line: 20, column: 2, scope: !266)
!347 = !DILocation(line: 21, column: 2, scope: !266)
!348 = !DILocation(line: 20, column: 9, scope: !349)
!349 = distinct !DILexicalBlock(scope: !266, file: !32, line: 22, column: 3)
!350 = !DILocation(line: 23, column: 2, scope: !266)
!351 = !DILocation(line: 21, column: 2, scope: !349)
!352 = !DILocalVariable(name: "n", scope: !349, file: !32, line: 20, type: !353)
!353 = !DICompositeType(tag: DW_TAG_structure_type, name: "Decl", file: !326, line: 5, size: 128, align: 8, elements: !354)
!354 = !{!355, !339}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !326, line: 5, baseType: !356, size: 64, align: 64)
!356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !357, size: 64)
!357 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}", file: !81, size: 256, align: 8, elements: !358)
!358 = !{!332, !333, !338, !359}
!359 = !DIDerivedType(tag: DW_TAG_member, name: "declNode", file: !81, line: 5, baseType: !360, size: 64, align: 64, offset: 192)
!360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !361, size: 64)
!361 = !DISubroutineType(types: !362)
!362 = !{!25, !24}
!363 = !DILocation(line: 20, column: 9, scope: !266)
!364 = !DILocation(line: 22, column: 11, scope: !349)
!365 = !DILocation(line: 22, column: 3, scope: !349)
!366 = !DILocation(line: 20, column: 9, scope: !367)
!367 = distinct !DILexicalBlock(scope: !266, file: !32, line: 24, column: 3)
!368 = !DILocation(line: 25, column: 2, scope: !266)
!369 = !DILocation(line: 0, scope: !370)
!370 = distinct !DILexicalBlock(scope: !266, file: !32, line: 26, column: 3)
!371 = !DILocation(line: 23, column: 2, scope: !367)
!372 = !DILocalVariable(name: "n", scope: !367, file: !32, line: 20, type: !373)
!373 = !DICompositeType(tag: DW_TAG_structure_type, name: "Expr", file: !326, line: 5, size: 128, align: 8, elements: !374)
!374 = !{!375, !339}
!375 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !326, line: 5, baseType: !376, size: 64, align: 64)
!376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !377, size: 64)
!377 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}", file: !81, size: 256, align: 8, elements: !378)
!378 = !{!332, !333, !338, !379}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "exprNode", file: !81, line: 5, baseType: !360, size: 64, align: 64, offset: 192)
!380 = !DILocation(line: 24, column: 11, scope: !367)
!381 = !DILocation(line: 24, column: 3, scope: !367)
!382 = !DILocalVariable(name: "n", scope: !383, file: !32, line: 20, type: !325)
!383 = distinct !DILexicalBlock(scope: !266, file: !32, line: 28, column: 3)
!384 = !DILocation(line: 25, column: 2, scope: !370)
!385 = !DILocalVariable(name: "n", scope: !370, file: !32, line: 20, type: !386)
!386 = !DICompositeType(tag: DW_TAG_structure_type, name: "Stmt", file: !326, line: 5, size: 128, align: 8, elements: !387)
!387 = !{!388, !339}
!388 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !326, line: 5, baseType: !389, size: 64, align: 64)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64)
!390 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}", file: !81, size: 256, align: 8, elements: !391)
!391 = !{!332, !333, !338, !392}
!392 = !DIDerivedType(tag: DW_TAG_member, name: "stmtNode", file: !81, line: 5, baseType: !360, size: 64, align: 64, offset: 192)
!393 = !DILocation(line: 26, column: 11, scope: !370)
!394 = !DILocation(line: 26, column: 3, scope: !370)
!395 = !DILocation(line: 20, column: 9, scope: !370)
!396 = !DILocation(line: 28, column: 63, scope: !383)
!397 = !DILocation(line: 28, column: 70, scope: !383)
!398 = !DILocation(line: 28, column: 13, scope: !383)
!399 = !DILocation(line: 28, column: 3, scope: !383)
!400 = distinct !DISubprogram(name: "eval.evalAssignStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalAssignStmt", scope: null, file: !401, line: 41, type: !402, isLocal: false, isDefinition: true, scopeLine: 41, isOptimized: false, unit: !1, retainedNodes: !3)
!401 = !DIFile(filename: "stmt.go", directory: ".")
!402 = !DISubroutineType(types: !403)
!403 = !{!269, !273, !273, !404}
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !405, size: 64)
!405 = !DICompositeType(tag: DW_TAG_structure_type, name: "AssignStmt", file: !326, line: 5, size: 512, align: 8, elements: !406)
!406 = !{!407, !412, !413, !415}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "Lhs", file: !326, line: 5, baseType: !408, size: 192, align: 64)
!408 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Expr,int,int}", file: !81, size: 192, align: 8, elements: !409)
!409 = !{!410, !90, !91}
!410 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !411, size: 64, align: 64)
!411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !373, size: 64)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "TokPos", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 192)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "Tok", file: !326, line: 5, baseType: !414, size: 64, align: 64, offset: 256)
!414 = !DIBasicType(name: "Token", size: 64, encoding: DW_ATE_signed)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "Rhs", file: !326, line: 5, baseType: !408, size: 192, align: 64, offset: 320)
!416 = !DILocalVariable(name: "c", arg: 1, scope: !400, file: !401, line: 41, type: !273)
!417 = !DILocation(line: 41, column: 1, scope: !400)
!418 = !DILocalVariable(name: "e", arg: 2, scope: !400, file: !401, line: 41, type: !404)
!419 = !DILocation(line: 41, column: 34, scope: !400)
!420 = !DILocalVariable(name: "$ret32", scope: !400, file: !401, line: 41, type: !183)
!421 = !DILocation(line: 41, column: 54, scope: !400)
!422 = !DILocation(line: 42, column: 22, scope: !423)
!423 = distinct !DILexicalBlock(scope: !400, file: !401, line: 41, column: 1)
!424 = !DILocation(line: 42, column: 26, scope: !423)
!425 = !DILocation(line: 42, column: 15, scope: !423)
!426 = !DILocalVariable(name: "rhs", scope: !423, file: !401, line: 42, type: !183)
!427 = !DILocation(line: 42, column: 2, scope: !400)
!428 = !DILocalVariable(name: "err", scope: !423, file: !401, line: 42, type: !102)
!429 = !DILocation(line: 43, column: 9, scope: !423)
!430 = !DILocalVariable(name: "$ret33", scope: !400, file: !401, line: 41, type: !102)
!431 = !DILocation(line: 41, column: 70, scope: !400)
!432 = !DILocation(line: 44, column: 3, scope: !423)
!433 = !DILocation(line: 46, column: 15, scope: !423)
!434 = !DILocation(line: 46, column: 18, scope: !423)
!435 = !DILocation(line: 46, column: 31, scope: !423)
!436 = !DILocation(line: 47, column: 22, scope: !423)
!437 = !DILocation(line: 47, column: 3, scope: !423)
!438 = !DILocation(line: 48, column: 2, scope: !423)
!439 = distinct !DISubprogram(name: "eval.evalBinaryExpr..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalBinaryExpr", scope: null, file: !440, line: 110, type: !441, isLocal: false, isDefinition: true, scopeLine: 110, isOptimized: false, unit: !1, retainedNodes: !3)
!440 = !DIFile(filename: "expr.go", directory: ".")
!441 = !DISubroutineType(types: !442)
!442 = !{!269, !273, !273, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = !DICompositeType(tag: DW_TAG_structure_type, name: "BinaryExpr", file: !326, line: 5, size: 384, align: 8, elements: !445)
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "X", file: !326, line: 5, baseType: !373, size: 128, align: 64)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "OpPos", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 128)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "Op", file: !326, line: 5, baseType: !414, size: 64, align: 64, offset: 192)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "Y", file: !326, line: 5, baseType: !373, size: 128, align: 64, offset: 256)
!450 = !DILocalVariable(name: "c", arg: 1, scope: !439, file: !440, line: 110, type: !273)
!451 = !DILocation(line: 110, column: 1, scope: !439)
!452 = !DILocalVariable(name: "e", arg: 2, scope: !439, file: !440, line: 110, type: !443)
!453 = !DILocation(line: 110, column: 34, scope: !439)
!454 = !DILocalVariable(name: "$ret24", scope: !439, file: !440, line: 110, type: !183)
!455 = !DILocation(line: 110, column: 54, scope: !439)
!456 = !DILocation(line: 111, column: 21, scope: !457)
!457 = distinct !DILexicalBlock(scope: !439, file: !440, line: 110, column: 1)
!458 = !DILocation(line: 111, column: 14, scope: !457)
!459 = !DILocalVariable(name: "v1", scope: !457, file: !440, line: 111, type: !183)
!460 = !DILocation(line: 111, column: 2, scope: !439)
!461 = !DILocalVariable(name: "err", scope: !457, file: !440, line: 111, type: !102)
!462 = !DILocation(line: 112, column: 9, scope: !457)
!463 = !DILocalVariable(name: "$ret25", scope: !439, file: !440, line: 110, type: !102)
!464 = !DILocation(line: 110, column: 70, scope: !439)
!465 = !DILocation(line: 113, column: 3, scope: !457)
!466 = !DILocation(line: 115, column: 10, scope: !457)
!467 = !DILocation(line: 128, column: 9, scope: !468)
!468 = distinct !DILexicalBlock(scope: !457, file: !440, line: 128, column: 3)
!469 = !DILocation(line: 128, column: 6, scope: !468)
!470 = !DILocation(line: 142, column: 9, scope: !471)
!471 = distinct !DILexicalBlock(scope: !457, file: !440, line: 142, column: 3)
!472 = !DILocation(line: 142, column: 6, scope: !471)
!473 = !DILocation(line: 117, column: 22, scope: !474)
!474 = distinct !DILexicalBlock(scope: !457, file: !440, line: 117, column: 3)
!475 = !DILocation(line: 117, column: 15, scope: !474)
!476 = !DILocalVariable(name: "err", scope: !474, file: !440, line: 117, type: !102)
!477 = !DILocation(line: 117, column: 3, scope: !457)
!478 = !DILocation(line: 118, column: 10, scope: !474)
!479 = !DILocation(line: 119, column: 4, scope: !474)
!480 = !DILocalVariable(name: "v2", scope: !474, file: !440, line: 117, type: !183)
!481 = !DILocation(line: 10, column: 14, scope: !482, inlinedAt: !485)
!482 = distinct !DISubprogram(name: "eval.compare", scope: null, file: !34, line: 10, type: !483, isLocal: true, isDefinition: true, scopeLine: 10, isOptimized: false, unit: !1, retainedNodes: !3)
!483 = !DISubroutineType(types: !484)
!484 = !{!269, !183, !183}
!485 = distinct !DILocation(line: 121, column: 13, scope: !474)
!486 = !DILocalVariable(name: "a", arg: 1, scope: !482, file: !34, line: 10, type: !183)
!487 = !DILocalVariable(name: "b", arg: 2, scope: !482, file: !34, line: 10, type: !183)
!488 = !DILocation(line: 10, column: 17, scope: !482, inlinedAt: !485)
!489 = !DILocalVariable(name: "$ret0", scope: !482, file: !34, line: 10, type: !183)
!490 = !DILocation(line: 10, column: 36, scope: !482, inlinedAt: !485)
!491 = !DILocation(line: 11, column: 12, scope: !492, inlinedAt: !485)
!492 = distinct !DILexicalBlock(scope: !493, file: !34, line: 11, column: 2)
!493 = distinct !DILexicalBlock(scope: !482, file: !34, line: 10, column: 1)
!494 = !DILocalVariable(name: "err", scope: !492, file: !34, line: 11, type: !102)
!495 = !DILocation(line: 11, column: 5, scope: !493, inlinedAt: !485)
!496 = !DILocation(line: 11, column: 35, scope: !492, inlinedAt: !485)
!497 = !DILocation(line: 14, column: 6, scope: !493, inlinedAt: !485)
!498 = !DILocation(line: 14, column: 18, scope: !493, inlinedAt: !485)
!499 = !DILocation(line: 14, column: 14, scope: !493, inlinedAt: !485)
!500 = !DILocation(line: 15, column: 65, scope: !493, inlinedAt: !485)
!501 = !DILocation(line: 15, column: 75, scope: !493, inlinedAt: !485)
!502 = !DILocalVariable(name: "v", scope: !493, file: !34, line: 17, type: !64)
!503 = !DILocation(line: 17, column: 6, scope: !482, inlinedAt: !485)
!504 = !DILocation(line: 18, column: 10, scope: !493, inlinedAt: !485)
!505 = !DILocation(line: 18, column: 2, scope: !493, inlinedAt: !485)
!506 = !DILocation(line: 19, column: 2, scope: !493, inlinedAt: !485)
!507 = !DILocation(line: 15, column: 13, scope: !493, inlinedAt: !485)
!508 = !DILocation(line: 15, column: 3, scope: !493, inlinedAt: !485)
!509 = !DILocation(line: 20, column: 21, scope: !493, inlinedAt: !485)
!510 = !DILocation(line: 20, column: 32, scope: !493, inlinedAt: !485)
!511 = !DILocation(line: 20, column: 12, scope: !493, inlinedAt: !485)
!512 = !DILocation(line: 23, column: 2, scope: !493, inlinedAt: !485)
!513 = !DILocation(line: 0, scope: !493, inlinedAt: !485)
!514 = !DILocation(line: 30, column: 2, scope: !493, inlinedAt: !485)
!515 = !DILocation(line: 30, column: 24, scope: !493, inlinedAt: !485)
!516 = !DILocation(line: 30, column: 16, scope: !493, inlinedAt: !485)
!517 = !DILocation(line: 24, column: 23, scope: !493, inlinedAt: !485)
!518 = !DILocation(line: 24, column: 35, scope: !493, inlinedAt: !485)
!519 = !DILocation(line: 24, column: 14, scope: !493, inlinedAt: !485)
!520 = !DILocation(line: 28, column: 51, scope: !493, inlinedAt: !485)
!521 = !DILocation(line: 28, column: 13, scope: !493, inlinedAt: !485)
!522 = !DILocation(line: 28, column: 3, scope: !493, inlinedAt: !485)
!523 = !DILocalVariable(name: "vv", scope: !493, file: !34, line: 30, type: !183)
!524 = !DILocation(line: 30, column: 2, scope: !482, inlinedAt: !485)
!525 = !DILocalVariable(name: "$ret1", scope: !482, file: !34, line: 10, type: !102)
!526 = !DILocation(line: 10, column: 52, scope: !482, inlinedAt: !485)
!527 = !DILocation(line: 31, column: 2, scope: !493, inlinedAt: !485)
!528 = !DILocalVariable(name: "r", scope: !474, file: !440, line: 121, type: !183)
!529 = !DILocation(line: 121, column: 3, scope: !457)
!530 = !DILocation(line: 125, column: 38, scope: !474)
!531 = !DILocation(line: 125, column: 12, scope: !474)
!532 = !DILocation(line: 126, column: 3, scope: !474)
!533 = !DILocation(line: 12, column: 3, scope: !492, inlinedAt: !485)
!534 = !DILocation(line: 121, column: 13, scope: !474)
!535 = !DILocation(line: 123, column: 4, scope: !474)
!536 = !DILocation(line: 133, column: 9, scope: !468)
!537 = !DILocation(line: 133, column: 6, scope: !468)
!538 = !DILocation(line: 129, column: 13, scope: !539)
!539 = distinct !DILexicalBlock(scope: !468, file: !440, line: 128, column: 20)
!540 = !DILocation(line: 130, column: 4, scope: !539)
!541 = !DILocation(line: 130, column: 26, scope: !539)
!542 = !DILocation(line: 130, column: 18, scope: !539)
!543 = !DILocalVariable(name: "vv", scope: !539, file: !440, line: 130, type: !183)
!544 = !DILocation(line: 130, column: 4, scope: !468)
!545 = !DILocation(line: 131, column: 4, scope: !539)
!546 = !DILocation(line: 134, column: 4, scope: !468)
!547 = !DILocation(line: 136, column: 22, scope: !468)
!548 = !DILocation(line: 136, column: 15, scope: !468)
!549 = !DILocalVariable(name: "err", scope: !468, file: !440, line: 136, type: !102)
!550 = !DILocation(line: 136, column: 3, scope: !457)
!551 = !DILocation(line: 137, column: 10, scope: !468)
!552 = !DILocation(line: 138, column: 4, scope: !468)
!553 = !DILocalVariable(name: "v2", scope: !468, file: !440, line: 136, type: !183)
!554 = !DILocation(line: 140, column: 3, scope: !468)
!555 = !DILocation(line: 147, column: 8, scope: !471)
!556 = !DILocation(line: 147, column: 3, scope: !471)
!557 = !DILocation(line: 143, column: 13, scope: !558)
!558 = distinct !DILexicalBlock(scope: !471, file: !440, line: 142, column: 20)
!559 = !DILocation(line: 144, column: 4, scope: !558)
!560 = !DILocation(line: 144, column: 26, scope: !558)
!561 = !DILocation(line: 144, column: 18, scope: !558)
!562 = !DILocalVariable(name: "vv", scope: !558, file: !440, line: 144, type: !183)
!563 = !DILocation(line: 144, column: 4, scope: !471)
!564 = !DILocation(line: 145, column: 4, scope: !558)
!565 = !DILocation(line: 148, column: 4, scope: !471)
!566 = !DILocation(line: 150, column: 22, scope: !471)
!567 = !DILocation(line: 150, column: 15, scope: !471)
!568 = !DILocalVariable(name: "err", scope: !471, file: !440, line: 150, type: !102)
!569 = !DILocation(line: 150, column: 3, scope: !457)
!570 = !DILocation(line: 151, column: 10, scope: !471)
!571 = !DILocation(line: 152, column: 4, scope: !471)
!572 = !DILocalVariable(name: "v2", scope: !471, file: !440, line: 150, type: !183)
!573 = !DILocation(line: 154, column: 3, scope: !471)
!574 = !DILocation(line: 156, column: 52, scope: !457)
!575 = !DILocation(line: 156, column: 44, scope: !457)
!576 = !DILocation(line: 156, column: 13, scope: !457)
!577 = !DILocation(line: 156, column: 3, scope: !457)
!578 = distinct !DISubprogram(name: "eval.evalBlockStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalBlockStmt", scope: null, file: !401, line: 80, type: !579, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !1, retainedNodes: !3)
!579 = !DISubroutineType(types: !580)
!580 = !{!269, !273, !273, !581}
!581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !582, size: 64)
!582 = !DICompositeType(tag: DW_TAG_structure_type, name: "BlockStmt", file: !326, line: 5, size: 320, align: 8, elements: !583)
!583 = !{!584, !585, !590}
!584 = !DIDerivedType(tag: DW_TAG_member, name: "Lbrace", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "List", file: !326, line: 5, baseType: !586, size: 192, align: 64, offset: 64)
!586 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Stmt,int,int}", file: !81, size: 192, align: 8, elements: !587)
!587 = !{!588, !90, !91}
!588 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !589, size: 64, align: 64)
!589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "Rbrace", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 256)
!591 = !DILocalVariable(name: "c", arg: 1, scope: !578, file: !401, line: 80, type: !273)
!592 = !DILocation(line: 80, column: 1, scope: !578)
!593 = !DILocalVariable(name: "e", arg: 2, scope: !578, file: !401, line: 80, type: !581)
!594 = !DILocation(line: 80, column: 33, scope: !578)
!595 = !DILocalVariable(name: "$ret38", scope: !578, file: !401, line: 80, type: !183)
!596 = !DILocation(line: 80, column: 52, scope: !578)
!597 = !DILocation(line: 81, column: 11, scope: !578)
!598 = !DILocalVariable(name: "i", scope: !599, file: !401, line: 82, type: !16)
!599 = distinct !DILexicalBlock(scope: !578, file: !401, line: 82, column: 2)
!600 = !DILocation(line: 82, column: 6, scope: !578)
!601 = !DILocation(line: 82, column: 24, scope: !599)
!602 = !DILocation(line: 82, column: 2, scope: !599)
!603 = !DILocalVariable(name: "stmt", scope: !599, file: !401, line: 82, type: !386)
!604 = !DILocation(line: 83, column: 20, scope: !605)
!605 = distinct !DILexicalBlock(scope: !599, file: !401, line: 82, column: 30)
!606 = !DILocation(line: 83, column: 14, scope: !605)
!607 = !DILocalVariable(name: "v", scope: !605, file: !401, line: 83, type: !183)
!608 = !DILocation(line: 83, column: 3, scope: !599)
!609 = !DILocalVariable(name: "err", scope: !605, file: !401, line: 83, type: !102)
!610 = !DILocation(line: 84, column: 10, scope: !605)
!611 = !DILocalVariable(name: "$ret39", scope: !578, file: !401, line: 80, type: !102)
!612 = !DILocation(line: 80, column: 68, scope: !578)
!613 = !DILocation(line: 85, column: 4, scope: !605)
!614 = !DILocation(line: 87, column: 12, scope: !605)
!615 = !DILocation(line: 88, column: 7, scope: !605)
!616 = !DILocation(line: 88, column: 3, scope: !605)
!617 = !DILocation(line: 89, column: 5, scope: !605)
!618 = !DILocation(line: 89, column: 18, scope: !605)
!619 = !DILocation(line: 90, column: 4, scope: !605)
!620 = !DILocation(line: 93, column: 2, scope: !578)
!621 = distinct !DISubprogram(name: "eval.evalCallExpr..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalCallExpr", scope: null, file: !440, line: 46, type: !622, isLocal: false, isDefinition: true, scopeLine: 46, isOptimized: false, unit: !1, retainedNodes: !3)
!622 = !DISubroutineType(types: !623)
!623 = !{!269, !273, !273, !624}
!624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !625, size: 64)
!625 = !DICompositeType(tag: DW_TAG_structure_type, name: "CallExpr", file: !326, line: 5, size: 512, align: 8, elements: !626)
!626 = !{!627, !628, !629, !630, !631}
!627 = !DIDerivedType(tag: DW_TAG_member, name: "Fun", file: !326, line: 5, baseType: !373, size: 128, align: 64)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "Lparen", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 128)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "Args", file: !326, line: 5, baseType: !408, size: 192, align: 64, offset: 192)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "Ellipsis", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 384)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "Rparen", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 448)
!632 = !DILocalVariable(name: "c", arg: 1, scope: !621, file: !440, line: 46, type: !273)
!633 = !DILocation(line: 46, column: 1, scope: !621)
!634 = !DILocalVariable(name: "e", arg: 2, scope: !621, file: !440, line: 46, type: !624)
!635 = !DILocation(line: 46, column: 32, scope: !621)
!636 = !DILocalVariable(name: "$ret18", scope: !621, file: !440, line: 46, type: !183)
!637 = !DILocation(line: 46, column: 50, scope: !621)
!638 = !DILocation(line: 47, column: 21, scope: !639)
!639 = distinct !DILexicalBlock(scope: !621, file: !440, line: 46, column: 1)
!640 = !DILocation(line: 47, column: 14, scope: !639)
!641 = !DILocalVariable(name: "v1", scope: !639, file: !440, line: 47, type: !183)
!642 = !DILocation(line: 47, column: 2, scope: !621)
!643 = !DILocalVariable(name: "err", scope: !639, file: !440, line: 47, type: !102)
!644 = !DILocation(line: 48, column: 9, scope: !639)
!645 = !DILocation(line: 49, column: 3, scope: !639)
!646 = !DILocalVariable(name: "$ret19", scope: !621, file: !440, line: 46, type: !102)
!647 = !DILocation(line: 46, column: 66, scope: !621)
!648 = !DILocation(line: 51, column: 11, scope: !639)
!649 = !DILocation(line: 52, column: 10, scope: !639)
!650 = !DILocation(line: 53, column: 2, scope: !651)
!651 = distinct !DILexicalBlock(scope: !639, file: !440, line: 53, column: 2)
!652 = !DILocalVariable(name: "arg", scope: !651, file: !440, line: 53, type: !373)
!653 = !DILocation(line: 53, column: 6, scope: !639)
!654 = !DILocation(line: 54, column: 20, scope: !655)
!655 = distinct !DILexicalBlock(scope: !651, file: !440, line: 53, column: 29)
!656 = !DILocation(line: 54, column: 14, scope: !655)
!657 = !DILocalVariable(name: "v", scope: !655, file: !440, line: 54, type: !183)
!658 = !DILocation(line: 54, column: 3, scope: !651)
!659 = !DILocalVariable(name: "err", scope: !655, file: !440, line: 54, type: !102)
!660 = !DILocation(line: 55, column: 10, scope: !655)
!661 = !DILocation(line: 56, column: 4, scope: !655)
!662 = !DILocation(line: 58, column: 10, scope: !655)
!663 = !DILocation(line: 58, column: 23, scope: !655)
!664 = !DILocation(line: 58, column: 8, scope: !655)
!665 = !DILocation(line: 60, column: 12, scope: !666)
!666 = distinct !DILexicalBlock(scope: !639, file: !440, line: 60, column: 2)
!667 = !DILocalVariable(name: "err", scope: !666, file: !440, line: 60, type: !102)
!668 = !DILocation(line: 60, column: 5, scope: !639)
!669 = !DILocation(line: 60, column: 33, scope: !666)
!670 = !DILocation(line: 61, column: 12, scope: !666)
!671 = !DILocation(line: 62, column: 3, scope: !666)
!672 = !DILocalVariable(name: "args", scope: !639, file: !440, line: 52, type: !673)
!673 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Value,int,int}", file: !81, size: 192, align: 8, elements: !674)
!674 = !{!675, !90, !91}
!675 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !183, size: 64, align: 64)
!676 = !DILocation(line: 52, column: 2, scope: !621)
!677 = !DILocation(line: 64, column: 13, scope: !639)
!678 = !DILocalVariable(name: "value", scope: !639, file: !440, line: 64, type: !673)
!679 = !DILocation(line: 64, column: 2, scope: !621)
!680 = !DILocation(line: 65, column: 16, scope: !639)
!681 = !DILocation(line: 66, column: 3, scope: !682)
!682 = distinct !DILexicalBlock(scope: !639, file: !440, line: 65, column: 21)
!683 = !DILocation(line: 66, column: 25, scope: !682)
!684 = !DILocation(line: 66, column: 17, scope: !682)
!685 = !DILocation(line: 69, column: 54, scope: !639)
!686 = !DILocalVariable(name: "vv", scope: !682, file: !440, line: 66, type: !183)
!687 = !DILocation(line: 66, column: 3, scope: !639)
!688 = !DILocation(line: 67, column: 3, scope: !682)
!689 = !DILocation(line: 69, column: 11, scope: !639)
!690 = !DILocation(line: 70, column: 2, scope: !639)
!691 = distinct !DISubprogram(name: "eval.evalDecl..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalDecl", scope: null, file: !326, line: 9, type: !692, isLocal: false, isDefinition: true, scopeLine: 9, isOptimized: false, unit: !1, retainedNodes: !3)
!692 = !DISubroutineType(types: !693)
!693 = !{!269, !273, !273, !353}
!694 = !DILocalVariable(name: "c", arg: 1, scope: !691, file: !326, line: 9, type: !273)
!695 = !DILocation(line: 9, column: 1, scope: !691)
!696 = !DILocalVariable(name: "decl", arg: 2, scope: !691, file: !326, line: 9, type: !353)
!697 = !DILocation(line: 9, column: 28, scope: !691)
!698 = !DILocalVariable(name: "$ret6", scope: !691, file: !326, line: 9, type: !183)
!699 = !DILocation(line: 9, column: 44, scope: !691)
!700 = !DILocation(line: 10, column: 2, scope: !691)
!701 = !DILocation(line: 11, column: 2, scope: !691)
!702 = !DILocation(line: 10, column: 9, scope: !703)
!703 = distinct !DILexicalBlock(scope: !691, file: !326, line: 12, column: 3)
!704 = !DILocation(line: 13, column: 2, scope: !691)
!705 = !DILocation(line: 0, scope: !706)
!706 = distinct !DILexicalBlock(scope: !691, file: !326, line: 14, column: 3)
!707 = !DILocation(line: 11, column: 2, scope: !703)
!708 = !DILocalVariable(name: "d", scope: !703, file: !326, line: 10, type: !709)
!709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !710, size: 64)
!710 = !DICompositeType(tag: DW_TAG_structure_type, name: "FuncDecl", file: !326, line: 5, size: 320, align: 8, elements: !711)
!711 = !{!712, !726, !768, !769, !776}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "Doc", file: !326, line: 5, baseType: !713, size: 64, align: 64)
!713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !714, size: 64)
!714 = !DICompositeType(tag: DW_TAG_structure_type, name: "CommentGroup", file: !326, line: 5, size: 192, align: 8, elements: !715)
!715 = !{!716}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "List", file: !326, line: 5, baseType: !717, size: 192, align: 64)
!717 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**Comment,int,int}", file: !81, size: 192, align: 8, elements: !718)
!718 = !{!719, !90, !91}
!719 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !720, size: 64, align: 64)
!720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !721, size: 64)
!721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !722, size: 64)
!722 = !DICompositeType(tag: DW_TAG_structure_type, name: "Comment", file: !326, line: 5, size: 192, align: 8, elements: !723)
!723 = !{!724, !725}
!724 = !DIDerivedType(tag: DW_TAG_member, name: "Slash", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "Text", file: !326, line: 5, baseType: !69, size: 128, align: 64, offset: 64)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "Recv", file: !326, line: 5, baseType: !727, size: 64, align: 64, offset: 64)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !728, size: 64)
!728 = !DICompositeType(tag: DW_TAG_structure_type, name: "FieldList", file: !326, line: 5, size: 320, align: 8, elements: !729)
!729 = !{!730, !731, !767}
!730 = !DIDerivedType(tag: DW_TAG_member, name: "Opening", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "List", file: !326, line: 5, baseType: !732, size: 192, align: 64, offset: 64)
!732 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**Field,int,int}", file: !81, size: 192, align: 8, elements: !733)
!733 = !{!734, !90, !91}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !735, size: 64, align: 64)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !737, size: 64)
!737 = !DICompositeType(tag: DW_TAG_structure_type, name: "Field", file: !326, line: 5, size: 512, align: 8, elements: !738)
!738 = !{!712, !739, !758, !759, !766}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "Names", file: !326, line: 5, baseType: !740, size: 192, align: 64, offset: 64)
!740 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**Ident,int,int}", file: !81, size: 192, align: 8, elements: !741)
!741 = !{!742, !90, !91}
!742 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !743, size: 64, align: 64)
!743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !744, size: 64)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = !DICompositeType(tag: DW_TAG_structure_type, name: "Ident", file: !326, line: 5, size: 256, align: 8, elements: !746)
!746 = !{!747, !748, !749}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "NamePos", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !326, line: 5, baseType: !69, size: 128, align: 64, offset: 64)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "Obj", file: !326, line: 5, baseType: !750, size: 64, align: 64, offset: 192)
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !751, size: 64)
!751 = !DICompositeType(tag: DW_TAG_structure_type, name: "Object", file: !326, line: 5, size: 576, align: 8, elements: !752)
!752 = !{!753, !748, !755, !756, !757}
!753 = !DIDerivedType(tag: DW_TAG_member, name: "Kind", file: !326, line: 5, baseType: !754, size: 64, align: 64)
!754 = !DIBasicType(name: "ObjKind", size: 64, encoding: DW_ATE_signed)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "Decl", file: !326, line: 5, baseType: !172, size: 128, align: 64, offset: 192)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "Data", file: !326, line: 5, baseType: !172, size: 128, align: 64, offset: 320)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !326, line: 5, baseType: !172, size: 128, align: 64, offset: 448)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !326, line: 5, baseType: !373, size: 128, align: 64, offset: 256)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "Tag", file: !326, line: 5, baseType: !760, size: 64, align: 64, offset: 384)
!760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !761, size: 64)
!761 = !DICompositeType(tag: DW_TAG_structure_type, name: "BasicLit", file: !326, line: 5, size: 256, align: 8, elements: !762)
!762 = !{!763, !764, !765}
!763 = !DIDerivedType(tag: DW_TAG_member, name: "ValuePos", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "Kind", file: !326, line: 5, baseType: !414, size: 64, align: 64, offset: 64)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "Value", file: !326, line: 5, baseType: !69, size: 128, align: 64, offset: 128)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "Comment", file: !326, line: 5, baseType: !713, size: 64, align: 64, offset: 448)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "Closing", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 256)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !326, line: 5, baseType: !744, size: 64, align: 64, offset: 128)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !326, line: 5, baseType: !770, size: 64, align: 64, offset: 192)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = !DICompositeType(tag: DW_TAG_structure_type, name: "FuncType", file: !326, line: 5, size: 192, align: 8, elements: !772)
!772 = !{!773, !774, !775}
!773 = !DIDerivedType(tag: DW_TAG_member, name: "Func", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "Params", file: !326, line: 5, baseType: !727, size: 64, align: 64, offset: 64)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "Results", file: !326, line: 5, baseType: !727, size: 64, align: 64, offset: 128)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "Body", file: !326, line: 5, baseType: !581, size: 64, align: 64, offset: 256)
!777 = !DILocation(line: 10, column: 9, scope: !691)
!778 = !DILocation(line: 12, column: 3, scope: !703)
!779 = !DILocalVariable(name: "d", scope: !780, file: !326, line: 10, type: !353)
!780 = distinct !DILexicalBlock(scope: !691, file: !326, line: 16, column: 3)
!781 = !DILocation(line: 13, column: 2, scope: !706)
!782 = !DILocalVariable(name: "d", scope: !706, file: !326, line: 10, type: !783)
!783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !784, size: 64)
!784 = !DICompositeType(tag: DW_TAG_structure_type, name: "GenDecl", file: !326, line: 5, size: 512, align: 8, elements: !785)
!785 = !{!712, !786, !787, !788, !789, !631}
!786 = !DIDerivedType(tag: DW_TAG_member, name: "TokPos", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 64)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "Tok", file: !326, line: 5, baseType: !414, size: 64, align: 64, offset: 128)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "Lparen", file: !326, line: 5, baseType: !337, size: 64, align: 64, offset: 192)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "Specs", file: !326, line: 5, baseType: !790, size: 192, align: 64, offset: 256)
!790 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Spec,int,int}", file: !81, size: 192, align: 8, elements: !791)
!791 = !{!792, !90, !91}
!792 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !81, line: 1, baseType: !793, size: 64, align: 64)
!793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !794, size: 64)
!794 = !DICompositeType(tag: DW_TAG_structure_type, name: "Spec", file: !326, line: 5, size: 128, align: 8, elements: !795)
!795 = !{!796, !339}
!796 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !326, line: 5, baseType: !797, size: 64, align: 64)
!797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !798, size: 64)
!798 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}", file: !81, size: 256, align: 8, elements: !799)
!799 = !{!332, !333, !338, !800}
!800 = !DIDerivedType(tag: DW_TAG_member, name: "specNode", file: !81, line: 5, baseType: !360, size: 64, align: 64, offset: 192)
!801 = !DILocation(line: 14, column: 3, scope: !706)
!802 = !DILocation(line: 10, column: 9, scope: !706)
!803 = !DILocation(line: 16, column: 63, scope: !780)
!804 = !DILocation(line: 16, column: 70, scope: !780)
!805 = !DILocation(line: 16, column: 13, scope: !780)
!806 = !DILocation(line: 16, column: 3, scope: !780)
!807 = distinct !DISubprogram(name: "eval.evalExpr..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalExpr", scope: null, file: !440, line: 11, type: !808, isLocal: false, isDefinition: true, scopeLine: 11, isOptimized: false, unit: !1, retainedNodes: !3)
!808 = !DISubroutineType(types: !809)
!809 = !{!269, !273, !273, !373}
!810 = !DILocalVariable(name: "c", arg: 1, scope: !807, file: !440, line: 11, type: !273)
!811 = !DILocation(line: 11, column: 1, scope: !807)
!812 = !DILocalVariable(name: "expr", arg: 2, scope: !807, file: !440, line: 11, type: !373)
!813 = !DILocation(line: 11, column: 28, scope: !807)
!814 = !DILocalVariable(name: "$ret16", scope: !807, file: !440, line: 11, type: !183)
!815 = !DILocation(line: 11, column: 44, scope: !807)
!816 = !DILocation(line: 12, column: 2, scope: !807)
!817 = !DILocation(line: 13, column: 2, scope: !807)
!818 = !DILocation(line: 12, column: 9, scope: !819)
!819 = distinct !DILexicalBlock(scope: !807, file: !440, line: 14, column: 3)
!820 = !DILocation(line: 15, column: 2, scope: !807)
!821 = !DILocation(line: 13, column: 2, scope: !819)
!822 = !DILocalVariable(name: "e", scope: !819, file: !440, line: 12, type: !443)
!823 = !DILocation(line: 12, column: 9, scope: !807)
!824 = !DILocation(line: 14, column: 11, scope: !819)
!825 = !DILocation(line: 14, column: 3, scope: !819)
!826 = !DILocation(line: 12, column: 9, scope: !827)
!827 = distinct !DILexicalBlock(scope: !807, file: !440, line: 16, column: 3)
!828 = !DILocation(line: 17, column: 2, scope: !807)
!829 = !DILocation(line: 15, column: 2, scope: !827)
!830 = !DILocalVariable(name: "e", scope: !827, file: !440, line: 12, type: !831)
!831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !832, size: 64)
!832 = !DICompositeType(tag: DW_TAG_structure_type, name: "UnaryExpr", file: !326, line: 5, size: 256, align: 8, elements: !833)
!833 = !{!834, !835, !836}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "OpPos", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "Op", file: !326, line: 5, baseType: !414, size: 64, align: 64, offset: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "X", file: !326, line: 5, baseType: !373, size: 128, align: 64, offset: 128)
!837 = !DILocation(line: 16, column: 11, scope: !827)
!838 = !DILocation(line: 16, column: 3, scope: !827)
!839 = !DILocation(line: 12, column: 9, scope: !840)
!840 = distinct !DILexicalBlock(scope: !807, file: !440, line: 18, column: 3)
!841 = !DILocation(line: 19, column: 2, scope: !807)
!842 = !DILocation(line: 17, column: 2, scope: !840)
!843 = !DILocalVariable(name: "e", scope: !840, file: !440, line: 12, type: !624)
!844 = !DILocation(line: 18, column: 11, scope: !840)
!845 = !DILocation(line: 18, column: 3, scope: !840)
!846 = !DILocation(line: 12, column: 9, scope: !847)
!847 = distinct !DILexicalBlock(scope: !807, file: !440, line: 20, column: 3)
!848 = !DILocation(line: 21, column: 2, scope: !807)
!849 = !DILocation(line: 19, column: 2, scope: !847)
!850 = !DILocalVariable(name: "e", scope: !847, file: !440, line: 12, type: !851)
!851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !852, size: 64)
!852 = !DICompositeType(tag: DW_TAG_structure_type, name: "SelectorExpr", file: !326, line: 5, size: 192, align: 8, elements: !853)
!853 = !{!446, !854}
!854 = !DIDerivedType(tag: DW_TAG_member, name: "Sel", file: !326, line: 5, baseType: !744, size: 64, align: 64, offset: 128)
!855 = !DILocation(line: 20, column: 11, scope: !847)
!856 = !DILocation(line: 20, column: 3, scope: !847)
!857 = !DILocation(line: 12, column: 9, scope: !858)
!858 = distinct !DILexicalBlock(scope: !807, file: !440, line: 22, column: 3)
!859 = !DILocation(line: 23, column: 2, scope: !807)
!860 = !DILocation(line: 0, scope: !861)
!861 = distinct !DILexicalBlock(scope: !807, file: !440, line: 24, column: 3)
!862 = !DILocation(line: 21, column: 2, scope: !858)
!863 = !DILocalVariable(name: "e", scope: !858, file: !440, line: 12, type: !744)
!864 = !DILocation(line: 22, column: 11, scope: !858)
!865 = !DILocation(line: 22, column: 3, scope: !858)
!866 = !DILocalVariable(name: "e", scope: !867, file: !440, line: 12, type: !373)
!867 = distinct !DILexicalBlock(scope: !807, file: !440, line: 42, column: 3)
!868 = !DILocation(line: 23, column: 2, scope: !861)
!869 = !DILocalVariable(name: "e", scope: !861, file: !440, line: 12, type: !760)
!870 = !DILocation(line: 24, column: 11, scope: !861)
!871 = !DILocation(line: 12, column: 9, scope: !861)
!872 = !DILocation(line: 26, column: 4, scope: !873)
!873 = distinct !DILexicalBlock(scope: !861, file: !440, line: 26, column: 4)
!874 = !DILocalVariable(name: "v", scope: !873, file: !440, line: 26, type: !183)
!875 = !DILocation(line: 26, column: 4, scope: !861)
!876 = !DILocation(line: 26, column: 26, scope: !873)
!877 = !DILocation(line: 26, column: 17, scope: !873)
!878 = !DILocation(line: 32, column: 31, scope: !879)
!879 = distinct !DILexicalBlock(scope: !861, file: !440, line: 32, column: 4)
!880 = !DILocation(line: 32, column: 22, scope: !879)
!881 = !DILocalVariable(name: "err", scope: !879, file: !440, line: 32, type: !102)
!882 = !DILocation(line: 32, column: 4, scope: !861)
!883 = !DILocation(line: 33, column: 11, scope: !879)
!884 = !DILocation(line: 27, column: 4, scope: !873)
!885 = !DILocation(line: 36, column: 4, scope: !879)
!886 = !DILocation(line: 36, column: 25, scope: !879)
!887 = !DILocation(line: 36, column: 17, scope: !879)
!888 = !DILocation(line: 34, column: 11, scope: !879)
!889 = !DILocation(line: 34, column: 5, scope: !879)
!890 = !DILocalVariable(name: "v", scope: !879, file: !440, line: 36, type: !183)
!891 = !DILocation(line: 36, column: 4, scope: !861)
!892 = !DILocation(line: 37, column: 4, scope: !879)
!893 = !DILocation(line: 39, column: 14, scope: !861)
!894 = !DILocation(line: 39, column: 4, scope: !861)
!895 = !DILocation(line: 42, column: 63, scope: !867)
!896 = !DILocation(line: 42, column: 70, scope: !867)
!897 = !DILocation(line: 42, column: 13, scope: !867)
!898 = !DILocation(line: 42, column: 3, scope: !867)
!899 = distinct !DISubprogram(name: "eval.evalExprStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalExprStmt", scope: null, file: !401, line: 33, type: !900, isLocal: false, isDefinition: true, scopeLine: 33, isOptimized: false, unit: !1, retainedNodes: !3)
!900 = !DISubroutineType(types: !901)
!901 = !{!269, !273, !273, !902}
!902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !903, size: 64)
!903 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExprStmt", file: !326, line: 5, size: 128, align: 8, elements: !904)
!904 = !{!446}
!905 = !DILocalVariable(name: "c", arg: 1, scope: !899, file: !401, line: 33, type: !273)
!906 = !DILocation(line: 33, column: 1, scope: !899)
!907 = !DILocalVariable(name: "e", arg: 2, scope: !899, file: !401, line: 33, type: !902)
!908 = !DILocation(line: 33, column: 32, scope: !899)
!909 = !DILocalVariable(name: "$ret30", scope: !899, file: !401, line: 33, type: !183)
!910 = !DILocation(line: 33, column: 50, scope: !899)
!911 = !DILocation(line: 34, column: 20, scope: !912)
!912 = distinct !DILexicalBlock(scope: !899, file: !401, line: 33, column: 1)
!913 = !DILocation(line: 34, column: 13, scope: !912)
!914 = !DILocalVariable(name: "err", scope: !912, file: !401, line: 34, type: !102)
!915 = !DILocation(line: 34, column: 2, scope: !899)
!916 = !DILocation(line: 35, column: 9, scope: !912)
!917 = !DILocalVariable(name: "$ret31", scope: !899, file: !401, line: 33, type: !102)
!918 = !DILocation(line: 33, column: 66, scope: !899)
!919 = !DILocation(line: 36, column: 3, scope: !912)
!920 = !DILocalVariable(name: "v", scope: !912, file: !401, line: 34, type: !183)
!921 = !DILocation(line: 38, column: 2, scope: !912)
!922 = distinct !DISubprogram(name: "eval.evalFuncDecl..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalFuncDecl", scope: null, file: !326, line: 20, type: !692, isLocal: false, isDefinition: true, scopeLine: 20, isOptimized: false, unit: !1, retainedNodes: !3)
!923 = !DILocalVariable(name: "c", arg: 1, scope: !922, file: !326, line: 20, type: !273)
!924 = !DILocation(line: 20, column: 1, scope: !922)
!925 = !DILocalVariable(name: "decl", arg: 2, scope: !922, file: !326, line: 20, type: !353)
!926 = !DILocation(line: 20, column: 32, scope: !922)
!927 = !DILocalVariable(name: "$ret8", scope: !922, file: !326, line: 20, type: !183)
!928 = !DILocation(line: 20, column: 48, scope: !922)
!929 = !DILocation(line: 21, column: 2, scope: !922)
!930 = distinct !DISubprogram(name: "eval.evalGenDecl..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalGenDecl", scope: null, file: !326, line: 24, type: !692, isLocal: false, isDefinition: true, scopeLine: 24, isOptimized: false, unit: !1, retainedNodes: !3)
!931 = !DILocalVariable(name: "c", arg: 1, scope: !930, file: !326, line: 24, type: !273)
!932 = !DILocation(line: 24, column: 1, scope: !930)
!933 = !DILocalVariable(name: "decl", arg: 2, scope: !930, file: !326, line: 24, type: !353)
!934 = !DILocation(line: 24, column: 31, scope: !930)
!935 = !DILocalVariable(name: "$ret10", scope: !930, file: !326, line: 24, type: !183)
!936 = !DILocation(line: 24, column: 47, scope: !930)
!937 = !DILocation(line: 25, column: 2, scope: !930)
!938 = distinct !DISubprogram(name: "eval.evalIdent..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalIdent", scope: null, file: !440, line: 73, type: !808, isLocal: false, isDefinition: true, scopeLine: 73, isOptimized: false, unit: !1, retainedNodes: !3)
!939 = !DILocalVariable(name: "c", arg: 1, scope: !938, file: !440, line: 73, type: !273)
!940 = !DILocation(line: 73, column: 1, scope: !938)
!941 = !DILocalVariable(name: "e", arg: 2, scope: !938, file: !440, line: 73, type: !373)
!942 = !DILocation(line: 73, column: 29, scope: !938)
!943 = !DILocalVariable(name: "$ret20", scope: !938, file: !440, line: 73, type: !183)
!944 = !DILocation(line: 73, column: 42, scope: !938)
!945 = !DILocalVariable(name: "k", scope: !946, file: !440, line: 74, type: !744)
!946 = distinct !DILexicalBlock(scope: !938, file: !440, line: 73, column: 1)
!947 = !DILocation(line: 74, column: 2, scope: !938)
!948 = !DILocalVariable(name: "ok", scope: !946, file: !440, line: 74, type: !64)
!949 = !DILocation(line: 74, column: 2, scope: !946)
!950 = !DILocation(line: 75, column: 5, scope: !946)
!951 = !DILocation(line: 76, column: 80, scope: !946)
!952 = !DILocalVariable(name: "ok", scope: !953, file: !440, line: 78, type: !64)
!953 = distinct !DILexicalBlock(scope: !946, file: !440, line: 78, column: 2)
!954 = !DILocation(line: 78, column: 5, scope: !946)
!955 = !DILocation(line: 78, column: 31, scope: !953)
!956 = !DILocation(line: 76, column: 73, scope: !946)
!957 = !DILocation(line: 76, column: 13, scope: !946)
!958 = !DILocation(line: 76, column: 3, scope: !946)
!959 = !DILocation(line: 78, column: 17, scope: !953)
!960 = !DILocation(line: 78, column: 5, scope: !953)
!961 = !DILocalVariable(name: "val", scope: !953, file: !440, line: 78, type: !172)
!962 = !DILocation(line: 78, column: 2, scope: !953)
!963 = !DILocation(line: 0, scope: !964)
!964 = distinct !DILexicalBlock(scope: !953, file: !440, line: 78, column: 42)
!965 = !DILocation(line: 79, column: 12, scope: !964)
!966 = !DILocation(line: 79, column: 60, scope: !964)
!967 = !DILocation(line: 83, column: 11, scope: !946)
!968 = !DILocation(line: 83, column: 39, scope: !946)
!969 = !DILocation(line: 80, column: 3, scope: !964)
!970 = !DILocation(line: 80, column: 16, scope: !964)
!971 = !DILocalVariable(name: "v", scope: !964, file: !440, line: 80, type: !183)
!972 = !DILocation(line: 80, column: 3, scope: !953)
!973 = !DILocalVariable(name: "$ret21", scope: !938, file: !440, line: 73, type: !102)
!974 = !DILocation(line: 73, column: 58, scope: !938)
!975 = !DILocation(line: 81, column: 3, scope: !964)
!976 = !DILocation(line: 84, column: 40, scope: !946)
!977 = !DILocation(line: 84, column: 11, scope: !946)
!978 = !DILocation(line: 85, column: 69, scope: !946)
!979 = !DILocation(line: 85, column: 2, scope: !946)
!980 = !DILocation(line: 85, column: 14, scope: !946)
!981 = !DILocation(line: 85, column: 57, scope: !946)
!982 = distinct !DISubprogram(name: "eval.evalIfStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalIfStmt", scope: null, file: !401, line: 65, type: !983, isLocal: false, isDefinition: true, scopeLine: 65, isOptimized: false, unit: !1, retainedNodes: !3)
!983 = !DISubroutineType(types: !984)
!984 = !{!269, !273, !273, !985}
!985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !986, size: 64)
!986 = !DICompositeType(tag: DW_TAG_structure_type, name: "IfStmt", file: !326, line: 5, size: 512, align: 8, elements: !987)
!987 = !{!988, !989, !990, !991, !992}
!988 = !DIDerivedType(tag: DW_TAG_member, name: "If", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "Init", file: !326, line: 5, baseType: !386, size: 128, align: 64, offset: 64)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "Cond", file: !326, line: 5, baseType: !373, size: 128, align: 64, offset: 192)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "Body", file: !326, line: 5, baseType: !581, size: 64, align: 64, offset: 320)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "Else", file: !326, line: 5, baseType: !386, size: 128, align: 64, offset: 384)
!993 = !DILocalVariable(name: "c", arg: 1, scope: !982, file: !401, line: 65, type: !273)
!994 = !DILocation(line: 65, column: 1, scope: !982)
!995 = !DILocalVariable(name: "e", arg: 2, scope: !982, file: !401, line: 65, type: !985)
!996 = !DILocation(line: 65, column: 30, scope: !982)
!997 = !DILocalVariable(name: "$ret36", scope: !982, file: !401, line: 65, type: !183)
!998 = !DILocation(line: 65, column: 46, scope: !982)
!999 = !DILocation(line: 66, column: 23, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !982, file: !401, line: 65, column: 1)
!1001 = !DILocation(line: 66, column: 16, scope: !1000)
!1002 = !DILocalVariable(name: "err", scope: !1000, file: !401, line: 66, type: !102)
!1003 = !DILocation(line: 66, column: 2, scope: !982)
!1004 = !DILocation(line: 67, column: 9, scope: !1000)
!1005 = !DILocalVariable(name: "$ret37", scope: !982, file: !401, line: 65, type: !102)
!1006 = !DILocation(line: 65, column: 62, scope: !982)
!1007 = !DILocation(line: 68, column: 3, scope: !1000)
!1008 = !DILocalVariable(name: "cond", scope: !1000, file: !401, line: 66, type: !183)
!1009 = !DILocation(line: 70, column: 9, scope: !1000)
!1010 = !DILocation(line: 70, column: 2, scope: !1000)
!1011 = !DILocation(line: 77, column: 2, scope: !1000)
!1012 = !DILocation(line: 71, column: 21, scope: !1013)
!1013 = distinct !DILexicalBlock(scope: !1000, file: !401, line: 70, column: 17)
!1014 = !DILocation(line: 71, column: 14, scope: !1013)
!1015 = !DILocalVariable(name: "err", scope: !1013, file: !401, line: 71, type: !102)
!1016 = !DILocation(line: 71, column: 3, scope: !1000)
!1017 = !DILocation(line: 72, column: 10, scope: !1013)
!1018 = !DILocation(line: 73, column: 4, scope: !1013)
!1019 = !DILocalVariable(name: "v", scope: !1013, file: !401, line: 71, type: !183)
!1020 = !DILocation(line: 75, column: 3, scope: !1013)
!1021 = distinct !DISubprogram(name: "eval.evalReturnStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalReturnStmt", scope: null, file: !401, line: 51, type: !1022, isLocal: false, isDefinition: true, scopeLine: 51, isOptimized: false, unit: !1, retainedNodes: !3)
!1022 = !DISubroutineType(types: !1023)
!1023 = !{!269, !273, !273, !1024}
!1024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!1025 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReturnStmt", file: !326, line: 5, size: 256, align: 8, elements: !1026)
!1026 = !{!1027, !1028}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "Return", file: !326, line: 5, baseType: !337, size: 64, align: 64)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "Results", file: !326, line: 5, baseType: !408, size: 192, align: 64, offset: 64)
!1029 = !DILocalVariable(name: "c", arg: 1, scope: !1021, file: !401, line: 51, type: !273)
!1030 = !DILocation(line: 51, column: 1, scope: !1021)
!1031 = !DILocalVariable(name: "e", arg: 2, scope: !1021, file: !401, line: 51, type: !1024)
!1032 = !DILocation(line: 51, column: 34, scope: !1021)
!1033 = !DILocalVariable(name: "$ret34", scope: !1021, file: !401, line: 51, type: !183)
!1034 = !DILocation(line: 51, column: 54, scope: !1021)
!1035 = !DILocation(line: 52, column: 10, scope: !1036)
!1036 = distinct !DILexicalBlock(scope: !1021, file: !401, line: 51, column: 1)
!1037 = !DILocation(line: 52, column: 20, scope: !1036)
!1038 = !DILocation(line: 53, column: 64, scope: !1036)
!1039 = !DILocation(line: 53, column: 3, scope: !1036)
!1040 = !DILocation(line: 53, column: 15, scope: !1036)
!1041 = !DILocalVariable(name: "$ret35", scope: !1021, file: !401, line: 51, type: !102)
!1042 = !DILocation(line: 51, column: 70, scope: !1021)
!1043 = !DILocation(line: 55, column: 53, scope: !1036)
!1044 = !DILocation(line: 55, column: 11, scope: !1036)
!1045 = !DILocation(line: 56, column: 33, scope: !1036)
!1046 = !DILocation(line: 56, column: 18, scope: !1036)
!1047 = !DILocalVariable(name: "result", scope: !1036, file: !401, line: 56, type: !183)
!1048 = !DILocation(line: 56, column: 2, scope: !1021)
!1049 = !DILocalVariable(name: "err", scope: !1036, file: !401, line: 56, type: !102)
!1050 = !DILocation(line: 57, column: 9, scope: !1036)
!1051 = !DILocation(line: 58, column: 3, scope: !1036)
!1052 = !DILocation(line: 60, column: 3, scope: !1036)
!1053 = !DILocation(line: 60, column: 14, scope: !1036)
!1054 = !DILocation(line: 61, column: 3, scope: !1036)
!1055 = !DILocation(line: 61, column: 16, scope: !1036)
!1056 = !DILocation(line: 62, column: 2, scope: !1036)
!1057 = distinct !DISubprogram(name: "eval.evalSelectorExpr..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalSelectorExpr", scope: null, file: !440, line: 88, type: !1058, isLocal: false, isDefinition: true, scopeLine: 88, isOptimized: false, unit: !1, retainedNodes: !3)
!1058 = !DISubroutineType(types: !1059)
!1059 = !{!269, !273, !273, !851}
!1060 = !DILocalVariable(name: "c", arg: 1, scope: !1057, file: !440, line: 88, type: !273)
!1061 = !DILocation(line: 88, column: 1, scope: !1057)
!1062 = !DILocalVariable(name: "e", arg: 2, scope: !1057, file: !440, line: 88, type: !851)
!1063 = !DILocation(line: 88, column: 36, scope: !1057)
!1064 = !DILocalVariable(name: "$ret22", scope: !1057, file: !440, line: 88, type: !183)
!1065 = !DILocation(line: 88, column: 58, scope: !1057)
!1066 = !DILocation(line: 89, column: 22, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1057, file: !440, line: 88, column: 1)
!1068 = !DILocation(line: 89, column: 15, scope: !1067)
!1069 = !DILocalVariable(name: "val", scope: !1067, file: !440, line: 89, type: !183)
!1070 = !DILocation(line: 89, column: 2, scope: !1057)
!1071 = !DILocalVariable(name: "err", scope: !1067, file: !440, line: 89, type: !102)
!1072 = !DILocation(line: 90, column: 9, scope: !1067)
!1073 = !DILocalVariable(name: "$ret23", scope: !1057, file: !440, line: 88, type: !102)
!1074 = !DILocation(line: 88, column: 74, scope: !1057)
!1075 = !DILocation(line: 91, column: 3, scope: !1067)
!1076 = !DILocation(line: 93, column: 9, scope: !1067)
!1077 = !DILocation(line: 93, column: 5, scope: !1067)
!1078 = !DILocation(line: 94, column: 12, scope: !1067)
!1079 = !DILocation(line: 95, column: 68, scope: !1067)
!1080 = !DILocation(line: 95, column: 3, scope: !1067)
!1081 = !DILocation(line: 95, column: 15, scope: !1067)
!1082 = !DILocation(line: 98, column: 75, scope: !1067)
!1083 = !DILocation(line: 98, column: 88, scope: !1067)
!1084 = !DILocation(line: 98, column: 92, scope: !1067)
!1085 = !DILocation(line: 98, column: 11, scope: !1067)
!1086 = !DILocation(line: 99, column: 83, scope: !1067)
!1087 = !DILocation(line: 99, column: 98, scope: !1067)
!1088 = !DILocation(line: 99, column: 102, scope: !1067)
!1089 = !DILocation(line: 99, column: 11, scope: !1067)
!1090 = !DILocation(line: 100, column: 11, scope: !1067)
!1091 = !DILocation(line: 101, column: 2, scope: !1067)
!1092 = !DILocalVariable(name: "v", scope: !1067, file: !440, line: 101, type: !183)
!1093 = !DILocation(line: 101, column: 2, scope: !1057)
!1094 = !DILocation(line: 101, column: 25, scope: !1067)
!1095 = !DILocation(line: 101, column: 29, scope: !1067)
!1096 = !DILocation(line: 101, column: 10, scope: !1067)
!1097 = !DILocation(line: 102, column: 7, scope: !1067)
!1098 = !DILocation(line: 102, column: 5, scope: !1067)
!1099 = !DILocation(line: 107, column: 2, scope: !1067)
!1100 = !DILocation(line: 103, column: 64, scope: !1067)
!1101 = !DILocation(line: 103, column: 68, scope: !1067)
!1102 = !DILocation(line: 103, column: 12, scope: !1067)
!1103 = !DILocation(line: 104, column: 16, scope: !1067)
!1104 = !DILocalVariable(name: "v", arg: 1, scope: !1105, file: !1106, line: 18, type: !33)
!1105 = distinct !DISubprogram(name: "eval.printMethods", scope: null, file: !1106, line: 18, type: !1107, isLocal: true, isDefinition: true, scopeLine: 18, isOptimized: false, unit: !1, retainedNodes: !3)
!1106 = !DIFile(filename: "print.go", directory: ".")
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!25, !33}
!1109 = !DILocation(line: 18, column: 19, scope: !1105, inlinedAt: !1110)
!1110 = distinct !DILocation(line: 104, column: 3, scope: !1067)
!1111 = !DILocation(line: 20, column: 6, scope: !1105, inlinedAt: !1110)
!1112 = !DILocation(line: 20, column: 14, scope: !1105, inlinedAt: !1110)
!1113 = !DILocation(line: 21, column: 8, scope: !1105, inlinedAt: !1110)
!1114 = !DILocation(line: 21, column: 5, scope: !1105, inlinedAt: !1110)
!1115 = !DILocalVariable(name: "i", scope: !1116, file: !1106, line: 23, type: !16)
!1116 = distinct !DILexicalBlock(scope: !1105, file: !1106, line: 23, column: 2)
!1117 = !DILocation(line: 23, column: 6, scope: !1105, inlinedAt: !1110)
!1118 = !DILocation(line: 23, column: 19, scope: !1116, inlinedAt: !1110)
!1119 = !DILocation(line: 23, column: 16, scope: !1116, inlinedAt: !1110)
!1120 = !DILocation(line: 24, column: 9, scope: !1121, inlinedAt: !1110)
!1121 = distinct !DILexicalBlock(scope: !1116, file: !1106, line: 23, column: 37)
!1122 = !DILocation(line: 24, column: 16, scope: !1121, inlinedAt: !1110)
!1123 = !DILocation(line: 25, column: 12, scope: !1121, inlinedAt: !1110)
!1124 = !DILocation(line: 23, column: 33, scope: !1116, inlinedAt: !1110)
!1125 = !DILocation(line: 105, column: 105, scope: !1067)
!1126 = !DILocation(line: 105, column: 120, scope: !1067)
!1127 = !DILocation(line: 105, column: 124, scope: !1067)
!1128 = !DILocation(line: 105, column: 66, scope: !1067)
!1129 = !DILocation(line: 105, column: 3, scope: !1067)
!1130 = !DILocation(line: 105, column: 15, scope: !1067)
!1131 = distinct !DISubprogram(name: "eval.evalStmt..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalStmt", scope: null, file: !401, line: 9, type: !1132, isLocal: false, isDefinition: true, scopeLine: 9, isOptimized: false, unit: !1, retainedNodes: !3)
!1132 = !DISubroutineType(types: !1133)
!1133 = !{!269, !273, !273, !386}
!1134 = !DILocalVariable(name: "c", arg: 1, scope: !1131, file: !401, line: 9, type: !273)
!1135 = !DILocation(line: 9, column: 1, scope: !1131)
!1136 = !DILocalVariable(name: "stmt", arg: 2, scope: !1131, file: !401, line: 9, type: !386)
!1137 = !DILocation(line: 9, column: 28, scope: !1131)
!1138 = !DILocalVariable(name: "$ret28", scope: !1131, file: !401, line: 9, type: !183)
!1139 = !DILocation(line: 9, column: 44, scope: !1131)
!1140 = !DILocation(line: 10, column: 6, scope: !1131)
!1141 = !DILocation(line: 10, column: 2, scope: !1131)
!1142 = !DILocation(line: 17, column: 2, scope: !1131)
!1143 = !DILocation(line: 18, column: 2, scope: !1131)
!1144 = !DILocation(line: 11, column: 15, scope: !1131)
!1145 = !DILocation(line: 12, column: 8, scope: !1131)
!1146 = !DILocation(line: 12, column: 20, scope: !1131)
!1147 = !DILocation(line: 12, column: 6, scope: !1131)
!1148 = !DILocation(line: 13, column: 13, scope: !1131)
!1149 = !DILocation(line: 13, column: 36, scope: !1131)
!1150 = !DILocation(line: 15, column: 11, scope: !1131)
!1151 = !DILocation(line: 15, column: 3, scope: !1131)
!1152 = !DILocation(line: 17, column: 9, scope: !1153)
!1153 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 19, column: 3)
!1154 = !DILocation(line: 20, column: 2, scope: !1131)
!1155 = !DILocation(line: 18, column: 2, scope: !1153)
!1156 = !DILocalVariable(name: "s", scope: !1153, file: !401, line: 17, type: !581)
!1157 = !DILocation(line: 17, column: 9, scope: !1131)
!1158 = !DILocation(line: 19, column: 11, scope: !1153)
!1159 = !DILocation(line: 19, column: 3, scope: !1153)
!1160 = !DILocation(line: 17, column: 9, scope: !1161)
!1161 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 21, column: 3)
!1162 = !DILocation(line: 22, column: 2, scope: !1131)
!1163 = !DILocation(line: 20, column: 2, scope: !1161)
!1164 = !DILocalVariable(name: "s", scope: !1161, file: !401, line: 17, type: !985)
!1165 = !DILocation(line: 21, column: 11, scope: !1161)
!1166 = !DILocation(line: 21, column: 3, scope: !1161)
!1167 = !DILocation(line: 17, column: 9, scope: !1168)
!1168 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 23, column: 3)
!1169 = !DILocation(line: 24, column: 2, scope: !1131)
!1170 = !DILocation(line: 22, column: 2, scope: !1168)
!1171 = !DILocalVariable(name: "s", scope: !1168, file: !401, line: 17, type: !1024)
!1172 = !DILocation(line: 23, column: 11, scope: !1168)
!1173 = !DILocation(line: 23, column: 3, scope: !1168)
!1174 = !DILocation(line: 17, column: 9, scope: !1175)
!1175 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 25, column: 3)
!1176 = !DILocation(line: 26, column: 2, scope: !1131)
!1177 = !DILocation(line: 0, scope: !1178)
!1178 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 27, column: 3)
!1179 = !DILocation(line: 24, column: 2, scope: !1175)
!1180 = !DILocalVariable(name: "s", scope: !1175, file: !401, line: 17, type: !404)
!1181 = !DILocation(line: 25, column: 11, scope: !1175)
!1182 = !DILocation(line: 25, column: 3, scope: !1175)
!1183 = !DILocalVariable(name: "s", scope: !1184, file: !401, line: 17, type: !386)
!1184 = distinct !DILexicalBlock(scope: !1131, file: !401, line: 29, column: 3)
!1185 = !DILocation(line: 26, column: 2, scope: !1178)
!1186 = !DILocalVariable(name: "s", scope: !1178, file: !401, line: 17, type: !902)
!1187 = !DILocation(line: 27, column: 11, scope: !1178)
!1188 = !DILocation(line: 27, column: 3, scope: !1178)
!1189 = !DILocation(line: 17, column: 9, scope: !1178)
!1190 = !DILocation(line: 29, column: 63, scope: !1184)
!1191 = !DILocation(line: 29, column: 70, scope: !1184)
!1192 = !DILocation(line: 29, column: 13, scope: !1184)
!1193 = !DILocation(line: 29, column: 3, scope: !1184)
!1194 = distinct !DISubprogram(name: "eval.evalUnaryExpr..1command_line_arguments.Context", linkageName: "command_line_arguments.Context.evalUnaryExpr", scope: null, file: !440, line: 160, type: !1195, isLocal: false, isDefinition: true, scopeLine: 160, isOptimized: false, unit: !1, retainedNodes: !3)
!1195 = !DISubroutineType(types: !1196)
!1196 = !{!269, !273, !273, !831}
!1197 = !DILocalVariable(name: "c", arg: 1, scope: !1194, file: !440, line: 160, type: !273)
!1198 = !DILocation(line: 160, column: 1, scope: !1194)
!1199 = !DILocalVariable(name: "e", arg: 2, scope: !1194, file: !440, line: 160, type: !831)
!1200 = !DILocation(line: 160, column: 33, scope: !1194)
!1201 = !DILocalVariable(name: "$ret26", scope: !1194, file: !440, line: 160, type: !183)
!1202 = !DILocation(line: 160, column: 52, scope: !1194)
!1203 = !DILocation(line: 161, column: 21, scope: !1204)
!1204 = distinct !DILexicalBlock(scope: !1194, file: !440, line: 160, column: 1)
!1205 = !DILocation(line: 161, column: 14, scope: !1204)
!1206 = !DILocalVariable(name: "v1", scope: !1204, file: !440, line: 161, type: !183)
!1207 = !DILocation(line: 161, column: 2, scope: !1194)
!1208 = !DILocalVariable(name: "err", scope: !1204, file: !440, line: 161, type: !102)
!1209 = !DILocation(line: 162, column: 9, scope: !1204)
!1210 = !DILocalVariable(name: "$ret27", scope: !1194, file: !440, line: 160, type: !102)
!1211 = !DILocation(line: 160, column: 68, scope: !1194)
!1212 = !DILocation(line: 163, column: 3, scope: !1204)
!1213 = !DILocation(line: 165, column: 11, scope: !1204)
!1214 = !DILocation(line: 166, column: 10, scope: !1204)
!1215 = !DILocation(line: 168, column: 28, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1204, file: !440, line: 168, column: 3)
!1217 = !DILocation(line: 168, column: 25, scope: !1216)
!1218 = !DILocation(line: 168, column: 17, scope: !1216)
!1219 = !DILocation(line: 168, column: 3, scope: !1216)
!1220 = !DILocalVariable(name: "vv", scope: !1216, file: !440, line: 168, type: !183)
!1221 = !DILocation(line: 168, column: 3, scope: !1204)
!1222 = !DILocation(line: 169, column: 3, scope: !1216)
!1223 = !DILocation(line: 171, column: 13, scope: !1204)
!1224 = !DILocation(line: 171, column: 3, scope: !1204)
!1225 = distinct !DISubprogram(name: "eval.NewContext", linkageName: "command_line_arguments.NewContext", scope: null, file: !11, line: 42, type: !1226, isLocal: false, isDefinition: true, scopeLine: 42, isOptimized: false, unit: !1, retainedNodes: !3)
!1226 = !DISubroutineType(types: !1227)
!1227 = !{!1228, !12}
!1228 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Context,error}", file: !81, size: 192, align: 8, elements: !1229)
!1229 = !{!1230, !1231}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !81, line: 42, baseType: !273, size: 64, align: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !81, line: 42, baseType: !102, size: 128, align: 64, offset: 64)
!1232 = !DILocalVariable(name: "identifiers", arg: 1, scope: !1225, file: !11, line: 42, type: !12)
!1233 = !DILocation(line: 42, column: 17, scope: !1225)
!1234 = !DILocalVariable(name: "$ret4", scope: !1225, file: !11, line: 42, type: !273)
!1235 = !DILocation(line: 42, column: 54, scope: !1225)
!1236 = !DILocation(line: 44, column: 22, scope: !1237)
!1237 = distinct !DILexicalBlock(scope: !1225, file: !11, line: 42, column: 1)
!1238 = !DILocation(line: 43, column: 7, scope: !1237)
!1239 = !DILocation(line: 43, column: 8, scope: !1237)
!1240 = !DILocalVariable(name: "c", scope: !1237, file: !11, line: 43, type: !273)
!1241 = !DILocation(line: 43, column: 2, scope: !1225)
!1242 = !DILocation(line: 47, column: 2, scope: !1243)
!1243 = distinct !DILexicalBlock(scope: !1237, file: !11, line: 47, column: 2)
!1244 = !DILocation(line: 48, column: 16, scope: !1245)
!1245 = distinct !DILexicalBlock(scope: !1243, file: !11, line: 48, column: 3)
!1246 = !DILocation(line: 48, column: 6, scope: !1245)
!1247 = !DILocalVariable(name: "ok", scope: !1245, file: !11, line: 48, type: !64)
!1248 = !DILocation(line: 48, column: 6, scope: !1243)
!1249 = !DILocation(line: 48, column: 3, scope: !1245)
!1250 = !DILocation(line: 49, column: 8, scope: !1245)
!1251 = !DILocation(line: 52, column: 4, scope: !1243)
!1252 = !DILocation(line: 52, column: 20, scope: !1243)
!1253 = !DILocation(line: 54, column: 2, scope: !1237)
!1254 = distinct !DISubprogram(name: "eval.command_line_arguments.EvalError..hash", linkageName: "command_line_arguments.command_line_arguments.EvalError..hash", scope: null, file: !7, line: 1, type: !54, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !1, retainedNodes: !3)
!1255 = !DILocalVariable(name: "key", arg: 1, scope: !1254, file: !7, line: 1, type: !24)
!1256 = !DILocation(line: 1, column: 1, scope: !1254)
!1257 = !DILocalVariable(name: "seed", arg: 2, scope: !1254, file: !7, line: 1, type: !28)
!1258 = !DILocalVariable(name: "$ret42", scope: !1254, file: !7, line: 1, type: !28)
!1259 = distinct !DISubprogram(name: "eval.command_line_arguments.EvalError..eq", linkageName: "command_line_arguments.command_line_arguments.EvalError..eq", scope: null, file: !7, line: 1, type: !62, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !1, retainedNodes: !3)
!1260 = !DILocalVariable(name: "key1", arg: 1, scope: !1259, file: !7, line: 1, type: !24)
!1261 = !DILocation(line: 1, column: 1, scope: !1259)
!1262 = !DILocalVariable(name: "key2", arg: 2, scope: !1259, file: !7, line: 1, type: !24)
!1263 = !DILocalVariable(name: "$ret43", scope: !1259, file: !7, line: 1, type: !64)
!1264 = distinct !DISubprogram(name: "eval.End..stub.command_line_arguments.EvalError", linkageName: "command_line_arguments.EvalError.End..stub", scope: null, file: !326, line: 5, type: !1265, isLocal: false, isDefinition: true, scopeLine: 5, isOptimized: false, unit: !1, retainedNodes: !3)
!1265 = !DISubroutineType(types: !1266)
!1266 = !{!337, !1267, !1267}
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = !DICompositeType(tag: DW_TAG_structure_type, name: "EvalError", file: !32, line: 32, size: 384, align: 8, elements: !1269)
!1269 = !{!1270, !1271, !1272}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "Node", file: !32, line: 33, baseType: !325, size: 128, align: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !32, line: 34, baseType: !69, size: 128, align: 64, offset: 128)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "Msg", file: !32, line: 35, baseType: !69, size: 128, align: 64, offset: 256)
!1273 = !DILocalVariable(name: "$this8.pointer", arg: 1, scope: !1264, file: !326, line: 5, type: !1267)
!1274 = !DILocation(line: 5, column: 8, scope: !1264)
!1275 = !DILocalVariable(name: "$this8", scope: !1264, file: !326, line: 5, type: !1267)
!1276 = !DILocalVariable(name: "$ret41", scope: !1264, file: !326, line: 5, type: !337)
!1277 = !DILocation(line: 32, column: 6, scope: !1278)
!1278 = !DILexicalBlockFile(scope: !1264, file: !32, discriminator: 0)
!1279 = distinct !DISubprogram(name: "eval.Error.command_line_arguments.EvalError", linkageName: "command_line_arguments.EvalError.Error", scope: null, file: !32, line: 38, type: !1280, isLocal: false, isDefinition: true, scopeLine: 38, isOptimized: false, unit: !1, retainedNodes: !3)
!1280 = !DISubroutineType(types: !1281)
!1281 = !{!69, !1267, !1267}
!1282 = !DILocalVariable(name: "pointer", arg: 1, scope: !1279, file: !32, line: 38, type: !1267)
!1283 = !DILocation(line: 38, column: 1, scope: !1279)
!1284 = !DILocalVariable(name: "e", scope: !1279, file: !32, line: 38, type: !1268)
!1285 = !DILocation(line: 39, column: 47, scope: !1279)
!1286 = !DILocation(line: 39, column: 56, scope: !1279)
!1287 = !DILocation(line: 39, column: 39, scope: !1279)
!1288 = !DILocation(line: 39, column: 65, scope: !1279)
!1289 = !DILocation(line: 39, column: 13, scope: !1279)
!1290 = !DILocation(line: 39, column: 2, scope: !1279)
!1291 = distinct !DISubprogram(name: "eval.Pos..stub.command_line_arguments.EvalError", linkageName: "command_line_arguments.EvalError.Pos..stub", scope: null, file: !326, line: 5, type: !1265, isLocal: false, isDefinition: true, scopeLine: 5, isOptimized: false, unit: !1, retainedNodes: !3)
!1292 = !DILocalVariable(name: "$this7.pointer", arg: 1, scope: !1291, file: !326, line: 5, type: !1267)
!1293 = !DILocation(line: 5, column: 8, scope: !1291)
!1294 = !DILocalVariable(name: "$this7", scope: !1291, file: !326, line: 5, type: !1267)
!1295 = !DILocalVariable(name: "$ret40", scope: !1291, file: !326, line: 5, type: !337)
!1296 = !DILocation(line: 32, column: 6, scope: !1297)
!1297 = !DILexicalBlockFile(scope: !1291, file: !32, discriminator: 0)
!1298 = distinct !DISubprogram(name: "eval.command_line_arguments..init0", linkageName: "command_line_arguments.command_line_arguments..init0", scope: null, file: !156, line: 13, type: !202, isLocal: false, isDefinition: true, scopeLine: 13, isOptimized: false, unit: !1, retainedNodes: !3)
!1299 = !DILocation(line: 14, column: 15, scope: !1298)
!1300 = !DILocation(line: 15, column: 15, scope: !1298)
!1301 = !DILocation(line: 15, column: 13, scope: !1298)
	.text
	.file	"gomodule"

	.section ".go_export","e",@progbits
	.ascii "v2;\n"
	.ascii "package "
	.ascii "eval"
	.ascii ";\n"
	.ascii "pkgpath "
	.ascii "command-line-arguments"
	.ascii ";\n"
	.ascii "import "
	.ascii "bytes"
	.ascii " "
	.ascii "bytes"
	.ascii " \""
	.ascii "bytes"
	.ascii "\";\n"
	.ascii "import "
	.ascii "errors"
	.ascii " "
	.ascii "errors"
	.ascii " \""
	.ascii "errors"
	.ascii "\";\n"
	.ascii "import "
	.ascii "fmt"
	.ascii " "
	.ascii "fmt"
	.ascii " \""
	.ascii "fmt"
	.ascii "\";\n"
	.ascii "import "
	.ascii "logging"
	.ascii " "
	.ascii "github.com/ChrisRx/dungeonfs/pkg/logging"
	.ascii " \""
	.ascii "github.com/ChrisRx/dungeonfs/pkg/logging"
	.ascii "\";\n"
	.ascii "import "
	.ascii "ast"
	.ascii " "
	.ascii "go/ast"
	.ascii " \""
	.ascii "go/ast"
	.ascii "\";\n"
	.ascii "import "
	.ascii "token"
	.ascii " "
	.ascii "go/token"
	.ascii " \""
	.ascii "go/token"
	.ascii "\";\n"
	.ascii "import "
	.ascii "reflect"
	.ascii " "
	.ascii "reflect"
	.ascii " \""
	.ascii "reflect"
	.ascii "\";\n"
	.ascii "import "
	.ascii "strconv"
	.ascii " "
	.ascii "strconv"
	.ascii " \""
	.ascii "strconv"
	.ascii "\";\n"
	.ascii "import "
	.ascii "strings"
	.ascii " "
	.ascii "strings"
	.ascii " \""
	.ascii "strings"
	.ascii "\";\n"
	.ascii "init"
	.ascii " "
	.ascii "eval"
	.ascii " "
	.ascii "command_line_arguments..import"
	.ascii " "
	.ascii "bytes"
	.ascii " "
	.ascii "bytes..import"
	.ascii " "
	.ascii "fmt"
	.ascii " "
	.ascii "fmt..import"
	.ascii " "
	.ascii "logging"
	.ascii " "
	.ascii "github_com_ChrisRx_dungeonfs_pkg_logging..import"
	.ascii " "
	.ascii "ast"
	.ascii " "
	.ascii "go_ast..import"
	.ascii " "
	.ascii "scanner"
	.ascii " "
	.ascii "go_scanner..import"
	.ascii " "
	.ascii "token"
	.ascii " "
	.ascii "go_token..import"
	.ascii " "
	.ascii "poll"
	.ascii " "
	.ascii "internal_poll..import"
	.ascii " "
	.ascii "testlog"
	.ascii " "
	.ascii "internal_testlog..import"
	.ascii " "
	.ascii "io"
	.ascii " "
	.ascii "io..import"
	.ascii " "
	.ascii "os"
	.ascii " "
	.ascii "os..import"
	.ascii " "
	.ascii "filepath"
	.ascii " "
	.ascii "path_filepath..import"
	.ascii " "
	.ascii "reflect"
	.ascii " "
	.ascii "reflect..import"
	.ascii " "
	.ascii "runtime"
	.ascii " "
	.ascii "runtime..import"
	.ascii " "
	.ascii "sys"
	.ascii " "
	.ascii "runtime_internal_sys..import"
	.ascii " "
	.ascii "strconv"
	.ascii " "
	.ascii "strconv..import"
	.ascii " "
	.ascii "sync"
	.ascii " "
	.ascii "sync..import"
	.ascii " "
	.ascii "syscall"
	.ascii " "
	.ascii "syscall..import"
	.ascii " "
	.ascii "time"
	.ascii " "
	.ascii "time..import"
	.ascii " "
	.ascii "unicode"
	.ascii " "
	.ascii "unicode..import"
	.ascii ";\n"
	.ascii "init_graph"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "19"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "17"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "18"
	.ascii " "
	.ascii "17"
	.ascii ";\n"
	.ascii "type "
	.ascii "<type 1 "
	.ascii "\"Context\" "
	.ascii "<type 2 "
	.ascii "struct { "
	.ascii ".command-line-arguments.fset"
	.ascii " "
	.ascii "<type 3 "
	.ascii "*"
	.ascii "<type 4 "
	.ascii "\"go/token.FileSet\" "
	.ascii "<type 5 "
	.ascii "struct { "
	.ascii ".go/token.mutex"
	.ascii " "
	.ascii "<type 6 "
	.ascii "\"sync.RWMutex\" "
	.ascii "\""
	.ascii "sync"
	.ascii "\" "
	.ascii "<type 7 "
	.ascii "struct { "
	.ascii ".sync.w"
	.ascii " "
	.ascii "<type 8 "
	.ascii "\"sync.Mutex\" "
	.ascii "<type 9 "
	.ascii "struct { "
	.ascii ".sync.state"
	.ascii " "
	.ascii "<type -3>"
	.ascii "; "
	.ascii ".sync.sema"
	.ascii " "
	.ascii "<type -7>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "m"
	.ascii " "
	.ascii "<type 10 "
	.ascii "*"
	.ascii "<type 8>"
	.ascii ">"
	.ascii ") "
	.ascii "Lock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "m"
	.ascii " "
	.ascii "<type 10>"
	.ascii ") "
	.ascii "Unlock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii ".sync.writerSem"
	.ascii " "
	.ascii "<type -7>"
	.ascii "; "
	.ascii ".sync.readerSem"
	.ascii " "
	.ascii "<type -7>"
	.ascii "; "
	.ascii ".sync.readerCount"
	.ascii " "
	.ascii "<type -3>"
	.ascii "; "
	.ascii ".sync.readerWait"
	.ascii " "
	.ascii "<type -3>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "rw"
	.ascii " "
	.ascii "<type 11 "
	.ascii "*"
	.ascii "<type 6>"
	.ascii ">"
	.ascii ") "
	.ascii "Unlock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "rw"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 11>"
	.ascii ") "
	.ascii "RLocker"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 12 "
	.ascii "\"sync.Locker\" "
	.ascii "<type 13 "
	.ascii "interface { "
	.ascii "Lock"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "Unlock"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "rw"
	.ascii " "
	.ascii "<type 11>"
	.ascii ") "
	.ascii "RLock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "rw"
	.ascii " "
	.ascii "<type 11>"
	.ascii ") "
	.ascii "RUnlock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "rw"
	.ascii " "
	.ascii "<type 11>"
	.ascii ") "
	.ascii "Lock"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii ".go/token.base"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii ".go/token.files"
	.ascii " "
	.ascii "<type 14 "
	.ascii "["
	.ascii "] "
	.ascii "<type 15 "
	.ascii "*"
	.ascii "<type 16 "
	.ascii "\"go/token.File\" "
	.ascii "<type 17 "
	.ascii "struct { "
	.ascii ".go/token.set"
	.ascii " "
	.ascii "<type 18 "
	.ascii "*"
	.ascii "<type 4>"
	.ascii ">"
	.ascii "; "
	.ascii ".go/token.name"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii ".go/token.base"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii ".go/token.size"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii ".go/token.mutex"
	.ascii " "
	.ascii "<type 8>"
	.ascii "; "
	.ascii ".go/token.lines"
	.ascii " "
	.ascii "<type 19 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii "; "
	.ascii ".go/token.infos"
	.ascii " "
	.ascii "<type 20 "
	.ascii "["
	.ascii "] "
	.ascii "<type 21 "
	.ascii "\".go/token.lineInfo\" "
	.ascii "<type 22 "
	.ascii "struct { "
	.ascii "Offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Filename"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Line"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23 "
	.ascii "*"
	.ascii "<type 16>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/token.position"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24 "
	.ascii "\"go/token.Pos\" "
	.ascii "<type -11>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ") "
	.ascii "IsValid"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii ">"
	.ascii ", "
	.ascii "adjusted"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25 "
	.ascii "\"go/token.Position\" "
	.ascii "<type 26 "
	.ascii "struct { "
	.ascii "Filename"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Line"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Column"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "pos"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 27 "
	.ascii "*"
	.ascii "<type 25>"
	.ascii ">"
	.ascii ") "
	.ascii "IsValid"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Offset"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii ".go/token.unpack"
	.ascii " ("
	.ascii "offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "adjusted"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "filename"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "line"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "column"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "LineCount"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Position"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " ("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Size"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Base"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "MergeLine"
	.ascii " ("
	.ascii "line"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "SetLines"
	.ascii " ("
	.ascii "lines"
	.ascii " "
	.ascii "<type 28 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "PositionFor"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ", "
	.ascii "adjusted"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Line"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x22>"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Name"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "SetLinesForContent"
	.ascii " ("
	.ascii "content"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 29 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "AddLineInfo"
	.ascii " ("
	.ascii "offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "filename"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "line"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "AddLine"
	.ascii " ("
	.ascii "offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 23>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii "offset"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".go/token.last"
	.ascii " "
	.ascii "<type 15>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "Write"
	.ascii " ("
	.ascii "encode"
	.ascii " "
	.ascii "<esc:0x22>"
	.ascii " "
	.ascii "<type 30 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 31 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "Read"
	.ascii " ("
	.ascii "decode"
	.ascii " "
	.ascii "<esc:0x22>"
	.ascii " "
	.ascii "<type 32 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 33 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "Position"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " ("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "PositionFor"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ", "
	.ascii "adjusted"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "pos"
	.ascii " "
	.ascii "<type 25>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "File"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " ("
	.ascii "f"
	.ascii " "
	.ascii "<type 15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "AddFile"
	.ascii " ("
	.ascii "filename"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "size"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "Iterate"
	.ascii " ("
	.ascii "f"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 34 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 15>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii "Base"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<type 18>"
	.ascii ") "
	.ascii ".go/token.file"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<type 24>"
	.ascii ")"
	.ascii " "
	.ascii "<type 15>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".command-line-arguments.identifiers"
	.ascii " "
	.ascii "<type 35 "
	.ascii "map ["
	.ascii "<type -16>"
	.ascii "] "
	.ascii "<type 36 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".command-line-arguments.returnSet"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii ".command-line-arguments.returnValue"
	.ascii " "
	.ascii "<type 37 "
	.ascii "*"
	.ascii "<type 38 "
	.ascii "\"reflect.Value\" "
	.ascii "<type 39 "
	.ascii "struct { "
	.ascii ".reflect.typ"
	.ascii " "
	.ascii "<type 40 "
	.ascii "*"
	.ascii "<type 41 "
	.ascii "\".reflect.rtype\" "
	.ascii "<type 42 "
	.ascii "struct { "
	.ascii ".reflect.size"
	.ascii " "
	.ascii "<type -13>"
	.ascii "; "
	.ascii ".reflect.ptrdata"
	.ascii " "
	.ascii "<type -13>"
	.ascii "; "
	.ascii ".reflect.hash"
	.ascii " "
	.ascii "<type -7>"
	.ascii "; "
	.ascii ".reflect.kind"
	.ascii " "
	.ascii "<type -5>"
	.ascii "; "
	.ascii ".reflect.align"
	.ascii " "
	.ascii "<type -1>"
	.ascii "; "
	.ascii ".reflect.fieldAlign"
	.ascii " "
	.ascii "<type -5>"
	.ascii "; "
	.ascii ".reflect._"
	.ascii " "
	.ascii "<type -5>"
	.ascii "; "
	.ascii ".reflect.hashfn"
	.ascii " "
	.ascii "<type 43 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 44 "
	.ascii "\"unsafe.Pointer\" "
	.ascii "\""
	.ascii "unsafe"
	.ascii "\" "
	.ascii "<type 45 "
	.ascii "*"
	.ascii "any"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -13>"
	.ascii ")"
	.ascii " "
	.ascii "<type -13>"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.equalfn"
	.ascii " "
	.ascii "<type 46 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 44>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type 44>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.gcdata"
	.ascii " "
	.ascii "<type 47 "
	.ascii "*"
	.ascii "<type -20>"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.string"
	.ascii " "
	.ascii "<type 48 "
	.ascii "*"
	.ascii "<type -16>"
	.ascii ">"
	.ascii "; "
	.ascii "? "
	.ascii "<type 49 "
	.ascii "*"
	.ascii "<type 50 "
	.ascii "\".reflect.uncommonType\" "
	.ascii "<type 51 "
	.ascii "struct { "
	.ascii ".reflect.name"
	.ascii " "
	.ascii "<type 48>"
	.ascii "; "
	.ascii ".reflect.pkgPath"
	.ascii " "
	.ascii "<type 48>"
	.ascii "; "
	.ascii ".reflect.methods"
	.ascii " "
	.ascii "<type 52 "
	.ascii "["
	.ascii "] "
	.ascii "<type 53 "
	.ascii "\".reflect.method\" "
	.ascii "<type 54 "
	.ascii "struct { "
	.ascii ".reflect.name"
	.ascii " "
	.ascii "<type 48>"
	.ascii "; "
	.ascii ".reflect.pkgPath"
	.ascii " "
	.ascii "<type 48>"
	.ascii "; "
	.ascii ".reflect.mtyp"
	.ascii " "
	.ascii "<type 55 "
	.ascii "*"
	.ascii "<type 41>"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.typ"
	.ascii " "
	.ascii "<type 55>"
	.ascii "; "
	.ascii ".reflect.tfn"
	.ascii " "
	.ascii "<type 44>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x32>"
	.ascii " "
	.ascii "<type 56 "
	.ascii "*"
	.ascii "<type 50>"
	.ascii ">"
	.ascii ") "
	.ascii "Name"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x32>"
	.ascii " "
	.ascii "<type 56>"
	.ascii ") "
	.ascii "PkgPath"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 56>"
	.ascii ") "
	.ascii ".reflect.uncommon"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 56>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.ptrToThis"
	.ascii " "
	.ascii "<type 55>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Comparable"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "ConvertibleTo"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 57 "
	.ascii "\"reflect.Type\" "
	.ascii "<type 58 "
	.ascii "interface { "
	.ascii "Align"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "FieldAlign"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Method"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 59 "
	.ascii "\"reflect.Method\" "
	.ascii "<type 60 "
	.ascii "struct { "
	.ascii "Name"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "PkgPath"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Type"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii "Func"
	.ascii " "
	.ascii "<type 38>"
	.ascii "; "
	.ascii "Index"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "MethodByName"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 59>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "NumMethod"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Name"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "PkgPath"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Size"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -13>"
	.ascii "; "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii ".reflect.rawString"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Kind"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 61 "
	.ascii "\"reflect.Kind\" "
	.ascii "<type -12>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "k"
	.ascii " "
	.ascii "<type 61>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "Implements"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "AssignableTo"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "ConvertibleTo"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "Comparable"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "Bits"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "ChanDir"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 62 "
	.ascii "\"reflect.ChanDir\" "
	.ascii "<type -11>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "d"
	.ascii " "
	.ascii "<type 62>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "IsVariadic"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "Elem"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii "Field"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 63 "
	.ascii "\"reflect.StructField\" "
	.ascii "<type 64 "
	.ascii "struct { "
	.ascii "Name"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "PkgPath"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Type"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii "Tag"
	.ascii " "
	.ascii "<type 65 "
	.ascii "\"reflect.StructTag\" "
	.ascii "<type -16>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tag"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 65>"
	.ascii ") "
	.ascii "Lookup"
	.ascii " ("
	.ascii "key"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " ("
	.ascii "value"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tag"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 65>"
	.ascii ") "
	.ascii "Get"
	.ascii " ("
	.ascii "key"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "Offset"
	.ascii " "
	.ascii "<type -13>"
	.ascii "; "
	.ascii "Index"
	.ascii " "
	.ascii "<type 66 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii "; "
	.ascii "Anonymous"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "FieldByIndex"
	.ascii " ("
	.ascii "index"
	.ascii " "
	.ascii "<type 67 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 63>"
	.ascii "; "
	.ascii "FieldByName"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 63>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "FieldByNameFunc"
	.ascii " ("
	.ascii "match"
	.ascii " "
	.ascii "<type 68 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type 63>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "In"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii "Key"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii "Len"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "NumField"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "NumIn"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "NumOut"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "Out"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii "; "
	.ascii ".reflect.common"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 69 "
	.ascii "*"
	.ascii "<type 41>"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.uncommon"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 49>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Implements"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Out"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "AssignableTo"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Len"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii ".reflect.common"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 55>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii ".reflect.exportedMethods"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 70 "
	.ascii "["
	.ascii "] "
	.ascii "<type 53>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "NumMethod"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Kind"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 61>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Bits"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x42>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "PkgPath"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x32>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii ".reflect.rawString"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii ".reflect.pointers"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Method"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " ("
	.ascii "m"
	.ascii " "
	.ascii "<type 59>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Align"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "NumOut"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "NumIn"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Key"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "FieldAlign"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "ChanDir"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 62>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "FieldByName"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 63>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "MethodByName"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " ("
	.ascii "m"
	.ascii " "
	.ascii "<type 59>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x42>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Name"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Size"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -13>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "FieldByIndex"
	.ascii " ("
	.ascii "index"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 71 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 63>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "IsVariadic"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii ".reflect.ptrTo"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 55>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Elem"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "NumField"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x4a>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "Field"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 63>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "In"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "t"
	.ascii " "
	.ascii "<type 55>"
	.ascii ") "
	.ascii "FieldByNameFunc"
	.ascii " ("
	.ascii "match"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 72 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 63>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".reflect.ptr"
	.ascii " "
	.ascii "<type 44>"
	.ascii "; "
	.ascii "? "
	.ascii "<type 73 "
	.ascii "\".reflect.flag\" "
	.ascii "<type -13>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 73>"
	.ascii ") "
	.ascii ".reflect.mustBeAssignable"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 73>"
	.ascii ") "
	.ascii ".reflect.kind"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 61>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 73>"
	.ascii ") "
	.ascii ".reflect.ro"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 73>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 73>"
	.ascii ") "
	.ascii ".reflect.mustBe"
	.ascii " ("
	.ascii "expected"
	.ascii " "
	.ascii "<type 61>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "f"
	.ascii " "
	.ascii "<type 73>"
	.ascii ") "
	.ascii ".reflect.mustBeExported"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Convert"
	.ascii " ("
	.ascii "t"
	.ascii " "
	.ascii "<type 57>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Uint"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -8>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "TryRecv"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Slice3"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "j"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "k"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Slice"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "j"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetPointer"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 44>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetString"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetUint"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -8>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "TrySend"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetCap"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetComplex"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -18>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.setRunes"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 74 "
	.ascii "["
	.ascii "] "
	.ascii "<type -21>"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Index"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Cap"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Float"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -10>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "CallSlice"
	.ascii " ("
	.ascii "in"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 75 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 76 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "FieldByName"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "OverflowUint"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -8>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Field"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "NumField"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Elem"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "CanInterface"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Bool"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.assignTo"
	.ascii " ("
	.ascii "context"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "dst"
	.ascii " "
	.ascii "<type 40>"
	.ascii ", "
	.ascii "target"
	.ascii " "
	.ascii "<type 44>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.recv"
	.ascii " ("
	.ascii "nb"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "val"
	.ascii " "
	.ascii "<type 38>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Call"
	.ascii " ("
	.ascii "in"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 77 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 78 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x2a>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Bytes"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 79 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Addr"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Interface"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type 80 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Kind"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 61>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Int"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.send"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ", "
	.ascii "nb"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "selected"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.pointer"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 44>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "CanSet"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Pointer"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -13>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "FieldByNameFunc"
	.ascii " ("
	.ascii "match"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 81 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Complex"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -18>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "NumMethod"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x2a>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.runes"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 82 "
	.ascii "["
	.ascii "] "
	.ascii "<type -21>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "InterfaceData"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 83 "
	.ascii "["
	.ascii "2"
	.ascii " "
	.ascii "] "
	.ascii "<type -13>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Close"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Recv"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "UnsafeAddr"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -13>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "IsNil"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii ".reflect.call"
	.ascii " ("
	.ascii "op"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "in"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 84 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 85 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "IsValid"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "FieldByIndex"
	.ascii " ("
	.ascii "index"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 86 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "MethodByName"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetLen"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Len"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "MapKeys"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 87 "
	.ascii "["
	.ascii "] "
	.ascii "<type 38>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "OverflowComplex"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -18>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Type"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 57>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "OverflowFloat"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -10>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Method"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "OverflowInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Send"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "Set"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 38>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetFloat"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -10>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetBool"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetMapIndex"
	.ascii " ("
	.ascii "key"
	.ascii " "
	.ascii "<type 38>"
	.ascii ", "
	.ascii "val"
	.ascii " "
	.ascii "<type 38>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x2a>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "MapIndex"
	.ascii " ("
	.ascii "key"
	.ascii " "
	.ascii "<type 38>"
	.ascii ")"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "CanAddr"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 38>"
	.ascii ") "
	.ascii "SetBytes"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 88 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 89 "
	.ascii "*"
	.ascii "<type 1>"
	.ascii ">"
	.ascii ") "
	.ascii ".command-line-arguments.evalDecl"
	.ascii " ("
	.ascii "decl"
	.ascii " "
	.ascii "<type 90 "
	.ascii "\"go/ast.Decl\" "
	.ascii "<type 91 "
	.ascii "interface { "
	.ascii "? "
	.ascii "<type 92 "
	.ascii "\"go/ast.Node\" "
	.ascii "<type 93 "
	.ascii "interface { "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".go/ast.declNode"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalFuncDecl"
	.ascii " ("
	.ascii "decl"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 90>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalGenDecl"
	.ascii " ("
	.ascii "decl"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 90>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii "Eval"
	.ascii " ("
	.ascii "node"
	.ascii " "
	.ascii "<type 92>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalExpr"
	.ascii " ("
	.ascii "expr"
	.ascii " "
	.ascii "<type 94 "
	.ascii "\"go/ast.Expr\" "
	.ascii "<type 95 "
	.ascii "interface { "
	.ascii "? "
	.ascii "<type 92>"
	.ascii "; "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalCallExpr"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<esc:0x10a>"
	.ascii " "
	.ascii "<type 96 "
	.ascii "*"
	.ascii "<type 97 "
	.ascii "\"go/ast.CallExpr\" "
	.ascii "<type 98 "
	.ascii "struct { "
	.ascii "Fun"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "Lparen"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Args"
	.ascii " "
	.ascii "<type 99 "
	.ascii "["
	.ascii "] "
	.ascii "<type 94>"
	.ascii ">"
	.ascii "; "
	.ascii "Ellipsis"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Rparen"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 100 "
	.ascii "*"
	.ascii "<type 97>"
	.ascii ">"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 100>"
	.ascii ") "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 100>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalIdent"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<type 94>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalSelectorExpr"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<type 101 "
	.ascii "*"
	.ascii "<type 102 "
	.ascii "\"go/ast.SelectorExpr\" "
	.ascii "<type 103 "
	.ascii "struct { "
	.ascii "X"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "Sel"
	.ascii " "
	.ascii "<type 104 "
	.ascii "*"
	.ascii "<type 105 "
	.ascii "\"go/ast.Ident\" "
	.ascii "<type 106 "
	.ascii "struct { "
	.ascii "NamePos"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Name"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Obj"
	.ascii " "
	.ascii "<type 107 "
	.ascii "*"
	.ascii "<type 108 "
	.ascii "\"go/ast.Object\" "
	.ascii "<type 109 "
	.ascii "struct { "
	.ascii "Kind"
	.ascii " "
	.ascii "<type 110 "
	.ascii "\"go/ast.ObjKind\" "
	.ascii "<type -11>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "kind"
	.ascii " "
	.ascii "<type 110>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "Name"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Decl"
	.ascii " "
	.ascii "<type 111 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii "; "
	.ascii "Data"
	.ascii " "
	.ascii "<type 112 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii "; "
	.ascii "Type"
	.ascii " "
	.ascii "<type 113 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "obj"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 114 "
	.ascii "*"
	.ascii "<type 108>"
	.ascii ">"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "id"
	.ascii " "
	.ascii "<esc:0x22>"
	.ascii " "
	.ascii "<type 115 "
	.ascii "*"
	.ascii "<type 105>"
	.ascii ">"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 115>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 115>"
	.ascii ") "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 115>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "id"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 115>"
	.ascii ") "
	.ascii "IsExported"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 116 "
	.ascii "*"
	.ascii "<type 102>"
	.ascii ">"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 116>"
	.ascii ") "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 116>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalBinaryExpr"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<type 117 "
	.ascii "*"
	.ascii "<type 118 "
	.ascii "\"go/ast.BinaryExpr\" "
	.ascii "<type 119 "
	.ascii "struct { "
	.ascii "X"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "OpPos"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Op"
	.ascii " "
	.ascii "<type 120 "
	.ascii "\"go/token.Token\" "
	.ascii "<type -11>"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tok"
	.ascii " "
	.ascii "<type 120>"
	.ascii ") "
	.ascii "IsKeyword"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tok"
	.ascii " "
	.ascii "<type 120>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tok"
	.ascii " "
	.ascii "<type 120>"
	.ascii ") "
	.ascii "IsOperator"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "op"
	.ascii " "
	.ascii "<type 120>"
	.ascii ") "
	.ascii "Precedence"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "tok"
	.ascii " "
	.ascii "<type 120>"
	.ascii ") "
	.ascii "IsLiteral"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "Y"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 121 "
	.ascii "*"
	.ascii "<type 118>"
	.ascii ">"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 121>"
	.ascii ") "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 121>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalUnaryExpr"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<esc:0x10a>"
	.ascii " "
	.ascii "<type 122 "
	.ascii "*"
	.ascii "<type 123 "
	.ascii "\"go/ast.UnaryExpr\" "
	.ascii "<type 124 "
	.ascii "struct { "
	.ascii "OpPos"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Op"
	.ascii " "
	.ascii "<type 120>"
	.ascii "; "
	.ascii "X"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 125 "
	.ascii "*"
	.ascii "<type 123>"
	.ascii ">"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 125>"
	.ascii ") "
	.ascii ".go/ast.exprNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 125>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalStmt"
	.ascii " ("
	.ascii "stmt"
	.ascii " "
	.ascii "<type 126 "
	.ascii "\"go/ast.Stmt\" "
	.ascii "<type 127 "
	.ascii "interface { "
	.ascii "? "
	.ascii "<type 92>"
	.ascii "; "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalExprStmt"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<esc:0x10a>"
	.ascii " "
	.ascii "<type 128 "
	.ascii "*"
	.ascii "<type 129 "
	.ascii "\"go/ast.ExprStmt\" "
	.ascii "<type 130 "
	.ascii "struct { "
	.ascii "X"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 131 "
	.ascii "*"
	.ascii "<type 129>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 131>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 131>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalAssignStmt"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<esc:0x18a>"
	.ascii " "
	.ascii "<type 132 "
	.ascii "*"
	.ascii "<type 133 "
	.ascii "\"go/ast.AssignStmt\" "
	.ascii "<type 134 "
	.ascii "struct { "
	.ascii "Lhs"
	.ascii " "
	.ascii "<type 135 "
	.ascii "["
	.ascii "] "
	.ascii "<type 94>"
	.ascii ">"
	.ascii "; "
	.ascii "TokPos"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Tok"
	.ascii " "
	.ascii "<type 120>"
	.ascii "; "
	.ascii "Rhs"
	.ascii " "
	.ascii "<type 136 "
	.ascii "["
	.ascii "] "
	.ascii "<type 94>"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 137 "
	.ascii "*"
	.ascii "<type 133>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 137>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 137>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalReturnStmt"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<type 138 "
	.ascii "*"
	.ascii "<type 139 "
	.ascii "\"go/ast.ReturnStmt\" "
	.ascii "<type 140 "
	.ascii "struct { "
	.ascii "Return"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Results"
	.ascii " "
	.ascii "<type 141 "
	.ascii "["
	.ascii "] "
	.ascii "<type 94>"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 142 "
	.ascii "*"
	.ascii "<type 139>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 142>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 142>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalIfStmt"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<esc:0x10a>"
	.ascii " "
	.ascii "<type 143 "
	.ascii "*"
	.ascii "<type 144 "
	.ascii "\"go/ast.IfStmt\" "
	.ascii "<type 145 "
	.ascii "struct { "
	.ascii "If"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "Init"
	.ascii " "
	.ascii "<type 126>"
	.ascii "; "
	.ascii "Cond"
	.ascii " "
	.ascii "<type 94>"
	.ascii "; "
	.ascii "Body"
	.ascii " "
	.ascii "<type 146 "
	.ascii "*"
	.ascii "<type 147 "
	.ascii "\"go/ast.BlockStmt\" "
	.ascii "<type 148 "
	.ascii "struct { "
	.ascii "Lbrace"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "List"
	.ascii " "
	.ascii "<type 149 "
	.ascii "["
	.ascii "] "
	.ascii "<type 126>"
	.ascii ">"
	.ascii "; "
	.ascii "Rbrace"
	.ascii " "
	.ascii "<type 24>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 150 "
	.ascii "*"
	.ascii "<type 147>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 150>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 150>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "Else"
	.ascii " "
	.ascii "<type 126>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 151 "
	.ascii "*"
	.ascii "<type 144>"
	.ascii ">"
	.ascii ") "
	.ascii ".go/ast.stmtNode"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 151>"
	.ascii ") "
	.ascii "End"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 151>"
	.ascii ") "
	.ascii "Pos"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 24>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "c"
	.ascii " "
	.ascii "<type 89>"
	.ascii ") "
	.ascii ".command-line-arguments.evalBlockStmt"
	.ascii " ("
	.ascii "e"
	.ascii " "
	.ascii "<type 146>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 37>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii ">"
	.ascii ";\n"
	.ascii "var "
	.ascii "ErrInvalidValue"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii "var "
	.ascii "ErrReturnValue"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii "type "
	.ascii "<type 152 "
	.ascii "\"EvalError\" "
	.ascii "<type 153 "
	.ascii "struct { "
	.ascii "? "
	.ascii "<type 92>"
	.ascii "; "
	.ascii "Type"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "Msg"
	.ascii " "
	.ascii "<type -16>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "e"
	.ascii " "
	.ascii "<type 152>"
	.ascii ") "
	.ascii "Error"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii ">"
	.ascii ";\n"
	.ascii "var "
	.ascii "False"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii "func "
	.ascii "NewContext"
	.ascii " ("
	.ascii "identifiers"
	.ascii " "
	.ascii "<type 154 "
	.ascii "map ["
	.ascii "<type -16>"
	.ascii "] "
	.ascii "<type 155 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 89>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii "func "
	.ascii "NewScope"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 156 "
	.ascii "*"
	.ascii "<type 157 "
	.ascii "\"Scope\" "
	.ascii "<type 158 "
	.ascii "struct { "
	.ascii "Objects"
	.ascii " "
	.ascii "<type 159 "
	.ascii "map ["
	.ascii "<type -16>"
	.ascii "] "
	.ascii "<type 160 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 161 "
	.ascii "*"
	.ascii "<type 157>"
	.ascii ">"
	.ascii ") "
	.ascii "Insert"
	.ascii " ("
	.ascii "k"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "v"
	.ascii " "
	.ascii "<type 162 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 161>"
	.ascii ") "
	.ascii "Lookup"
	.ascii " ("
	.ascii "name"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " "
	.ascii "<type 163 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ";\n"
	.ascii "var "
	.ascii "Nil"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii "var "
	.ascii "PkgLogger"
	.ascii " "
	.ascii "<type 164 "
	.ascii "\".command-line-arguments.logger\" "
	.ascii "<type 165 "
	.ascii "interface { "
	.ascii "Printf"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "..."
	.ascii "<type 166 "
	.ascii "interface { "
	.ascii "}"
	.ascii ">"
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ";\n"
	.ascii "type "
	.ascii "<type 157>"
	.ascii ";\n"
	.ascii "var "
	.ascii "True"
	.ascii " "
	.ascii "<type 38>"
	.ascii ";\n"
	.ascii "func "
	.ascii "command_line_arguments..init0"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii "checksum CF335DA87F53859CBD50AE2DD341145A36213857;\n"
	.text


	.file	1 "<built-in>"
	.file	2 "./context.go"
	.file	3 "./binop.go"
	.file	4 "<stdin>"
	.file	5 "./eval.go"
	.file	6 "./logging.go"
	.section	.text.command_line_arguments.checkValues,"ax",@progbits
	.p2align	4, 0x90
	.type	command_line_arguments.checkValues,@function
command_line_arguments.checkValues:
.Lfunc_begin0:
	.loc	5 42 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB0_2
	movabsq	$56, %r10
	movabsq	$24, %r11
	callq	__morestack
	retq
.LBB0_2:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	72(%rsp), %r14
.Ltmp0:
	.loc	5 43 2 prologue_end
	testq	%r14, %r14
	jle	.LBB0_10
	.loc	5 0 2 is_stmt 0
	movq	64(%rsp), %r15
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB0_4:
	.loc	5 43 2
	movq	(%r15,%rbx,8), %r12
.Ltmp1:
	.loc	5 44 8 is_stmt 1
	movq	%r12, %rdi
	callq	reflect.Value.IsValid
	.loc	5 44 6 is_stmt 0
	testb	%al, %al
	sete	%al
	je	.LBB0_7
.Ltmp2:
	.loc	5 44 23
	movq	%r12, %rdi
	callq	reflect.Value.Kind
	.loc	5 44 31
	cmpq	$22, %rax
	jne	.LBB0_9
.Ltmp3:
	.loc	5 44 50
	movq	%r12, %rdi
	callq	reflect.Value.IsNil
.Ltmp4:
.LBB0_7:
	.loc	5 44 3
	testb	$1, %al
	jne	.LBB0_8
.Ltmp5:
.LBB0_9:
	.loc	5 43 2 is_stmt 1
	addq	$1, %rbx
	cmpq	%r14, %rbx
	jl	.LBB0_4
.Ltmp6:
.LBB0_10:
	.loc	5 48 2
	xorl	%eax, %eax
	xorl	%edx, %edx
	jmp	.LBB0_11
.LBB0_8:
.Ltmp7:
	.loc	5 45 15
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rsp)
	movq	$0, 16(%rsp)
	movl	$.Lconst.123, %edi
	movl	$24, %esi
	callq	fmt.Errorf
.Ltmp8:
.LBB0_11:
	.loc	5 0 15 is_stmt 0
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	command_line_arguments.checkValues, .Lfunc_end0-command_line_arguments.checkValues
	.cfi_endproc

	.section	.text.command_line_arguments..import,"ax",@progbits
	.globl	command_line_arguments..import
	.p2align	4, 0x90
	.type	command_line_arguments..import,@function
command_line_arguments..import:
.Lfunc_begin1:
	.loc	3 1 0 is_stmt 1
	.cfi_startproc
	leaq	-264(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB1_2
	movq	%r10, %rax
	movabsq	$264, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB1_2:
.Ltmp9:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$256, %rsp
	.cfi_def_cfa_offset 272
	.cfi_offset %rbx, -16
	.loc	1 1 1 prologue_end
	movl	$go..C0, %edi
	callq	runtime.registerGCRoots
	.loc	2 9 13
	movl	$bool..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movb	$1, (%rax)
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	$0, (%rax)
	movups	.Lconst.14(%rip), %xmm0
	movaps	%xmm0, 192(%rsp)
	movq	$bool..d, 208(%rsp)
	movq	%rbx, 216(%rsp)
	movups	.Lconst.15(%rip), %xmm0
	movaps	%xmm0, 224(%rsp)
	movq	$bool..d, 240(%rsp)
	movq	%rax, 248(%rsp)
	leaq	192(%rsp), %r8
	movl	$type..map.6string.7interface.4.5, %edi
	movl	$2, %esi
	movl	$32, %edx
	movl	$16, %ecx
	callq	__go_construct_map
	.loc	2 9 5 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_15
	movl	$command_line_arguments.types, %edi
	movq	%rax, %rsi
	callq	runtime.writebarrierptr
	jmp	.LBB1_4
.LBB1_15:
	movq	%rax, command_line_arguments.types(%rip)
.LBB1_4:
	.loc	5 11 26 is_stmt 1
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	$0, (%rax)
	leaq	168(%rsp), %rdi
	.loc	5 11 18 is_stmt 0
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	184(%rsp), %rax
	movq	%rax, 112(%rsp)
	movups	168(%rsp), %xmm0
	movaps	%xmm0, 96(%rsp)
	.loc	5 11 2
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_16
	.loc	5 0 2
	leaq	96(%rsp), %rdx
	.loc	5 11 2
	movl	$reflect.Value..d, %edi
	movl	$command_line_arguments.False, %esi
	callq	runtime.typedmemmove
	jmp	.LBB1_6
.LBB1_16:
	movq	112(%rsp), %rax
	movq	%rax, command_line_arguments.False+16(%rip)
	movaps	96(%rsp), %xmm0
	movaps	%xmm0, command_line_arguments.False(%rip)
.LBB1_6:
	.loc	5 12 26 is_stmt 1
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	$1, (%rax)
	leaq	144(%rsp), %rdi
	.loc	5 12 18 is_stmt 0
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	160(%rsp), %rax
	movq	%rax, 80(%rsp)
	movups	144(%rsp), %xmm0
	movaps	%xmm0, 64(%rsp)
	.loc	5 12 2
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_17
	.loc	5 0 2
	leaq	64(%rsp), %rdx
	.loc	5 12 2
	movl	$reflect.Value..d, %edi
	movl	$command_line_arguments.True, %esi
	callq	runtime.typedmemmove
	jmp	.LBB1_8
.LBB1_17:
	movq	80(%rsp), %rax
	movq	%rax, command_line_arguments.True+16(%rip)
	movaps	64(%rsp), %xmm0
	movaps	%xmm0, command_line_arguments.True(%rip)
.LBB1_8:
	.loc	5 0 2
	leaq	120(%rsp), %rdi
	.loc	5 13 18 is_stmt 1
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	reflect.ValueOf
	movq	136(%rsp), %rax
	movq	%rax, 48(%rsp)
	movups	120(%rsp), %xmm0
	movaps	%xmm0, 32(%rsp)
	.loc	5 13 2 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_18
	.loc	5 0 2
	leaq	32(%rsp), %rdx
	.loc	5 13 2
	movl	$reflect.Value..d, %edi
	movl	$command_line_arguments.Nil, %esi
	callq	runtime.typedmemmove
	jmp	.LBB1_10
.LBB1_18:
	movq	48(%rsp), %rax
	movq	%rax, command_line_arguments.Nil+16(%rip)
	movaps	32(%rsp), %xmm0
	movaps	%xmm0, command_line_arguments.Nil(%rip)
.LBB1_10:
	.loc	5 15 27 is_stmt 1
	movl	$.Lconst.123, %edi
	movl	$24, %esi
	callq	errors.New
	movq	%rax, 16(%rsp)
	movq	%rdx, 24(%rsp)
	.loc	5 15 2 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_19
	.loc	5 0 2
	leaq	16(%rsp), %rdx
	.loc	5 15 2
	movl	$error..d, %edi
	movl	$command_line_arguments.ErrInvalidValue, %esi
	callq	runtime.typedmemmove
	jmp	.LBB1_12
.LBB1_19:
	movups	16(%rsp), %xmm0
	movups	%xmm0, command_line_arguments.ErrInvalidValue(%rip)
.LBB1_12:
	.loc	5 16 27 is_stmt 1
	movl	$.Lconst.125, %edi
	movl	$19, %esi
	callq	errors.New
	movq	%rax, (%rsp)
	movq	%rdx, 8(%rsp)
	.loc	5 16 2 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB1_20
	.loc	5 0 2
	movq	%rsp, %rdx
	.loc	5 16 2
	movl	$error..d, %edi
	movl	$command_line_arguments.ErrReturnValue, %esi
	callq	runtime.typedmemmove
	jmp	.LBB1_14
.LBB1_20:
	movups	(%rsp), %xmm0
	movups	%xmm0, command_line_arguments.ErrReturnValue(%rip)
.LBB1_14:
	.loc	6 13 1 is_stmt 1
	callq	command_line_arguments.command_line_arguments..init0
	addq	$256, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Ltmp10:
.Lfunc_end1:
	.size	command_line_arguments..import, .Lfunc_end1-command_line_arguments..import
	.cfi_endproc

	.section	.text.command_line_arguments.Scope.Insert,"ax",@progbits
	.globl	command_line_arguments.Scope.Insert
	.p2align	4, 0x90
	.type	command_line_arguments.Scope.Insert,@function
command_line_arguments.Scope.Insert:
.Lfunc_begin2:
	.loc	2 24 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB2_2
	movq	%r10, %rax
	movabsq	$40, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB2_2:
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	%rsi, 24(%rsp)
	movq	%rdx, 32(%rsp)
	movq	%rcx, 8(%rsp)
	movq	%r8, 16(%rsp)
.Ltmp11:
	.loc	2 25 3 prologue_end
	testq	%rdi, %rdi
	je	.LBB2_8
.Ltmp12:
	movq	(%rdi), %rsi
	leaq	24(%rsp), %rdx
.Ltmp13:
	.loc	2 25 15 is_stmt 0
	movl	$type..map.6string.7interface.4.5, %edi
.Ltmp14:
	callq	runtime.mapassign
.Ltmp15:
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB2_4
	.loc	2 0 15
	leaq	8(%rsp), %rdx
	.loc	2 25 15
	movl	$type..interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	addq	$40, %rsp
	.cfi_def_cfa_offset 8
	retq
.LBB2_4:
	.cfi_def_cfa_offset 48
	testq	%rax, %rax
	je	.LBB2_8
	movups	8(%rsp), %xmm0
	movups	%xmm0, (%rax)
	addq	$40, %rsp
	.cfi_def_cfa_offset 8
	retq
.Ltmp16:
.LBB2_8:
	.cfi_def_cfa_offset 48
	.loc	2 0 15
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end2:
	.size	command_line_arguments.Scope.Insert, .Lfunc_end2-command_line_arguments.Scope.Insert
	.cfi_endproc

	.section	.text.command_line_arguments.Scope.Lookup,"ax",@progbits
	.globl	command_line_arguments.Scope.Lookup
	.p2align	4, 0x90
	.type	command_line_arguments.Scope.Lookup,@function
command_line_arguments.Scope.Lookup:
.Lfunc_begin3:
	.loc	2 28 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB3_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB3_2:
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movq	%rsi, 8(%rsp)
	movq	%rdx, 16(%rsp)
.Ltmp17:
	.loc	2 29 17 prologue_end
	testq	%rdi, %rdi
	je	.LBB3_5
.Ltmp18:
	movq	(%rdi), %rsi
	leaq	8(%rsp), %rdx
.Ltmp19:
	.loc	2 29 5 is_stmt 0
	movl	$type..map.6string.7interface.4.5, %edi
.Ltmp20:
	callq	runtime.mapaccess2
.Ltmp21:
	.loc	2 29 2
	testb	$1, %dl
	jne	.LBB3_6
.Ltmp22:
	.loc	2 32 2 is_stmt 1
	xorl	%eax, %eax
	xorl	%edx, %edx
.Ltmp23:
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	retq
.LBB3_6:
	.cfi_def_cfa_offset 32
.Ltmp24:
	.loc	2 29 5
	movq	(%rax), %rcx
.Ltmp25:
	movq	8(%rax), %rdx
.Ltmp26:
	.loc	2 30 3
	movq	%rcx, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	retq
.Ltmp27:
.LBB3_5:
	.cfi_def_cfa_offset 32
	.loc	2 29 17
	movl	$6, %edi
.Ltmp28:
	callq	__go_runtime_error
.Ltmp29:
.Lfunc_end3:
	.size	command_line_arguments.Scope.Lookup, .Lfunc_end3-command_line_arguments.Scope.Lookup
	.cfi_endproc

	.section	.text.command_line_arguments.NewScope,"ax",@progbits
	.globl	command_line_arguments.NewScope
	.p2align	4, 0x90
	.type	command_line_arguments.NewScope,@function
command_line_arguments.NewScope:
.Lfunc_begin4:
	.loc	2 18 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB4_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB4_2:
.Ltmp30:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	.loc	2 20 12 prologue_end
	callq	runtime.makemap_small
	movq	%rax, %r14
	.loc	2 19 9
	movl	$command_line_arguments.Scope..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp31:
	.loc	2 19 10 is_stmt 0
	movq	%r14, (%rsp)
	movq	%rsp, %rdx
	.loc	2 19 9
	movl	$command_line_arguments.Scope..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	.loc	2 19 2
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
.Ltmp32:
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Ltmp33:
.Lfunc_end4:
	.size	command_line_arguments.NewScope, .Lfunc_end4-command_line_arguments.NewScope
	.cfi_endproc

	.section	.text.command_line_arguments.Context.Eval,"ax",@progbits
	.globl	command_line_arguments.Context.Eval
	.p2align	4, 0x90
	.type	command_line_arguments.Context.Eval,@function
command_line_arguments.Context.Eval:
.Lfunc_begin5:
	.loc	5 19 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB5_2
	movq	%r10, %rax
	movabsq	$184, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB5_2:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$144, %rsp
	.cfi_def_cfa_offset 192
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
.Ltmp34:
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rsi, %r15
	movq	%rdi, %r12
.Ltmp35:
	.loc	5 20 2 prologue_end
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	callq	runtime.ifacetype
	movq	%rax, %rbx
	.loc	5 21 2
	movl	$go_ast.Decl..d, %edi
	movq	%rax, %rsi
	callq	runtime.ifaceT2Ip
	testb	%al, %al
	je	.LBB5_10
.Ltmp36:
	.loc	5 20 9
	testq	%r13, %r13
	je	.LBB5_4
.Ltmp37:
	movq	(%r13), %rsi
	jmp	.LBB5_5
.Ltmp38:
.LBB5_10:
	.loc	5 23 2
	movl	$go_ast.Expr..d, %edi
	movq	%rbx, %rsi
	callq	runtime.ifaceT2Ip
	testb	%al, %al
	je	.LBB5_11
.Ltmp39:
	.loc	5 20 9
	testq	%r13, %r13
	je	.LBB5_9
.Ltmp40:
	movq	(%r13), %rsi
	jmp	.LBB5_15
.Ltmp41:
.LBB5_4:
	.loc	5 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp42:
.LBB5_5:
	.loc	5 21 2 is_stmt 1
	movl	$go_ast.Decl..d, %edi
	callq	runtime.assertitab
.Ltmp43:
	.loc	5 0 2 is_stmt 0
	leaq	120(%rsp), %rdi
.Ltmp44:
	.loc	5 22 11 is_stmt 1
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	command_line_arguments.Context.evalDecl
.Ltmp45:
	movq	120(%rsp), %rax
	.loc	5 22 3 is_stmt 0
	movq	%rax, (%r12)
	movups	128(%rsp), %xmm0
	jmp	.LBB5_6
.Ltmp46:
.LBB5_11:
	.loc	5 25 2 is_stmt 1
	movl	$go_ast.Stmt..d, %edi
	movq	%rbx, %rsi
	callq	runtime.ifaceT2Ip
	testb	%al, %al
	je	.LBB5_16
.Ltmp47:
	.loc	5 0 0 is_stmt 0
	testq	%r13, %r13
	je	.LBB5_13
.Ltmp48:
	.loc	5 20 9 is_stmt 1
	movq	(%r13), %rsi
	jmp	.LBB5_23
.Ltmp49:
.LBB5_9:
	.loc	5 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp50:
.LBB5_15:
	.loc	5 23 2 is_stmt 1
	movl	$go_ast.Expr..d, %edi
	callq	runtime.assertitab
.Ltmp51:
	.loc	5 0 2 is_stmt 0
	leaq	96(%rsp), %rdi
.Ltmp52:
	.loc	5 24 11 is_stmt 1
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	command_line_arguments.Context.evalExpr
.Ltmp53:
	movq	96(%rsp), %rax
	.loc	5 24 3 is_stmt 0
	movq	%rax, (%r12)
	movups	104(%rsp), %xmm0
	jmp	.LBB5_6
.Ltmp54:
.LBB5_13:
	.loc	5 0 3
	xorl	%esi, %esi
.Ltmp55:
.LBB5_23:
	.loc	5 25 2 is_stmt 1
	movl	$go_ast.Stmt..d, %edi
	callq	runtime.assertitab
.Ltmp56:
	.loc	5 0 2 is_stmt 0
	leaq	72(%rsp), %rdi
.Ltmp57:
	.loc	5 26 11 is_stmt 1
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	command_line_arguments.Context.evalStmt
.Ltmp58:
	movq	72(%rsp), %rax
	.loc	5 26 3 is_stmt 0
	movq	%rax, (%r12)
	movups	80(%rsp), %xmm0
.Ltmp59:
.LBB5_6:
	.loc	5 0 3
	movups	%xmm0, 8(%r12)
	movq	%r12, %rax
	addq	$144, %rsp
.Ltmp60:
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
.Ltmp61:
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
.Ltmp62:
	.cfi_def_cfa_offset 8
	retq
.LBB5_16:
	.cfi_def_cfa_offset 192
.Ltmp63:
	testq	%r13, %r13
	jne	.LBB5_24
.Ltmp64:
	xorl	%edi, %edi
	jmp	.LBB5_18
.Ltmp65:
.LBB5_24:
	.loc	5 28 70 is_stmt 1
	movq	(%r13), %rdi
.Ltmp66:
.LBB5_18:
	.loc	5 28 63 is_stmt 0
	movq	%r14, %rsi
	callq	reflect.TypeOf
	testq	%rax, %rax
	jne	.LBB5_25
.Ltmp67:
	.loc	5 0 63
	xorl	%eax, %eax
	jmp	.LBB5_20
.Ltmp68:
.LBB5_25:
	.loc	5 28 63
	movq	(%rax), %rax
.Ltmp69:
.LBB5_20:
	.loc	5 28 13
	movq	%rax, 56(%rsp)
	movq	%rdx, 64(%rsp)
	leaq	56(%rsp), %rax
	movq	%rax, 32(%rsp)
	movq	$1, 40(%rsp)
	movq	$1, 48(%rsp)
	movq	48(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	32(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.127, %edi
	movl	$30, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB5_26
.Ltmp70:
	.loc	5 0 13
	xorl	%edi, %edi
	.loc	5 28 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp71:
.LBB5_26:
	.loc	5 28 13
	movq	(%rax), %rdi
	.loc	5 28 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp72:
.Lfunc_end5:
	.size	command_line_arguments.Context.Eval, .Lfunc_end5-command_line_arguments.Context.Eval
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalAssignStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalAssignStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalAssignStmt,@function
command_line_arguments.Context.evalAssignStmt:
.Lfunc_begin6:
	.file	7 "./stmt.go"
	.loc	7 41 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB6_2
	movq	%r10, %rax
	movabsq	$104, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB6_2:
.Ltmp73:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$72, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	.loc	7 42 22 prologue_end
	testq	%rdx, %rdx
	je	.LBB6_19
.Ltmp74:
	.loc	7 0 22 is_stmt 0
	movq	%rdx, %rbx
.Ltmp75:
	.loc	7 42 26
	cmpq	$0, 48(%rdx)
	jle	.LBB6_20
.Ltmp76:
	.loc	7 0 26
	movq	%rsi, %r14
.Ltmp77:
	movq	%rdi, %r15
	movq	40(%rbx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %r12
	.loc	7 42 26
	testq	%rax, %rax
	je	.LBB6_5
.Ltmp78:
	movq	(%rax), %rsi
	jmp	.LBB6_6
.Ltmp79:
.LBB6_5:
	.loc	7 0 26
	xorl	%esi, %esi
.Ltmp80:
.LBB6_6:
	.loc	7 42 26
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	24(%rsp), %rdi
.Ltmp81:
	.loc	7 42 15
	movq	%r14, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	command_line_arguments.Context.Eval
	movq	32(%rsp), %rax
.Ltmp82:
	.loc	7 43 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB6_8
.Ltmp83:
	.loc	7 42 15
	movq	40(%rsp), %rcx
	.loc	7 44 3
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rcx, 16(%r15)
	jmp	.LBB6_18
.Ltmp84:
.LBB6_8:
	.loc	7 46 15
	cmpq	$0, 8(%rbx)
	jle	.LBB6_20
.Ltmp85:
	.loc	7 0 15 is_stmt 0
	movq	24(%rsp), %r12
	movq	(%rbx), %rcx
	movq	(%rcx), %rax
.Ltmp86:
	movq	8(%rcx), %rbx
.Ltmp87:
	.loc	7 46 18
	testq	%rax, %rax
	je	.LBB6_10
.Ltmp88:
	movq	(%rax), %rsi
	jmp	.LBB6_11
.Ltmp89:
.LBB6_10:
	.loc	7 0 18
	xorl	%esi, %esi
.Ltmp90:
.LBB6_11:
	.loc	7 46 18
	movl	$type...1go_ast.Ident, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
	.loc	7 46 31
	testq	%rbx, %rbx
	je	.LBB6_19
.Ltmp91:
	.loc	7 0 31
	movups	8(%rbx), %xmm0
	movaps	%xmm0, 48(%rsp)
	.loc	7 47 22 is_stmt 1
	movq	$type...1reflect.Value, 8(%rsp)
	movq	%r12, 16(%rsp)
	.loc	7 47 3 is_stmt 0
	testq	%r14, %r14
	je	.LBB6_19
.Ltmp92:
	movq	8(%r14), %rsi
	leaq	48(%rsp), %rdx
	.loc	7 47 22
	movl	$type..map.6string.7interface.4.5, %edi
	callq	runtime.mapassign
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB6_14
.Ltmp93:
	.loc	7 0 22
	leaq	8(%rsp), %rdx
	.loc	7 47 22
	movl	$type..interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB6_17
.Ltmp94:
.LBB6_14:
	testq	%rax, %rax
	je	.LBB6_19
.Ltmp95:
	movups	8(%rsp), %xmm0
	movups	%xmm0, (%rax)
.Ltmp96:
.LBB6_17:
	.loc	7 48 2 is_stmt 1
	movq	$command_line_arguments.True, (%r15)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r15)
.Ltmp97:
.LBB6_18:
	.loc	7 0 2 is_stmt 0
	movq	%r15, %rax
	addq	$72, %rsp
.Ltmp98:
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp99:
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB6_19:
	.cfi_def_cfa_offset 112
	movl	$6, %edi
	callq	__go_runtime_error
.LBB6_20:
.Ltmp100:
	xorl	%edi, %edi
	callq	__go_runtime_error
.Lfunc_end6:
	.size	command_line_arguments.Context.evalAssignStmt, .Lfunc_end6-command_line_arguments.Context.evalAssignStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalBinaryExpr,"ax",@progbits
	.globl	command_line_arguments.Context.evalBinaryExpr
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalBinaryExpr,@function
command_line_arguments.Context.evalBinaryExpr:
.Lfunc_begin7:
	.file	8 "./expr.go"
	.loc	8 110 0 is_stmt 1
	.cfi_startproc
	leaq	-776(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB7_2
	movq	%r10, %rax
	movabsq	$776, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB7_2:
.Ltmp101:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$728, %rsp
	.cfi_def_cfa_offset 784
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	.loc	8 111 21 prologue_end
	testq	%rdx, %rdx
	je	.LBB7_65
.Ltmp102:
	.loc	8 0 21 is_stmt 0
	movq	%rdx, %rbx
.Ltmp103:
	movq	%rsi, %r12
.Ltmp104:
	movq	%rdi, %r15
	movq	(%rdx), %rax
	movq	8(%rdx), %r14
	.loc	8 111 21
	testq	%rax, %rax
	je	.LBB7_5
.Ltmp105:
	movq	(%rax), %rsi
	jmp	.LBB7_6
.Ltmp106:
.LBB7_5:
	.loc	8 0 21
	xorl	%esi, %esi
.Ltmp107:
.LBB7_6:
	.loc	8 111 21
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	520(%rsp), %rdi
	.loc	8 111 14
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	command_line_arguments.Context.Eval
	movq	528(%rsp), %rax
.Ltmp108:
	.loc	8 112 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_9
.Ltmp109:
	.loc	8 111 14
	movq	536(%rsp), %rcx
.Ltmp110:
.LBB7_8:
	.loc	8 0 14 is_stmt 0
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rcx, 16(%r15)
	jmp	.LBB7_50
.Ltmp111:
.LBB7_9:
	movq	520(%rsp), %r14
.Ltmp112:
	.loc	8 115 10 is_stmt 1
	movq	24(%rbx), %rbp
	cmpq	$39, %rbp
	je	.LBB7_20
.Ltmp113:
	.loc	8 0 10 is_stmt 0
	cmpq	$35, %rbp
	je	.LBB7_16
.Ltmp114:
	cmpq	$34, %rbp
	jne	.LBB7_66
.Ltmp115:
	.loc	8 128 9 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.IsValid
.Ltmp116:
	.loc	8 128 6 is_stmt 0
	testb	%al, %al
	je	.LBB7_23
.Ltmp117:
	.loc	8 133 9 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Bool
	.loc	8 133 6 is_stmt 0
	testb	%al, %al
	je	.LBB7_22
.Ltmp118:
	.loc	8 0 6
	movq	32(%rbx), %rax
	movq	40(%rbx), %rbx
.Ltmp119:
	.loc	8 136 22 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_32
.Ltmp120:
	movq	(%rax), %rsi
	jmp	.LBB7_33
.Ltmp121:
.LBB7_16:
	.loc	8 142 9
	movq	%r14, %rdi
	callq	reflect.Value.IsValid
.Ltmp122:
	.loc	8 142 6 is_stmt 0
	testb	%al, %al
	je	.LBB7_25
.Ltmp123:
	.loc	8 147 8 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Bool
	.loc	8 147 3 is_stmt 0
	testb	$1, %al
	jne	.LBB7_22
.Ltmp124:
	.loc	8 0 3
	movq	32(%rbx), %rax
	movq	40(%rbx), %rbx
.Ltmp125:
	.loc	8 150 22 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_54
.Ltmp126:
	movq	(%rax), %rsi
	jmp	.LBB7_55
.Ltmp127:
.LBB7_20:
	.loc	8 0 22 is_stmt 0
	movq	32(%rbx), %rax
.Ltmp128:
	movq	40(%rbx), %rbx
.Ltmp129:
	.loc	8 117 22 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_27
.Ltmp130:
	movq	(%rax), %rsi
	jmp	.LBB7_28
.Ltmp131:
.LBB7_22:
	.loc	8 0 22 is_stmt 0
	movq	%r14, (%r15)
	jmp	.LBB7_49
.Ltmp132:
.LBB7_23:
	movq	(%rbx), %rbp
	movq	8(%rbx), %r13
.Ltmp133:
	.loc	8 129 13 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r12
.Ltmp134:
	movq	command_line_arguments.PkgLogger+8(%rip), %r14
.Ltmp135:
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp136:
	testq	%rbp, %rbp
	je	.LBB7_36
	movq	(%rbp), %rax
	jmp	.LBB7_37
.Ltmp137:
.LBB7_25:
	.loc	8 0 13 is_stmt 0
	movq	(%rbx), %rbp
	movq	8(%rbx), %r13
.Ltmp138:
	.loc	8 143 13 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r12
.Ltmp139:
	movq	command_line_arguments.PkgLogger+8(%rip), %r14
.Ltmp140:
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp141:
	testq	%rbp, %rbp
	je	.LBB7_41
	movq	(%rbp), %rax
	jmp	.LBB7_42
.Ltmp142:
.LBB7_27:
	.loc	8 0 13 is_stmt 0
	xorl	%esi, %esi
.Ltmp143:
.LBB7_28:
	.loc	8 117 22 is_stmt 1
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	496(%rsp), %rdi
	.loc	8 117 15 is_stmt 0
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	504(%rsp), %rax
.Ltmp144:
	.loc	8 118 10 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_30
.Ltmp145:
	.loc	8 117 15
	movq	512(%rsp), %rcx
	jmp	.LBB7_8
.Ltmp146:
.LBB7_30:
	movq	496(%rsp), %r12
.Ltmp147:
	.loc	3 11 12
	movq	%r14, 368(%rsp)
	movq	%r12, 376(%rsp)
	leaq	368(%rsp), %rax
.Ltmp148:
	movq	%rax, 232(%rsp)
	movq	$2, 240(%rsp)
	movq	$2, 248(%rsp)
	movq	248(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	232(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	callq	command_line_arguments.checkValues
.Ltmp149:
	.loc	3 11 35 is_stmt 0
	testq	%rax, %rax
	je	.LBB7_51
.Ltmp150:
	.loc	8 123 4 is_stmt 1
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rdx, 16(%r15)
	jmp	.LBB7_50
.Ltmp151:
.LBB7_32:
	.loc	8 0 4 is_stmt 0
	xorl	%esi, %esi
.Ltmp152:
.LBB7_33:
	.loc	8 136 22 is_stmt 1
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	472(%rsp), %rdi
	.loc	8 136 15 is_stmt 0
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	480(%rsp), %rax
.Ltmp153:
	.loc	8 137 10 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_35
.Ltmp154:
	.loc	8 136 15
	movq	488(%rsp), %rcx
	jmp	.LBB7_8
.Ltmp155:
.LBB7_35:
	movq	472(%rsp), %rax
.Ltmp156:
	.loc	8 0 15 is_stmt 0
	movq	%rax, (%r15)
	jmp	.LBB7_49
.Ltmp157:
.LBB7_36:
	xorl	%eax, %eax
.LBB7_37:
.Ltmp158:
	.loc	8 129 13 is_stmt 1
	movq	%rax, 336(%rsp)
	movq	%r13, 344(%rsp)
	leaq	336(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 160(%rsp)
	movq	$1, 168(%rsp)
	movq	$1, 176(%rsp)
	movq	176(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	160(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.192, %esi
	movl	$26, %edx
	movq	%r14, %rdi
	callq	*%r12
	.loc	8 130 4
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp159:
	.loc	8 130 26 is_stmt 0
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	$0, (%rax)
	leaq	632(%rsp), %rdi
	.loc	8 130 18
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	648(%rsp), %rax
	movq	%rax, 96(%rsp)
	movups	632(%rsp), %xmm0
	movaps	%xmm0, 80(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB7_39
.Ltmp160:
	.loc	8 0 18
	leaq	80(%rsp), %rdx
	jmp	.LBB7_44
.Ltmp161:
.LBB7_39:
	.loc	8 130 18
	testq	%rbx, %rbx
	je	.LBB7_65
.Ltmp162:
	movq	96(%rsp), %rax
	movq	%rax, 16(%rbx)
	movaps	80(%rsp), %xmm0
	jmp	.LBB7_47
.Ltmp163:
.LBB7_41:
	.loc	8 0 18
	xorl	%eax, %eax
.LBB7_42:
.Ltmp164:
	.loc	8 143 13 is_stmt 1
	movq	%rax, 320(%rsp)
	movq	%r13, 328(%rsp)
	leaq	320(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 184(%rsp)
	movq	$1, 192(%rsp)
	movq	$1, 200(%rsp)
	movq	200(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	184(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.192, %esi
	movl	$26, %edx
	movq	%r14, %rdi
	callq	*%r12
	.loc	8 144 4
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp165:
	.loc	8 144 26 is_stmt 0
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	$0, (%rax)
	leaq	608(%rsp), %rdi
	.loc	8 144 18
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	624(%rsp), %rax
	movq	%rax, 64(%rsp)
	movups	608(%rsp), %xmm0
	movaps	%xmm0, 48(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB7_45
.Ltmp166:
	.loc	8 0 18
	leaq	48(%rsp), %rdx
.Ltmp167:
.LBB7_44:
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB7_48
.Ltmp168:
.LBB7_45:
	.loc	8 144 18
	testq	%rbx, %rbx
	je	.LBB7_65
.Ltmp169:
	movq	64(%rsp), %rax
	movq	%rax, 16(%rbx)
	movaps	48(%rsp), %xmm0
.Ltmp170:
.LBB7_47:
	.loc	8 0 18
	movups	%xmm0, (%rbx)
.Ltmp171:
.LBB7_48:
	movq	%rbx, (%r15)
.Ltmp172:
.LBB7_49:
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r15)
.LBB7_50:
	movq	%r15, %rax
	addq	$728, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB7_51:
	.cfi_def_cfa_offset 784
.Ltmp173:
	.loc	3 14 6 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Type
.Ltmp174:
	movq	%rax, %rbx
	movq	%rdx, %r13
	.loc	3 14 18 is_stmt 0
	movq	%r14, %rdi
	callq	reflect.Value.Type
	movq	%rdx, %rcx
	.loc	3 14 14
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	runtime.ifaceeq
	cmpb	$1, %al
	jne	.LBB7_72
.Ltmp175:
	.loc	3 18 10 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Interface
	.loc	3 18 2 is_stmt 0
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	runtime.efacetype
	movq	%rax, %rbx
	.loc	3 19 2 is_stmt 1
	movl	$type...6.7uint8, %edi
	movq	%rax, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB7_58
.Ltmp176:
	.loc	3 0 2 is_stmt 0
	leaq	704(%rsp), %rdi
	.loc	3 20 21 is_stmt 1
	movq	%r14, %rsi
	callq	reflect.Value.Bytes
	movq	720(%rsp), %rax
	movq	%rax, 432(%rsp)
	movups	704(%rsp), %xmm0
	movaps	%xmm0, 416(%rsp)
	leaq	680(%rsp), %rdi
	.loc	3 20 32 is_stmt 0
	movq	%r12, %rsi
	callq	reflect.Value.Bytes
	movq	696(%rsp), %rax
	movq	%rax, 400(%rsp)
	movups	680(%rsp), %xmm0
	movaps	%xmm0, 384(%rsp)
	.loc	3 20 12
	movq	400(%rsp), %rax
	movq	%rax, 40(%rsp)
	movaps	384(%rsp), %xmm0
	movups	%xmm0, 24(%rsp)
	movq	432(%rsp), %rax
	movq	%rax, 16(%rsp)
	movaps	416(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	callq	bytes.Compare
	jmp	.LBB7_60
.Ltmp177:
.LBB7_54:
	.loc	3 0 12
	xorl	%esi, %esi
.Ltmp178:
.LBB7_55:
	.loc	8 150 22 is_stmt 1
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	448(%rsp), %rdi
	.loc	8 150 15 is_stmt 0
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	456(%rsp), %rax
.Ltmp179:
	.loc	8 151 10 is_stmt 1
	testq	%rax, %rax
	je	.LBB7_57
.Ltmp180:
	.loc	8 150 15
	movq	464(%rsp), %rcx
	jmp	.LBB7_8
.Ltmp181:
.LBB7_57:
	movq	448(%rsp), %rax
.Ltmp182:
	.loc	8 0 15 is_stmt 0
	movq	%rax, (%r15)
	jmp	.LBB7_49
.Ltmp183:
.LBB7_58:
	.loc	3 23 2 is_stmt 1
	movl	$string..d, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB7_79
.Ltmp184:
	.loc	3 24 23
	movq	%r14, %rdi
	callq	reflect.Value.String
	movq	%rax, %rbx
	movq	%rdx, %r14
.Ltmp185:
	.loc	3 24 35 is_stmt 0
	movq	%r12, %rdi
	callq	reflect.Value.String
	movq	%rdx, %rcx
	.loc	3 24 14
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	strings.Compare
.Ltmp186:
.LBB7_60:
	.loc	3 0 14
	movq	%rax, %rbx
	.loc	3 30 2 is_stmt 1
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %r12
.Ltmp187:
	.loc	3 30 24 is_stmt 0
	movl	$bool..d, %edi
	callq	runtime.newobject
	.loc	3 0 0
	testq	%rbx, %rbx
	.loc	3 30 24
	sete	(%rax)
	leaq	656(%rsp), %rdi
	.loc	3 30 16
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	672(%rsp), %rax
	movq	%rax, 128(%rsp)
	movups	656(%rsp), %xmm0
	movaps	%xmm0, 112(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB7_62
.Ltmp188:
	.loc	3 0 16
	leaq	112(%rsp), %rdx
	.loc	3 30 16
	movl	$reflect.Value..d, %edi
	movq	%r12, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB7_64
.Ltmp189:
.LBB7_62:
	testq	%r12, %r12
	je	.LBB7_65
.Ltmp190:
	movq	128(%rsp), %rax
	movq	%rax, 16(%r12)
	movaps	112(%rsp), %xmm0
	movups	%xmm0, (%r12)
.Ltmp191:
.LBB7_64:
	.loc	8 125 38 is_stmt 1
	movq	%r12, %rdi
	callq	reflect.Value.Bool
	movl	%eax, %ebp
	.loc	8 125 12 is_stmt 0
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r13
	movq	command_line_arguments.PkgLogger+8(%rip), %r14
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movl	$bool..d, %edi
	callq	runtime.newobject
	movb	%bpl, (%rax)
	movq	$bool..d, 352(%rsp)
	movq	%rax, 360(%rsp)
	leaq	352(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 136(%rsp)
	movq	$1, 144(%rsp)
	movq	$1, 152(%rsp)
	movq	152(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	136(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.190, %esi
	movl	$12, %edx
	movq	%r14, %rdi
	callq	*%r13
	.loc	8 126 3 is_stmt 1
	movq	%r12, (%r15)
	jmp	.LBB7_49
.Ltmp192:
.LBB7_65:
	.loc	8 0 3 is_stmt 0
	movl	$6, %edi
	callq	__go_runtime_error
.LBB7_66:
.Ltmp193:
	.loc	8 156 52 is_stmt 1
	movl	$go_token.Token..d, %edi
	callq	runtime.newobject
.Ltmp194:
	movq	%rbp, (%rax)
	.loc	8 156 44 is_stmt 0
	movl	$go_token.Token..d, %edi
	movq	%rax, %rsi
	callq	reflect.TypeOf
	testq	%rax, %rax
	jne	.LBB7_68
.Ltmp195:
	.loc	8 0 44
	xorl	%eax, %eax
	jmp	.LBB7_69
.Ltmp196:
.LBB7_68:
	.loc	8 156 44
	movq	(%rax), %rax
.Ltmp197:
.LBB7_69:
	.loc	8 156 13
	movq	%rax, 304(%rsp)
	movq	%rdx, 312(%rsp)
	leaq	304(%rsp), %rax
	movq	%rax, 208(%rsp)
	movq	$1, 216(%rsp)
	movq	$1, 224(%rsp)
	movq	224(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	208(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.194, %edi
	movl	$11, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB7_71
.Ltmp198:
.LBB7_70:
	.loc	8 0 13
	xorl	%edi, %edi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.LBB7_71:
.Ltmp199:
	.loc	8 156 13
	movq	(%rax), %rdi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp200:
.LBB7_72:
	.loc	3 15 65 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Type
	movq	%rax, %rbx
	movq	%rdx, %r14
.Ltmp201:
	.loc	3 15 75 is_stmt 0
	movq	%r12, %rdi
	callq	reflect.Value.Type
	.loc	3 15 65
	testq	%rbx, %rbx
	jne	.LBB7_74
.Ltmp202:
	.loc	3 0 65
	xorl	%ecx, %ecx
	.loc	3 15 75
	testq	%rax, %rax
	jne	.LBB7_76
.Ltmp203:
.LBB7_75:
	.loc	3 0 75
	xorl	%eax, %eax
	jmp	.LBB7_77
.LBB7_74:
.Ltmp204:
	.loc	3 15 65
	movq	(%rbx), %rcx
	.loc	3 15 75
	testq	%rax, %rax
	je	.LBB7_75
.Ltmp205:
.LBB7_76:
	movq	(%rax), %rax
.Ltmp206:
.LBB7_77:
	.loc	3 15 13
	movq	%rcx, 576(%rsp)
	movq	%r14, 584(%rsp)
	movq	%rax, 592(%rsp)
	movq	%rdx, 600(%rsp)
	leaq	576(%rsp), %rax
	movq	%rax, 256(%rsp)
	movq	$2, 264(%rsp)
	movq	$2, 272(%rsp)
	movq	272(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	256(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.0, %edi
	movl	$40, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	je	.LBB7_70
	movq	(%rax), %rdi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.LBB7_79:
.Ltmp207:
	.loc	3 28 51 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Type
	testq	%rax, %rax
	jne	.LBB7_81
.Ltmp208:
	.loc	3 0 51 is_stmt 0
	xorl	%eax, %eax
	jmp	.LBB7_82
.Ltmp209:
.LBB7_81:
	.loc	3 28 51
	movq	(%rax), %rax
.Ltmp210:
.LBB7_82:
	.loc	3 28 13
	movq	$type...1reflect.Value, 544(%rsp)
	movq	%r14, 552(%rsp)
	movq	%rax, 560(%rsp)
	movq	%rdx, 568(%rsp)
	leaq	544(%rsp), %rax
	movq	%rax, 280(%rsp)
	movq	$2, 288(%rsp)
	movq	$2, 296(%rsp)
	movq	296(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	280(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.7, %edi
	movl	$22, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	je	.LBB7_70
.Ltmp211:
	movq	(%rax), %rdi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp212:
.Lfunc_end7:
	.size	command_line_arguments.Context.evalBinaryExpr, .Lfunc_end7-command_line_arguments.Context.evalBinaryExpr
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalBlockStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalBlockStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalBlockStmt,@function
command_line_arguments.Context.evalBlockStmt:
.Lfunc_begin8:
	.loc	7 80 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB8_2
	movq	%r10, %rax
	movabsq	$216, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB8_2:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r12
	movq	%rsi, %rbp
	movq	%rdi, 24(%rsp)
.Ltmp213:
	.loc	7 81 11 prologue_end
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r14
	movq	command_line_arguments.PkgLogger+8(%rip), %r15
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movq	$type...1go_ast.BlockStmt, 96(%rsp)
	movq	%r12, 104(%rsp)
	leaq	96(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 48(%rsp)
	movq	$1, 56(%rsp)
	movq	$1, 64(%rsp)
	movq	64(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	48(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.219, %esi
	movl	$19, %edx
	movq	%r15, %rdi
	callq	*%r14
.Ltmp214:
	.loc	7 82 24
	testq	%r12, %r12
	je	.LBB8_19
.Ltmp215:
	.loc	7 0 24 is_stmt 0
	movq	16(%r12), %rax
	movq	%rax, 40(%rsp)
	.loc	7 82 2
	testq	%rax, %rax
	jle	.LBB8_18
.Ltmp216:
	.loc	7 0 2
	movq	8(%r12), %r12
.Ltmp217:
	addq	$8, %r12
	xorl	%r15d, %r15d
	movq	%rbp, 32(%rsp)
.Ltmp218:
	.p2align	4, 0x90
.LBB8_6:
	.loc	7 82 2
	movq	-8(%r12), %rax
.Ltmp219:
	movq	(%r12), %rbx
.Ltmp220:
	.loc	7 83 20 is_stmt 1
	testq	%rax, %rax
	je	.LBB8_7
.Ltmp221:
	movq	(%rax), %rsi
	jmp	.LBB8_8
.Ltmp222:
	.p2align	4, 0x90
.LBB8_7:
	.loc	7 0 20 is_stmt 0
	xorl	%esi, %esi
.Ltmp223:
.LBB8_8:
	.loc	7 83 20
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
.Ltmp224:
	.loc	7 83 14
	leaq	112(%rsp), %rdi
	movq	%rbp, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	120(%rsp), %rdx
.Ltmp225:
	.loc	7 84 10 is_stmt 1
	testq	%rdx, %rdx
	jne	.LBB8_9
.Ltmp226:
	.loc	7 0 10 is_stmt 0
	movq	112(%rsp), %rbx
.Ltmp227:
	.loc	7 87 12 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r13
	movq	command_line_arguments.PkgLogger+8(%rip), %rbp
.Ltmp228:
	movl	$type...62x.7interface.4.5, %edi
	callq	runtime.newobject
.Ltmp229:
	movq	%rax, %r14
	movl	$int..d, %edi
	callq	runtime.newobject
	movq	%r15, (%rax)
	movq	$int..d, 136(%rsp)
	movq	%rax, 144(%rsp)
	movq	$type...1reflect.Value, 152(%rsp)
	movq	%rbx, 160(%rsp)
	movl	$type...62x.7interface.4.5, %edi
	movq	%r14, %rsi
	leaq	136(%rsp), %rdx
	callq	runtime.typedmemmove
	movq	%r14, 72(%rsp)
	movq	$2, 80(%rsp)
	movq	$2, 88(%rsp)
	movq	88(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	72(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.222, %esi
	movl	$15, %edx
	movq	%rbp, %rdi
	callq	*%r13
	movq	32(%rsp), %rbp
	testq	%rbp, %rbp
	je	.LBB8_19
.Ltmp230:
	.loc	7 88 3
	testb	$1, 16(%rbp)
	jne	.LBB8_12
.Ltmp231:
	.loc	7 82 2
	addq	$1, %r15
.Ltmp232:
	addq	$16, %r12
	cmpq	40(%rsp), %r15
	jl	.LBB8_6
.Ltmp233:
.LBB8_18:
	.loc	7 0 2 is_stmt 0
	movq	24(%rsp), %rax
	.loc	7 93 2 is_stmt 1
	movq	$command_line_arguments.Nil, (%rax)
	jmp	.LBB8_15
.LBB8_9:
.Ltmp234:
	.loc	7 83 14
	movq	128(%rsp), %rcx
	movq	24(%rsp), %rax
	.loc	7 85 4
	movq	$0, (%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, 16(%rax)
	jmp	.LBB8_16
.Ltmp235:
.LBB8_12:
	.loc	7 89 5
	addq	$24, %rbp
	.loc	7 89 18 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB8_17
.Ltmp236:
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	callq	runtime.writebarrierptr
	jmp	.LBB8_14
.Ltmp237:
.LBB8_17:
	movq	%rbx, (%rbp)
.Ltmp238:
.LBB8_14:
	.loc	7 0 18
	movq	24(%rsp), %rax
	.loc	7 90 4 is_stmt 1
	movq	%rbx, (%rax)
.Ltmp239:
.LBB8_15:
	.loc	7 0 4 is_stmt 0
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rax)
.LBB8_16:
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB8_19:
	.cfi_def_cfa_offset 224
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end8:
	.size	command_line_arguments.Context.evalBlockStmt, .Lfunc_end8-command_line_arguments.Context.evalBlockStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalCallExpr,"ax",@progbits
	.globl	command_line_arguments.Context.evalCallExpr
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalCallExpr,@function
command_line_arguments.Context.evalCallExpr:
.Lfunc_begin9:
	.loc	8 46 0 is_stmt 1
	.cfi_startproc
	leaq	-504(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB9_2
	movq	%r10, %rax
	movabsq	$504, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB9_2:
.Ltmp240:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$456, %rsp
	.cfi_def_cfa_offset 512
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	.loc	8 47 21 prologue_end
	testq	%rdx, %rdx
	je	.LBB9_39
.Ltmp241:
	.loc	8 0 21 is_stmt 0
	movq	%rdx, %rbp
.Ltmp242:
	movq	%rsi, %r15
.Ltmp243:
	movq	%rdi, %rbx
	movq	(%rdx), %rax
	movq	8(%rdx), %r14
	.loc	8 47 21
	testq	%rax, %rax
	je	.LBB9_4
.Ltmp244:
	movq	(%rax), %rsi
	jmp	.LBB9_5
.Ltmp245:
.LBB9_4:
	.loc	8 0 21
	xorl	%esi, %esi
.Ltmp246:
.LBB9_5:
	.loc	8 47 21
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	360(%rsp), %rdi
	.loc	8 47 14
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	command_line_arguments.Context.Eval
	movq	368(%rsp), %rax
.Ltmp247:
	.loc	8 48 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB9_7
.Ltmp248:
	.loc	8 47 14
	movq	376(%rsp), %rcx
.Ltmp249:
	.loc	8 49 3
	movq	$0, (%rbx)
	movq	%rax, 8(%rbx)
	movq	%rcx, 16(%rbx)
	movq	%rbx, %rax
.Ltmp250:
	.loc	8 0 3 is_stmt 0
	jmp	.LBB9_36
.Ltmp251:
.LBB9_7:
	movq	%rbx, 40(%rsp)
	movq	360(%rsp), %r13
.Ltmp252:
	.loc	8 51 11 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
.Ltmp253:
	movq	8(%rax), %r14
	movq	command_line_arguments.PkgLogger+8(%rip), %r12
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movq	$type...1reflect.Value, 272(%rsp)
	movq	%r13, 112(%rsp)
.Ltmp254:
	movq	%r13, 280(%rsp)
	leaq	272(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 184(%rsp)
	movq	$1, 192(%rsp)
	movq	$1, 200(%rsp)
	movq	200(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	184(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.151, %esi
	movl	$17, %edx
	movq	%r12, %rdi
	callq	*%r14
	leaq	32(%rsp), %rax
	movq	%rax, 80(%rsp)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 88(%rsp)
	movq	32(%rbp), %r13
.Ltmp255:
	.loc	8 53 2
	testq	%r13, %r13
	jle	.LBB9_27
.Ltmp256:
	.loc	8 0 2 is_stmt 0
	movq	24(%rbp), %rbp
.Ltmp257:
	addq	$8, %rbp
	xorl	%r14d, %r14d
	leaq	336(%rsp), %r12
.Ltmp258:
	.p2align	4, 0x90
.LBB9_9:
	.loc	8 53 2
	movq	-8(%rbp), %rax
.Ltmp259:
	movq	(%rbp), %rbx
.Ltmp260:
	.loc	8 54 20 is_stmt 1
	testq	%rax, %rax
	je	.LBB9_10
.Ltmp261:
	movq	(%rax), %rsi
	jmp	.LBB9_11
.Ltmp262:
	.p2align	4, 0x90
.LBB9_10:
	.loc	8 0 20 is_stmt 0
	xorl	%esi, %esi
.Ltmp263:
.LBB9_11:
	.loc	8 54 20
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	.loc	8 54 14
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	344(%rsp), %rdx
.Ltmp264:
	.loc	8 55 10 is_stmt 1
	testq	%rdx, %rdx
	jne	.LBB9_12
.Ltmp265:
	.loc	8 0 10 is_stmt 0
	movq	336(%rsp), %rax
.Ltmp266:
	movups	80(%rsp), %xmm0
	movaps	%xmm0, 48(%rsp)
	movq	96(%rsp), %rcx
	movq	%rcx, 64(%rsp)
	.loc	8 58 23 is_stmt 1
	testq	%rax, %rax
	je	.LBB9_39
.Ltmp267:
	.loc	8 0 23 is_stmt 0
	movq	56(%rsp), %rbx
	movq	16(%rax), %rcx
	movq	%rcx, 176(%rsp)
	movups	(%rax), %xmm0
	movaps	%xmm0, 160(%rsp)
	.loc	8 58 10
	leaq	1(%rbx), %rdx
.Ltmp268:
	movq	64(%rsp), %rax
.Ltmp269:
	cmpq	%rax, %rdx
	jbe	.LBB9_19
.Ltmp270:
	movq	64(%rsp), %rax
	movq	%rax, 16(%rsp)
	movaps	48(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$reflect.Value..d, %esi
	leaq	312(%rsp), %rdi
	callq	runtime.growslice
	movq	312(%rsp), %rcx
	movq	320(%rsp), %rdx
	movq	328(%rsp), %rax
	jmp	.LBB9_16
.Ltmp271:
	.p2align	4, 0x90
.LBB9_19:
	cmpq	%rax, %rdx
	jg	.LBB9_42
.Ltmp272:
	.loc	8 0 10
	movq	%rax, %rcx
	orq	%rdx, %rcx
	js	.LBB9_42
.Ltmp273:
	.loc	8 58 10
	movq	48(%rsp), %rcx
.Ltmp274:
.LBB9_16:
	movq	%rcx, 48(%rsp)
	movq	%rdx, 56(%rsp)
	movq	%rax, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB9_18
.Ltmp275:
	.loc	8 0 10
	cmpq	%rdx, %rbx
	jge	.LBB9_18
.Ltmp276:
	.loc	8 58 10
	leaq	(%rbx,%rbx,2), %rax
	leaq	(%rcx,%rax,8), %rsi
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB9_23
.Ltmp277:
	movl	$reflect.Value..d, %edi
	leaq	160(%rsp), %rdx
	callq	runtime.typedmemmove
	jmp	.LBB9_26
.Ltmp278:
	.p2align	4, 0x90
.LBB9_23:
	testq	%rsi, %rsi
	je	.LBB9_39
.Ltmp279:
	movq	176(%rsp), %rax
	movq	%rax, 16(%rsi)
	movaps	160(%rsp), %xmm0
	movups	%xmm0, (%rsi)
.Ltmp280:
.LBB9_26:
	.loc	8 58 8
	movq	64(%rsp), %rax
	movq	%rax, 96(%rsp)
	movaps	48(%rsp), %xmm0
	movaps	%xmm0, 80(%rsp)
.Ltmp281:
	.loc	8 53 2 is_stmt 1
	addq	$1, %r14
	addq	$16, %rbp
	cmpq	%r13, %r14
	jl	.LBB9_9
.Ltmp282:
.LBB9_27:
	.loc	8 0 2 is_stmt 0
	movq	112(%rsp), %rbp
.Ltmp283:
	.loc	8 60 12 is_stmt 1
	movq	%rbp, 120(%rsp)
	leaq	120(%rsp), %rax
	movq	%rax, 208(%rsp)
	movq	$1, 216(%rsp)
	movq	$1, 224(%rsp)
	movq	224(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	208(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	callq	command_line_arguments.checkValues
	.loc	8 60 33 is_stmt 0
	testq	%rax, %rax
	je	.LBB9_29
.Ltmp284:
	.loc	8 0 33
	movq	%rax, %rbx
.Ltmp285:
	movq	%rdx, %r14
.Ltmp286:
	.loc	8 61 12 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	command_line_arguments.PkgLogger+8(%rip), %rdi
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rsp)
	movq	$0, 16(%rsp)
	movl	$.Lconst.155, %esi
	movl	$35, %edx
	callq	*8(%rax)
	movq	40(%rsp), %rax
	.loc	8 62 3
	movq	$0, (%rax)
	movq	%rbx, 8(%rax)
	movq	%r14, 16(%rax)
	jmp	.LBB9_36
.Ltmp287:
.LBB9_12:
	.loc	8 54 14
	movq	352(%rsp), %rcx
.Ltmp288:
	.loc	8 0 14 is_stmt 0
	movq	40(%rsp), %rax
	.loc	8 56 4 is_stmt 1
	movq	$0, (%rax)
	movq	%rdx, 8(%rax)
	movq	%rcx, 16(%rax)
	jmp	.LBB9_36
.Ltmp289:
.LBB9_29:
	.loc	8 64 13
	movq	96(%rsp), %rax
	movq	%rax, 16(%rsp)
	movaps	80(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	leaq	432(%rsp), %rdi
.Ltmp290:
	movq	%rbp, %rsi
	callq	reflect.Value.Call
	movq	440(%rsp), %rax
.Ltmp291:
	.loc	8 65 16
	testq	%rax, %rax
	je	.LBB9_30
.Ltmp292:
	.loc	8 0 16 is_stmt 0
	jle	.LBB9_18
.Ltmp293:
	movq	432(%rsp), %r14
.Ltmp294:
	movq	16(%r14), %rax
	movq	%rax, 304(%rsp)
	movups	(%r14), %xmm0
	movaps	%xmm0, 288(%rsp)
	.loc	8 69 11 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r12
	movq	command_line_arguments.PkgLogger+8(%rip), %r15
.Ltmp295:
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movaps	288(%rsp), %xmm0
	movaps	%xmm0, 384(%rsp)
	movq	304(%rsp), %rax
	movq	%rax, 400(%rsp)
	leaq	384(%rsp), %rdx
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	$reflect.Value..d, 256(%rsp)
	movq	%rbx, 264(%rsp)
	leaq	256(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbp, %rsi
	callq	runtime.typedmemmove
	movq	%rbp, 232(%rsp)
	movq	$1, 240(%rsp)
	movq	$1, 248(%rsp)
	movq	248(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	232(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.157, %esi
	movl	$25, %edx
	movq	%r15, %rdi
	callq	*%r12
.Ltmp296:
	.loc	8 0 11 is_stmt 0
	movq	40(%rsp), %rax
	.loc	8 70 2 is_stmt 1
	movq	%r14, (%rax)
	jmp	.LBB9_35
.Ltmp297:
.LBB9_30:
	.loc	8 66 3
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
.Ltmp298:
	movq	%rax, %rbx
.Ltmp299:
	.loc	8 66 25 is_stmt 0
	movl	$int..d, %edi
	callq	runtime.newobject
	movq	$0, (%rax)
	leaq	408(%rsp), %rdi
	.loc	8 66 17
	movl	$int..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	424(%rsp), %rax
	movq	%rax, 144(%rsp)
	movups	408(%rsp), %xmm0
	movaps	%xmm0, 128(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB9_31
.Ltmp300:
	.loc	8 0 17
	leaq	128(%rsp), %rdx
	.loc	8 66 17
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	40(%rsp), %rax
	jmp	.LBB9_34
.Ltmp301:
.LBB9_31:
	testq	%rbx, %rbx
	movq	40(%rsp), %rax
	je	.LBB9_39
.Ltmp302:
	movq	144(%rsp), %rcx
	movq	%rcx, 16(%rbx)
	movaps	128(%rsp), %xmm0
	movups	%xmm0, (%rbx)
.Ltmp303:
.LBB9_34:
	.loc	8 67 3 is_stmt 1
	movq	%rbx, (%rax)
.Ltmp304:
.LBB9_35:
	.loc	8 0 3 is_stmt 0
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rax)
.Ltmp305:
.LBB9_36:
	addq	$456, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB9_18:
	.cfi_def_cfa_offset 512
.Ltmp306:
	xorl	%edi, %edi
	callq	__go_runtime_error
.Ltmp307:
.LBB9_39:
	movl	$6, %edi
	callq	__go_runtime_error
.LBB9_42:
.Ltmp308:
	.loc	8 58 10 is_stmt 1
	movl	$3, %edi
	callq	__go_runtime_error
.Ltmp309:
.Lfunc_end9:
	.size	command_line_arguments.Context.evalCallExpr, .Lfunc_end9-command_line_arguments.Context.evalCallExpr
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalDecl,"ax",@progbits
	.globl	command_line_arguments.Context.evalDecl
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalDecl,@function
command_line_arguments.Context.evalDecl:
.Lfunc_begin10:
	.file	9 "./decl.go"
	.loc	9 9 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB10_2
	movq	%r10, %rax
	movabsq	$104, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB10_2:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$72, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
.Ltmp310:
	movq	%rcx, %r14
	movq	%rdx, %r12
	movq	%rdi, %r15
.Ltmp311:
	.loc	9 10 2 prologue_end
	movq	%rdx, %rdi
	movq	%rcx, %rsi
.Ltmp312:
	callq	runtime.ifacetype
	movq	%rax, %rbx
	.loc	9 11 2
	movl	$type...1go_ast.FuncDecl, %edi
	movq	%rax, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB10_10
.Ltmp313:
	.loc	9 10 9
	testq	%r12, %r12
	je	.LBB10_4
.Ltmp314:
	movq	(%r12), %rsi
	jmp	.LBB10_5
.Ltmp315:
.LBB10_10:
	.loc	9 13 2
	movl	$type...1go_ast.GenDecl, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB10_11
.Ltmp316:
	.loc	9 0 0 is_stmt 0
	testq	%r12, %r12
	je	.LBB10_9
.Ltmp317:
	.loc	9 10 9 is_stmt 1
	movq	(%r12), %rsi
	.loc	9 13 2
	movl	$type...1go_ast.GenDecl, %edi
	jmp	.LBB10_6
.Ltmp318:
.LBB10_4:
	.loc	9 0 2 is_stmt 0
	xorl	%esi, %esi
.Ltmp319:
.LBB10_5:
	.loc	9 11 2 is_stmt 1
	movl	$type...1go_ast.FuncDecl, %edi
.Ltmp320:
.LBB10_6:
	.loc	9 0 2 is_stmt 0
	movl	$go_ast.Decl..d, %edx
	callq	runtime.assertI2T
.Ltmp321:
	movq	$command_line_arguments.False, (%r15)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r15)
	movq	%r15, %rax
	addq	$72, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
.Ltmp322:
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp323:
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB10_9:
	.cfi_def_cfa_offset 112
.Ltmp324:
	xorl	%esi, %esi
.Ltmp325:
	.loc	9 13 2 is_stmt 1
	movl	$type...1go_ast.GenDecl, %edi
	jmp	.LBB10_6
.Ltmp326:
.LBB10_11:
	.loc	9 0 0 is_stmt 0
	testq	%r12, %r12
	jne	.LBB10_19
.Ltmp327:
	xorl	%edi, %edi
	jmp	.LBB10_13
.Ltmp328:
.LBB10_19:
	.loc	9 16 70 is_stmt 1
	movq	(%r12), %rdi
.Ltmp329:
.LBB10_13:
	.loc	9 16 63 is_stmt 0
	movq	%r14, %rsi
	callq	reflect.TypeOf
	testq	%rax, %rax
	jne	.LBB10_20
.Ltmp330:
	.loc	9 0 63
	xorl	%eax, %eax
	jmp	.LBB10_15
.Ltmp331:
.LBB10_20:
	.loc	9 16 63
	movq	(%rax), %rax
.Ltmp332:
.LBB10_15:
	.loc	9 16 13
	movq	%rax, 56(%rsp)
	movq	%rdx, 64(%rsp)
	leaq	56(%rsp), %rax
	movq	%rax, 32(%rsp)
	movq	$1, 40(%rsp)
	movq	$1, 48(%rsp)
	movq	48(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	32(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.121, %edi
	movl	$30, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB10_21
.Ltmp333:
	.loc	9 0 13
	xorl	%edi, %edi
	.loc	9 16 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp334:
.LBB10_21:
	.loc	9 16 13
	movq	(%rax), %rdi
	.loc	9 16 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp335:
.Lfunc_end10:
	.size	command_line_arguments.Context.evalDecl, .Lfunc_end10-command_line_arguments.Context.evalDecl
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalExpr,"ax",@progbits
	.globl	command_line_arguments.Context.evalExpr
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalExpr,@function
command_line_arguments.Context.evalExpr:
.Lfunc_begin11:
	.loc	8 11 0 is_stmt 1
	.cfi_startproc
	leaq	-488(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB11_2
	movq	%r10, %rax
	movabsq	$488, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB11_2:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$448, %rsp
	.cfi_def_cfa_offset 496
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
.Ltmp336:
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	%rsi, %r15
	movq	%rdi, %r14
.Ltmp337:
	.loc	8 12 2 prologue_end
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	callq	runtime.ifacetype
	movq	%rax, %rbx
	.loc	8 13 2
	movl	$type...1go_ast.BinaryExpr, %edi
	movq	%rax, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_5
.Ltmp338:
	.loc	8 12 9
	testq	%r13, %r13
	je	.LBB11_8
.Ltmp339:
	movq	(%r13), %rsi
	jmp	.LBB11_9
.Ltmp340:
.LBB11_5:
	.loc	8 15 2
	movl	$type...1go_ast.UnaryExpr, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_10
.Ltmp341:
	.loc	8 12 9
	testq	%r13, %r13
	je	.LBB11_13
.Ltmp342:
	movq	(%r13), %rsi
	jmp	.LBB11_14
.Ltmp343:
.LBB11_8:
	.loc	8 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp344:
.LBB11_9:
	.loc	8 13 2 is_stmt 1
	movl	$type...1go_ast.BinaryExpr, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
.Ltmp345:
	.loc	8 0 2 is_stmt 0
	leaq	424(%rsp), %rdi
.Ltmp346:
	.loc	8 14 11 is_stmt 1
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	command_line_arguments.Context.evalBinaryExpr
	movq	424(%rsp), %rax
	.loc	8 14 3 is_stmt 0
	movq	%rax, (%r14)
	movups	432(%rsp), %xmm0
	jmp	.LBB11_46
.Ltmp347:
.LBB11_10:
	.loc	8 17 2 is_stmt 1
	movl	$type...1go_ast.CallExpr, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_15
.Ltmp348:
	.loc	8 12 9
	testq	%r13, %r13
	je	.LBB11_18
.Ltmp349:
	movq	(%r13), %rsi
	jmp	.LBB11_19
.Ltmp350:
.LBB11_13:
	.loc	8 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp351:
.LBB11_14:
	.loc	8 15 2 is_stmt 1
	movl	$type...1go_ast.UnaryExpr, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
.Ltmp352:
	.loc	8 0 2 is_stmt 0
	leaq	400(%rsp), %rdi
.Ltmp353:
	.loc	8 16 11 is_stmt 1
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	command_line_arguments.Context.evalUnaryExpr
	movq	400(%rsp), %rax
	.loc	8 16 3 is_stmt 0
	movq	%rax, (%r14)
	movups	408(%rsp), %xmm0
	jmp	.LBB11_46
.Ltmp354:
.LBB11_15:
	.loc	8 19 2 is_stmt 1
	movl	$type...1go_ast.SelectorExpr, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_20
.Ltmp355:
	.loc	8 12 9
	testq	%r13, %r13
	je	.LBB11_23
.Ltmp356:
	movq	(%r13), %rsi
	jmp	.LBB11_24
.Ltmp357:
.LBB11_18:
	.loc	8 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp358:
.LBB11_19:
	.loc	8 17 2 is_stmt 1
	movl	$type...1go_ast.CallExpr, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
.Ltmp359:
	.loc	8 0 2 is_stmt 0
	leaq	376(%rsp), %rdi
.Ltmp360:
	.loc	8 18 11 is_stmt 1
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	command_line_arguments.Context.evalCallExpr
	movq	376(%rsp), %rax
	.loc	8 18 3 is_stmt 0
	movq	%rax, (%r14)
	movups	384(%rsp), %xmm0
	jmp	.LBB11_46
.Ltmp361:
.LBB11_20:
	.loc	8 21 2 is_stmt 1
	movl	$type...1go_ast.Ident, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_25
.Ltmp362:
	.loc	8 12 9
	testq	%r13, %r13
	je	.LBB11_28
.Ltmp363:
	movq	(%r13), %rsi
	jmp	.LBB11_29
.Ltmp364:
.LBB11_23:
	.loc	8 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp365:
.LBB11_24:
	.loc	8 19 2 is_stmt 1
	movl	$type...1go_ast.SelectorExpr, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
.Ltmp366:
	.loc	8 0 2 is_stmt 0
	leaq	352(%rsp), %rdi
.Ltmp367:
	.loc	8 20 11 is_stmt 1
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	command_line_arguments.Context.evalSelectorExpr
	movq	352(%rsp), %rax
	.loc	8 20 3 is_stmt 0
	movq	%rax, (%r14)
	movups	360(%rsp), %xmm0
	jmp	.LBB11_46
.Ltmp368:
.LBB11_25:
	.loc	8 23 2 is_stmt 1
	movl	$type...1go_ast.BasicLit, %edi
	movq	%rbx, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB11_48
.Ltmp369:
	.loc	8 0 0 is_stmt 0
	testq	%r13, %r13
	je	.LBB11_30
.Ltmp370:
	.loc	8 12 9 is_stmt 1
	movq	(%r13), %rsi
	jmp	.LBB11_31
.Ltmp371:
.LBB11_28:
	.loc	8 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp372:
.LBB11_29:
	.loc	8 21 2 is_stmt 1
	movl	$type...1go_ast.Ident, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
	leaq	328(%rsp), %rdi
.Ltmp373:
	.loc	8 22 11
	movl	$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.2.go_ast.exprNode.0func.8.9.8.9.5..go_ast.Ident, %edx
	movq	%r15, %rsi
	movq	%r12, %rcx
	callq	command_line_arguments.Context.evalIdent
	movq	328(%rsp), %rax
	.loc	8 22 3 is_stmt 0
	movq	%rax, (%r14)
	movups	336(%rsp), %xmm0
	jmp	.LBB11_46
.Ltmp374:
.LBB11_30:
	.loc	8 0 3
	xorl	%esi, %esi
.Ltmp375:
.LBB11_31:
	.loc	8 23 2 is_stmt 1
	movl	$type...1go_ast.BasicLit, %edi
	movl	$go_ast.Expr..d, %edx
	callq	runtime.assertI2T
	.loc	8 24 11
	testq	%r12, %r12
	je	.LBB11_47
.Ltmp376:
	movq	8(%r12), %rbx
	cmpq	$9, %rbx
	je	.LBB11_36
.Ltmp377:
	.loc	8 0 11 is_stmt 0
	cmpq	$5, %rbx
	jne	.LBB11_50
.Ltmp378:
	.loc	8 26 4 is_stmt 1
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %r15
.Ltmp379:
	.loc	8 0 4 is_stmt 0
	movups	16(%r12), %xmm0
	movaps	%xmm0, 224(%rsp)
	.loc	8 26 26
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movaps	224(%rsp), %xmm0
	movaps	%xmm0, 208(%rsp)
	leaq	208(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	leaq	304(%rsp), %rdi
	.loc	8 26 17
	movl	$string..d, %esi
	movq	%rbx, %rdx
	callq	reflect.ValueOf
	movq	320(%rsp), %rax
	movq	%rax, 80(%rsp)
	movups	304(%rsp), %xmm0
	movaps	%xmm0, 64(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB11_40
.Ltmp380:
	.loc	8 0 17
	leaq	64(%rsp), %rdx
	jmp	.LBB11_39
.Ltmp381:
.LBB11_36:
	.loc	8 32 22 is_stmt 1
	movq	16(%r12), %rsi
	movq	24(%r12), %rdx
	leaq	272(%rsp), %rdi
.Ltmp382:
	callq	strconv.Unquote
.Ltmp383:
	movq	288(%rsp), %rax
.Ltmp384:
	movq	296(%rsp), %rsi
	movups	272(%rsp), %xmm0
	movaps	%xmm0, 192(%rsp)
	.loc	8 33 11
	testq	%rax, %rax
	jne	.LBB11_52
.Ltmp385:
	.loc	8 36 4
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
.Ltmp386:
	movq	%rax, %r15
.Ltmp387:
	.loc	8 36 25 is_stmt 0
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movaps	192(%rsp), %xmm0
	movaps	%xmm0, 176(%rsp)
	leaq	176(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	leaq	248(%rsp), %rdi
	.loc	8 36 17
	movl	$string..d, %esi
	movq	%rbx, %rdx
	callq	reflect.ValueOf
	movq	264(%rsp), %rax
	movq	%rax, 48(%rsp)
	movups	248(%rsp), %xmm0
	movaps	%xmm0, 32(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB11_42
.Ltmp388:
	.loc	8 0 17
	leaq	32(%rsp), %rdx
.Ltmp389:
.LBB11_39:
	movl	$reflect.Value..d, %edi
	movq	%r15, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB11_45
.Ltmp390:
.LBB11_40:
	.loc	8 26 17 is_stmt 1
	testq	%r15, %r15
	je	.LBB11_47
.Ltmp391:
	movq	80(%rsp), %rax
	movq	%rax, 16(%r15)
	movaps	64(%rsp), %xmm0
	jmp	.LBB11_44
.Ltmp392:
.LBB11_42:
	.loc	8 36 17
	testq	%r15, %r15
	je	.LBB11_47
.Ltmp393:
	movq	48(%rsp), %rax
	movq	%rax, 16(%r15)
	movaps	32(%rsp), %xmm0
.Ltmp394:
.LBB11_44:
	.loc	8 0 17 is_stmt 0
	movups	%xmm0, (%r15)
.Ltmp395:
.LBB11_45:
	movq	%r15, (%r14)
	xorps	%xmm0, %xmm0
.Ltmp396:
.LBB11_46:
	movups	%xmm0, 8(%r14)
	movq	%r14, %rax
	addq	$448, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
.Ltmp397:
	.cfi_def_cfa_offset 32
	popq	%r13
.Ltmp398:
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB11_47:
	.cfi_def_cfa_offset 496
.Ltmp399:
	movl	$6, %edi
	callq	__go_runtime_error
.Ltmp400:
.LBB11_48:
	testq	%r13, %r13
	jne	.LBB11_53
.Ltmp401:
	xorl	%edi, %edi
	jmp	.LBB11_54
.Ltmp402:
.LBB11_50:
	.loc	8 39 14 is_stmt 1
	movl	$go_token.Token..d, %edi
	callq	runtime.newobject
	movq	%rbx, (%rax)
	movq	$go_token.Token..d, 160(%rsp)
	movq	%rax, 168(%rsp)
	leaq	160(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	$1, 112(%rsp)
	movq	112(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	96(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.147, %edi
	movl	$28, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	je	.LBB11_58
.Ltmp403:
	movq	(%rax), %rdi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp404:
.LBB11_52:
	.loc	8 34 11
	movq	(%rax), %rdi
	.loc	8 34 5 is_stmt 0
	callq	runtime.gopanic
.Ltmp405:
.LBB11_53:
	.loc	8 42 70 is_stmt 1
	movq	(%r13), %rdi
.Ltmp406:
.LBB11_54:
	.loc	8 42 63 is_stmt 0
	movq	%r12, %rsi
	callq	reflect.TypeOf
	testq	%rax, %rax
	jne	.LBB11_56
.Ltmp407:
	.loc	8 0 63
	xorl	%eax, %eax
	jmp	.LBB11_57
.Ltmp408:
.LBB11_56:
	.loc	8 42 63
	movq	(%rax), %rax
.Ltmp409:
.LBB11_57:
	.loc	8 42 13
	movq	%rax, 144(%rsp)
	movq	%rdx, 152(%rsp)
	leaq	144(%rsp), %rax
	movq	%rax, 120(%rsp)
	movq	$1, 128(%rsp)
	movq	$1, 136(%rsp)
	movq	136(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	120(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.149, %edi
	movl	$30, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB11_59
.Ltmp410:
.LBB11_58:
	.loc	8 0 13
	xorl	%edi, %edi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp411:
.LBB11_59:
	.loc	8 42 13
	movq	(%rax), %rdi
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp412:
.Lfunc_end11:
	.size	command_line_arguments.Context.evalExpr, .Lfunc_end11-command_line_arguments.Context.evalExpr
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalExprStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalExprStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalExprStmt,@function
command_line_arguments.Context.evalExprStmt:
.Lfunc_begin12:
	.loc	7 33 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB12_2
	movq	%r10, %rax
	movabsq	$56, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB12_2:
.Ltmp413:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$32, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	.loc	7 34 20 prologue_end
	testq	%rdx, %rdx
	je	.LBB12_9
.Ltmp414:
	.loc	7 0 20 is_stmt 0
	movq	%rsi, %r14
.Ltmp415:
	movq	%rdi, %rbx
	movq	(%rdx), %rax
	movq	8(%rdx), %r15
	.loc	7 34 20
	testq	%rax, %rax
	je	.LBB12_4
.Ltmp416:
	movq	(%rax), %rsi
	jmp	.LBB12_5
.Ltmp417:
.LBB12_4:
	.loc	7 0 20
	xorl	%esi, %esi
.Ltmp418:
.LBB12_5:
	.loc	7 34 20
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
.Ltmp419:
	.loc	7 0 20
	leaq	8(%rsp), %rdi
	.loc	7 34 13
	movq	%r14, %rsi
	movq	%rax, %rdx
	movq	%r15, %rcx
	callq	command_line_arguments.Context.Eval
	movq	16(%rsp), %rax
.Ltmp420:
	.loc	7 35 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB12_7
.Ltmp421:
	.loc	7 34 13
	movq	24(%rsp), %rcx
	.loc	7 36 3
	movq	$0, (%rbx)
	movq	%rax, 8(%rbx)
	movq	%rcx, 16(%rbx)
	jmp	.LBB12_8
.Ltmp422:
.LBB12_7:
	.loc	7 34 13
	movq	8(%rsp), %rax
.Ltmp423:
	.loc	7 38 2
	movq	%rax, (%rbx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rbx)
.Ltmp424:
.LBB12_8:
	.loc	7 0 2 is_stmt 0
	movq	%rbx, %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp425:
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB12_9:
	.cfi_def_cfa_offset 64
.Ltmp426:
	.loc	7 34 20 is_stmt 1
	movl	$6, %edi
	callq	__go_runtime_error
.Ltmp427:
.Lfunc_end12:
	.size	command_line_arguments.Context.evalExprStmt, .Lfunc_end12-command_line_arguments.Context.evalExprStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalFuncDecl,"ax",@progbits
	.globl	command_line_arguments.Context.evalFuncDecl
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalFuncDecl,@function
command_line_arguments.Context.evalFuncDecl:
.Lfunc_begin13:
	.loc	9 20 0
	.cfi_startproc
	.loc	9 21 2 prologue_end
	movq	$command_line_arguments.False, (%rdi)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rdi)
	movq	%rdi, %rax
	retq
.Ltmp428:
.Lfunc_end13:
	.size	command_line_arguments.Context.evalFuncDecl, .Lfunc_end13-command_line_arguments.Context.evalFuncDecl
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalGenDecl,"ax",@progbits
	.globl	command_line_arguments.Context.evalGenDecl
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalGenDecl,@function
command_line_arguments.Context.evalGenDecl:
.Lfunc_begin14:
	.loc	9 24 0
	.cfi_startproc
	.loc	9 25 2 prologue_end
	movq	$command_line_arguments.False, (%rdi)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rdi)
	movq	%rdi, %rax
	retq
.Ltmp429:
.Lfunc_end14:
	.size	command_line_arguments.Context.evalGenDecl, .Lfunc_end14-command_line_arguments.Context.evalGenDecl
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalIdent,"ax",@progbits
	.globl	command_line_arguments.Context.evalIdent
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalIdent,@function
command_line_arguments.Context.evalIdent:
.Lfunc_begin15:
	.loc	8 73 0
	.cfi_startproc
	leaq	-472(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB15_2
	movq	%r10, %rax
	movabsq	$472, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB15_2:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$424, %rsp
	.cfi_def_cfa_offset 480
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r12
	movq	%rsi, %rbp
	movq	%rdi, %rbx
.Ltmp430:
	.loc	8 74 2 prologue_end
	movl	$type...1go_ast.Ident, %edi
	movq	%rdx, %rsi
	movq	%rcx, 32(%rsp)
.Ltmp431:
	movq	%rcx, %rdx
	callq	runtime.ifaceI2T2P
.Ltmp432:
	.loc	8 75 5
	testb	%dl, %dl
	je	.LBB15_3
.Ltmp433:
	.loc	8 0 5 is_stmt 0
	movq	%rax, %r14
.Ltmp434:
	.loc	8 78 31 is_stmt 1
	testq	%rax, %rax
	je	.LBB15_32
.Ltmp435:
	.loc	8 0 31 is_stmt 0
	movups	8(%r14), %xmm0
	movaps	%xmm0, 336(%rsp)
	.loc	8 78 17
	testq	%rbp, %rbp
	je	.LBB15_32
.Ltmp436:
	.loc	8 0 17
	movq	%rbx, 40(%rsp)
	.loc	8 78 17
	movq	8(%rbp), %rsi
	leaq	336(%rsp), %rdx
.Ltmp437:
	.loc	8 78 5
	movl	$type..map.6string.7interface.4.5, %edi
	callq	runtime.mapaccess2
.Ltmp438:
	.loc	8 0 0
	movq	command_line_arguments.PkgLogger(%rip), %rcx
	movq	8(%rcx), %r15
	movq	command_line_arguments.PkgLogger+8(%rip), %r13
.Ltmp439:
	.loc	8 78 2
	testb	$1, %dl
	jne	.LBB15_14
.Ltmp440:
	.loc	8 0 2
	addq	$8, %r14
.Ltmp441:
	.loc	8 83 11 is_stmt 1
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
.Ltmp442:
	movq	%rax, %rbx
	.loc	8 83 39 is_stmt 0
	testq	%r12, %r12
	je	.LBB15_17
.Ltmp443:
	movq	(%r12), %rax
	jmp	.LBB15_18
.Ltmp444:
.LBB15_14:
	.loc	8 0 39
	movq	(%rax), %r14
.Ltmp445:
	movq	8(%rax), %rbp
.Ltmp446:
	.loc	8 79 12 is_stmt 1
	movl	$type...62x.7interface.4.5, %edi
	callq	runtime.newobject
.Ltmp447:
	movq	%rax, %rbx
	.loc	8 79 60 is_stmt 0
	testq	%r12, %r12
	je	.LBB15_15
.Ltmp448:
	movq	(%r12), %rax
	jmp	.LBB15_21
.Ltmp449:
.LBB15_17:
	.loc	8 0 60
	xorl	%eax, %eax
.Ltmp450:
.LBB15_18:
	.loc	8 83 11 is_stmt 1
	movq	%rax, 240(%rsp)
	movq	32(%rsp), %rax
	movq	%rax, 248(%rsp)
	leaq	240(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 136(%rsp)
	movq	$1, 144(%rsp)
	movq	$1, 152(%rsp)
	movq	152(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	136(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.164, %esi
	movl	$15, %edx
	movq	%r13, %rdi
	callq	*%r15
	.loc	8 84 40
	movq	8(%rbp), %r15
	.loc	8 84 11 is_stmt 0
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %rax
	movq	%rax, 48(%rsp)
	movq	command_line_arguments.PkgLogger+8(%rip), %r13
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movl	$type..map.6string.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
.Ltmp451:
	.loc	8 0 11
	movq	%r15, 56(%rsp)
	leaq	56(%rsp), %rdx
	.loc	8 84 11
	movl	$type..map.6string.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$type..map.6string.7interface.4.5, 224(%rsp)
	movq	%rbp, 232(%rsp)
	leaq	224(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 160(%rsp)
	movq	$1, 168(%rsp)
	movq	$1, 176(%rsp)
	movq	176(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	160(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.164, %esi
	movl	$15, %edx
	movq	%r13, %rdi
	callq	*48(%rsp)
	movups	(%r14), %xmm0
	movaps	%xmm0, 320(%rsp)
	.loc	8 85 69 is_stmt 1
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movaps	320(%rsp), %xmm0
	movaps	%xmm0, 304(%rsp)
	leaq	304(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$string..d, 208(%rsp)
	movq	%rbx, 216(%rsp)
	leaq	208(%rsp), %rax
	movq	%rax, 184(%rsp)
	movq	$1, 192(%rsp)
	movq	$1, 200(%rsp)
	movq	200(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	184(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.168, %edi
	movl	$18, %esi
	callq	fmt.Sprintf
	movq	%rax, %rbp
	movq	%rdx, %r14
	.loc	8 85 2 is_stmt 0
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp452:
	.loc	8 83 39 is_stmt 1
	testq	%r12, %r12
	je	.LBB15_19
.Ltmp453:
	.loc	8 85 57
	movq	(%r12), %rsi
	jmp	.LBB15_29
.Ltmp454:
.LBB15_15:
	.loc	8 0 57 is_stmt 0
	xorl	%eax, %eax
.Ltmp455:
.LBB15_21:
	.loc	8 79 12 is_stmt 1
	movq	%r14, 272(%rsp)
	movq	%rbp, 280(%rsp)
	movq	%rax, 288(%rsp)
	movq	32(%rsp), %rax
	movq	%rax, 296(%rsp)
	leaq	272(%rsp), %rdx
	movl	$type...62x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 112(%rsp)
	movq	$2, 120(%rsp)
	movq	$2, 128(%rsp)
	movq	128(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	112(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.161, %esi
	movl	$30, %edx
	movq	%r13, %rdi
	callq	*%r15
	.loc	8 80 3
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp456:
	.loc	8 0 3 is_stmt 0
	leaq	400(%rsp), %rdi
	.loc	8 80 16
	movq	%r14, %rsi
	movq	%rbp, %rdx
	callq	reflect.ValueOf
	movq	416(%rsp), %rax
	movq	%rax, 80(%rsp)
	movups	400(%rsp), %xmm0
	movaps	%xmm0, 64(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB15_22
.Ltmp457:
	.loc	8 0 16
	leaq	64(%rsp), %rdx
	.loc	8 80 16
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB15_25
.Ltmp458:
.LBB15_19:
	.loc	8 0 16
	xorl	%esi, %esi
.Ltmp459:
.LBB15_29:
	.loc	8 85 14 is_stmt 1
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	movq	%rax, 352(%rsp)
	movq	32(%rsp), %rax
	movq	%rax, 360(%rsp)
	movups	.Lconst.167(%rip), %xmm0
	movups	%xmm0, 368(%rsp)
	movq	%rbp, 384(%rsp)
	movq	%r14, 392(%rsp)
	leaq	352(%rsp), %rdx
	.loc	8 85 2 is_stmt 0
	movl	$command_line_arguments.EvalError..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	40(%rsp), %rax
	movq	$0, (%rax)
	movq	$imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.LBB15_26
.Ltmp460:
.LBB15_22:
	.loc	8 80 16 is_stmt 1
	testq	%rbx, %rbx
	je	.LBB15_32
.Ltmp461:
	movq	80(%rsp), %rax
	movq	%rax, 16(%rbx)
	movaps	64(%rsp), %xmm0
	movups	%xmm0, (%rbx)
.Ltmp462:
.LBB15_25:
	.loc	8 0 16 is_stmt 0
	movq	40(%rsp), %rax
	.loc	8 81 3 is_stmt 1
	movq	%rbx, (%rax)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rax)
.Ltmp463:
.LBB15_26:
	.loc	8 0 3 is_stmt 0
	addq	$424, %rsp
.Ltmp464:
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB15_32:
	.cfi_def_cfa_offset 480
.Ltmp465:
	movl	$6, %edi
	callq	__go_runtime_error
.Ltmp466:
.LBB15_3:
	.loc	8 76 80 is_stmt 1
	testq	%r12, %r12
	jne	.LBB15_30
.Ltmp467:
	.loc	8 0 80 is_stmt 0
	xorl	%edi, %edi
	jmp	.LBB15_5
.Ltmp468:
.LBB15_30:
	.loc	8 76 80
	movq	(%r12), %rdi
.Ltmp469:
.LBB15_5:
	.loc	8 76 73
	movq	32(%rsp), %rsi
	callq	reflect.TypeOf
.Ltmp470:
	testq	%rax, %rax
	jne	.LBB15_31
.Ltmp471:
	.loc	8 0 73
	xorl	%eax, %eax
	jmp	.LBB15_7
.Ltmp472:
.LBB15_31:
	.loc	8 76 73
	movq	(%rax), %rax
.Ltmp473:
.LBB15_7:
	.loc	8 76 13
	movq	%rax, 256(%rsp)
	movq	%rdx, 264(%rsp)
	leaq	256(%rsp), %rax
	movq	%rax, 88(%rsp)
	movq	$1, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	104(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	88(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.159, %edi
	movl	$41, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB15_10
.Ltmp474:
	.loc	8 0 13
	xorl	%edi, %edi
	.loc	8 76 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp475:
.LBB15_10:
	.loc	8 76 13
	movq	(%rax), %rdi
	.loc	8 76 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp476:
.Lfunc_end15:
	.size	command_line_arguments.Context.evalIdent, .Lfunc_end15-command_line_arguments.Context.evalIdent
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalIfStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalIfStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalIfStmt,@function
command_line_arguments.Context.evalIfStmt:
.Lfunc_begin16:
	.loc	7 65 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB16_2
	movq	%r10, %rax
	movabsq	$88, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB16_2:
.Ltmp477:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$56, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	.loc	7 66 23 prologue_end
	testq	%rdx, %rdx
	je	.LBB16_15
.Ltmp478:
	.loc	7 0 23 is_stmt 0
	movq	%rdx, %rbx
.Ltmp479:
	movq	%rsi, %r14
.Ltmp480:
	movq	%rdi, %r15
	movq	24(%rdx), %rax
	movq	32(%rdx), %r12
	.loc	7 66 23
	testq	%rax, %rax
	je	.LBB16_4
.Ltmp481:
	movq	(%rax), %rsi
	jmp	.LBB16_5
.Ltmp482:
.LBB16_4:
	.loc	7 0 23
	xorl	%esi, %esi
.Ltmp483:
.LBB16_5:
	.loc	7 66 23
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	32(%rsp), %rdi
	.loc	7 66 16
	movq	%r14, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	command_line_arguments.Context.Eval
	movq	40(%rsp), %rax
.Ltmp484:
	.loc	7 67 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB16_8
.Ltmp485:
	.loc	7 66 16
	movq	48(%rsp), %rcx
.Ltmp486:
.LBB16_7:
	.loc	7 0 16 is_stmt 0
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rcx, 16(%r15)
	jmp	.LBB16_11
.Ltmp487:
.LBB16_8:
	.loc	7 66 16
	movq	32(%rsp), %rdi
.Ltmp488:
	.loc	7 70 9 is_stmt 1
	callq	reflect.Value.Bool
.Ltmp489:
	.loc	7 0 9 is_stmt 0
	testb	$1, %al
	jne	.LBB16_12
.Ltmp490:
	.loc	7 77 2 is_stmt 1
	movq	$command_line_arguments.False, (%r15)
	jmp	.LBB16_10
.Ltmp491:
.LBB16_12:
	.loc	7 71 21
	movq	40(%rbx), %rcx
	leaq	8(%rsp), %rdi
	.loc	7 71 14 is_stmt 0
	movl	$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt, %edx
	movq	%r14, %rsi
	callq	command_line_arguments.Context.Eval
	movq	16(%rsp), %rax
.Ltmp492:
	.loc	7 72 10 is_stmt 1
	testq	%rax, %rax
	je	.LBB16_14
.Ltmp493:
	.loc	7 71 14
	movq	24(%rsp), %rcx
	jmp	.LBB16_7
.Ltmp494:
.LBB16_14:
	movq	8(%rsp), %rax
.Ltmp495:
	.loc	7 75 3
	movq	%rax, (%r15)
.Ltmp496:
.LBB16_10:
	.loc	7 0 3 is_stmt 0
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r15)
.Ltmp497:
.LBB16_11:
	movq	%r15, %rax
	addq	$56, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
.Ltmp498:
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp499:
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB16_15:
	.cfi_def_cfa_offset 96
.Ltmp500:
	.loc	7 66 23 is_stmt 1
	movl	$6, %edi
	callq	__go_runtime_error
.Ltmp501:
.Lfunc_end16:
	.size	command_line_arguments.Context.evalIfStmt, .Lfunc_end16-command_line_arguments.Context.evalIfStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalReturnStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalReturnStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalReturnStmt,@function
command_line_arguments.Context.evalReturnStmt:
.Lfunc_begin17:
	.loc	7 51 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB17_2
	movq	%r10, %rax
	movabsq	$200, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB17_2:
.Ltmp502:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	.loc	7 52 10 prologue_end
	testq	%rdx, %rdx
	je	.LBB17_19
.Ltmp503:
	.loc	7 0 10 is_stmt 0
	movq	%rdx, %rbx
.Ltmp504:
	movq	%rdi, %r15
	.loc	7 52 10
	movq	16(%rdx), %rax
	.loc	7 52 20
	testq	%rax, %rax
	je	.LBB17_4
.Ltmp505:
	.loc	7 0 20
	jle	.LBB17_20
.Ltmp506:
	movq	%rsi, %r14
.Ltmp507:
	movq	8(%rbx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rbp
	.loc	7 55 11 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %rax
	movq	%rax, 32(%rsp)
	movq	command_line_arguments.PkgLogger+8(%rip), %rax
	movq	%rax, 24(%rsp)
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %r13
	testq	%r12, %r12
	je	.LBB17_7
.Ltmp508:
	movq	(%r12), %rax
	jmp	.LBB17_8
.Ltmp509:
.LBB17_4:
	.loc	7 53 64
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rsp)
	movq	$0, 16(%rsp)
	movl	$.Lconst.215, %edi
	movl	$27, %esi
.Ltmp510:
	callq	fmt.Sprintf
	movq	%rax, %r14
	movq	%rdx, %r12
	.loc	7 53 3 is_stmt 0
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	movq	%rax, %r13
.Ltmp511:
	.loc	7 53 15
	movq	$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt, 104(%rsp)
	movq	%rbx, 112(%rsp)
	movups	.Lconst.214(%rip), %xmm0
	movups	%xmm0, 120(%rsp)
	movq	%r14, 136(%rsp)
	movq	%r12, 144(%rsp)
	leaq	104(%rsp), %rdx
	.loc	7 53 3
	movl	$command_line_arguments.EvalError..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$0, (%r15)
	movq	$imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError, 8(%r15)
	movq	%r13, 16(%r15)
	jmp	.LBB17_17
.Ltmp512:
.LBB17_7:
	.loc	7 0 3
	xorl	%eax, %eax
.Ltmp513:
.LBB17_8:
	.loc	7 55 11 is_stmt 1
	movq	%rax, 64(%rsp)
	movq	%rbp, 72(%rsp)
	leaq	64(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%r13, %rsi
	callq	runtime.typedmemmove
	movq	%r13, 40(%rsp)
	movq	$1, 48(%rsp)
	movq	$1, 56(%rsp)
	movq	56(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	40(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.217, %esi
	movl	$20, %edx
	movq	24(%rsp), %rdi
	callq	*32(%rsp)
	.loc	7 56 33
	cmpq	$0, 16(%rbx)
	jle	.LBB17_20
.Ltmp514:
	.loc	7 0 33 is_stmt 0
	movq	8(%rbx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rbx
.Ltmp515:
	.loc	7 56 33
	testq	%rax, %rax
	je	.LBB17_10
.Ltmp516:
	movq	(%rax), %rsi
	jmp	.LBB17_11
.Ltmp517:
.LBB17_10:
	.loc	7 0 33
	xorl	%esi, %esi
.Ltmp518:
.LBB17_11:
	.loc	7 56 33
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	80(%rsp), %rdi
	.loc	7 56 18
	movq	%r14, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	command_line_arguments.Context.Eval
	movq	88(%rsp), %rax
.Ltmp519:
	.loc	7 57 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB17_13
.Ltmp520:
	.loc	7 56 18
	movq	96(%rsp), %rcx
	.loc	7 58 3
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rcx, 16(%r15)
	jmp	.LBB17_17
.Ltmp521:
.LBB17_13:
	.loc	7 60 3
	testq	%r14, %r14
	je	.LBB17_19
.Ltmp522:
	.loc	7 0 3 is_stmt 0
	movq	80(%rsp), %rbx
.Ltmp523:
	.loc	7 60 14
	movb	$1, 16(%r14)
	.loc	7 61 3 is_stmt 1
	addq	$24, %r14
.Ltmp524:
	.loc	7 61 16 is_stmt 0
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB17_18
.Ltmp525:
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	runtime.writebarrierptr
.Ltmp526:
	.loc	7 0 16
	jmp	.LBB17_16
.Ltmp527:
.LBB17_18:
	.loc	7 61 16
	movq	%rbx, (%r14)
.Ltmp528:
.LBB17_16:
	.loc	7 62 2 is_stmt 1
	movq	%rbx, (%r15)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r15)
.Ltmp529:
.LBB17_17:
	.loc	7 0 2 is_stmt 0
	movq	%r15, %rax
	addq	$152, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB17_20:
	.cfi_def_cfa_offset 208
.Ltmp530:
	xorl	%edi, %edi
	callq	__go_runtime_error
.Ltmp531:
.LBB17_19:
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end17:
	.size	command_line_arguments.Context.evalReturnStmt, .Lfunc_end17-command_line_arguments.Context.evalReturnStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalSelectorExpr,"ax",@progbits
	.globl	command_line_arguments.Context.evalSelectorExpr
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalSelectorExpr,@function
command_line_arguments.Context.evalSelectorExpr:
.Lfunc_begin18:
	.loc	8 88 0 is_stmt 1
	.cfi_startproc
	leaq	-1048(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB18_2
	movq	%r10, %rax
	movabsq	$1048, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB18_2:
.Ltmp532:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$1000, %rsp
	.cfi_def_cfa_offset 1056
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	.loc	8 89 22 prologue_end
	testq	%rdx, %rdx
	je	.LBB18_35
.Ltmp533:
	.loc	8 0 22 is_stmt 0
	movq	%rdx, %r12
.Ltmp534:
	movq	%rsi, %rbx
.Ltmp535:
	movq	%rdi, %r15
	movq	(%rdx), %rax
	movq	8(%rdx), %rbp
	.loc	8 89 22
	testq	%rax, %rax
	je	.LBB18_4
.Ltmp536:
	movq	(%rax), %rsi
	jmp	.LBB18_5
.Ltmp537:
.LBB18_4:
	.loc	8 0 22
	xorl	%esi, %esi
.Ltmp538:
.LBB18_5:
	.loc	8 89 22
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	360(%rsp), %rdi
	.loc	8 89 15
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%rbp, %rcx
	callq	command_line_arguments.Context.Eval
	movq	368(%rsp), %rax
.Ltmp539:
	.loc	8 90 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB18_9
.Ltmp540:
	.loc	8 89 15
	movq	376(%rsp), %rcx
	.loc	8 91 3
	movq	$0, (%r15)
	movq	%rax, 8(%r15)
	movq	%rcx, 16(%r15)
	jmp	.LBB18_7
.Ltmp541:
.LBB18_9:
	.loc	8 0 3 is_stmt 0
	movq	360(%rsp), %r14
.Ltmp542:
	.loc	8 93 9 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.IsValid
.Ltmp543:
	.loc	8 93 5 is_stmt 0
	testb	%al, %al
	je	.LBB18_10
.Ltmp544:
	.loc	8 0 5
	movq	%r15, 72(%rsp)
	.loc	8 98 75 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.IsValid
	movl	%eax, %r15d
	.loc	8 98 88 is_stmt 0
	movq	16(%r12), %rax
	.loc	8 98 92
	testq	%rax, %rax
	je	.LBB18_35
.Ltmp545:
	.loc	8 0 92
	movups	8(%rax), %xmm0
	movaps	%xmm0, 688(%rsp)
	.loc	8 98 11
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %rax
	movq	%rax, 32(%rsp)
	movq	command_line_arguments.PkgLogger+8(%rip), %rax
	movq	%rax, 40(%rsp)
	movl	$type...63x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %r13
	movl	$bool..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp546:
	movb	%r15b, (%rax)
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movaps	688(%rsp), %xmm0
	movaps	%xmm0, 672(%rsp)
	leaq	672(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$type...1go_ast.SelectorExpr, 464(%rsp)
	movq	%r12, 472(%rsp)
	movq	$bool..d, 480(%rsp)
	movq	%rbx, 488(%rsp)
	movq	$string..d, 496(%rsp)
	movq	%rbp, 504(%rsp)
	leaq	464(%rsp), %rdx
	movl	$type...63x.7interface.4.5, %edi
	movq	%r13, %rsi
	callq	runtime.typedmemmove
	movq	%r13, 152(%rsp)
	movq	$3, 160(%rsp)
	movq	$3, 168(%rsp)
	movq	168(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	152(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.176, %esi
	movl	$45, %edx
	movq	40(%rsp), %rdi
	callq	*32(%rsp)
	.loc	8 99 83 is_stmt 1
	movq	%r14, %rdi
	callq	reflect.Value.Type
	movq	%rax, %rbp
	.loc	8 99 98 is_stmt 0
	movq	16(%r12), %rax
	.loc	8 99 102
	testq	%rax, %rax
	je	.LBB18_35
.Ltmp547:
	.loc	8 0 102
	movq	%rdx, %r15
	movq	%r14, 32(%rsp)
.Ltmp548:
	movq	%r12, 40(%rsp)
.Ltmp549:
	movups	8(%rax), %xmm0
	movaps	%xmm0, 656(%rsp)
	.loc	8 99 11
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r12
	movq	command_line_arguments.PkgLogger+8(%rip), %r14
	movl	$type...64x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	.loc	8 99 83
	testq	%rbp, %rbp
	je	.LBB18_14
.Ltmp550:
	movq	(%rbp), %r13
	jmp	.LBB18_15
.Ltmp551:
.LBB18_10:
	.loc	8 94 12 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r14
.Ltmp552:
	movq	command_line_arguments.PkgLogger+8(%rip), %rbx
.Ltmp553:
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movq	$type...1go_ast.SelectorExpr, 344(%rsp)
	movq	%r12, 352(%rsp)
	leaq	344(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%rbp, 104(%rsp)
	movq	$1, 112(%rsp)
	movq	$1, 120(%rsp)
	movq	120(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	104(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.170, %esi
	movl	$30, %edx
	movq	%rbx, %rdi
	callq	*%r14
	.loc	8 95 68
	movq	$type...1go_ast.SelectorExpr, 328(%rsp)
	movq	%r12, 336(%rsp)
	leaq	328(%rsp), %rax
	movq	%rax, 128(%rsp)
	movq	$1, 136(%rsp)
	movq	$1, 144(%rsp)
	movq	144(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	128(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.174, %edi
	movl	$20, %esi
	callq	fmt.Sprintf
	movq	%rax, %r14
	movq	%rdx, %rbp
	.loc	8 95 3 is_stmt 0
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp554:
	.loc	8 95 15
	movq	$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr, 848(%rsp)
	movq	%r12, 856(%rsp)
	movups	.Lconst.173(%rip), %xmm0
	movups	%xmm0, 864(%rsp)
	movq	%r14, 880(%rsp)
	movq	%rbp, 888(%rsp)
	leaq	848(%rsp), %rdx
	jmp	.LBB18_33
.Ltmp555:
.LBB18_14:
	.loc	8 0 15
	xorl	%r13d, %r13d
.Ltmp556:
.LBB18_15:
	.loc	8 99 11 is_stmt 1
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movaps	656(%rsp), %xmm0
	movaps	%xmm0, 640(%rsp)
	leaq	640(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$type...1go_ast.SelectorExpr, 512(%rsp)
	movq	40(%rsp), %rax
	movq	%rax, 520(%rsp)
	movq	%r13, 528(%rsp)
	movq	%rax, %r13
	movq	%r15, 536(%rsp)
	movq	$type...1reflect.Value, 544(%rsp)
	movq	32(%rsp), %r15
	movq	%r15, 552(%rsp)
	movq	$string..d, 560(%rsp)
	movq	%rbp, 568(%rsp)
	leaq	512(%rsp), %rdx
	movl	$type...64x.7interface.4.5, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	movq	%rbx, 176(%rsp)
	movq	$4, 184(%rsp)
	movq	$4, 192(%rsp)
	movq	192(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	176(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.179, %esi
	movl	$53, %edx
	movq	%r14, %rdi
	callq	*%r12
	.loc	8 100 11
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r14
	movq	command_line_arguments.PkgLogger+8(%rip), %rbx
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movq	$type...1go_ast.SelectorExpr, 312(%rsp)
	movq	%r13, 320(%rsp)
	leaq	312(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%rbp, 200(%rsp)
	movq	$1, 208(%rsp)
	movq	$1, 216(%rsp)
	movq	216(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	200(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.182, %esi
	movl	$28, %edx
	movq	%rbx, %rdi
	callq	*%r14
	.loc	8 101 2
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp557:
	.loc	8 101 25 is_stmt 0
	movq	16(%r13), %rax
	.loc	8 101 29
	testq	%rax, %rax
	je	.LBB18_35
.Ltmp558:
	.loc	8 101 10
	movq	8(%rax), %rdx
	movq	16(%rax), %rcx
	leaq	824(%rsp), %rdi
	movq	%r15, %rsi
	callq	reflect.Value.MethodByName
	movq	840(%rsp), %rax
	movq	%rax, 96(%rsp)
	movups	824(%rsp), %xmm0
	movaps	%xmm0, 80(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	movq	72(%rsp), %rbp
	je	.LBB18_17
.Ltmp559:
	.loc	8 0 10
	leaq	80(%rsp), %rdx
	.loc	8 101 10
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB18_20
.Ltmp560:
.LBB18_17:
	testq	%rbx, %rbx
	je	.LBB18_35
.Ltmp561:
	movq	96(%rsp), %rax
	movq	%rax, 16(%rbx)
	movaps	80(%rsp), %xmm0
	movups	%xmm0, (%rbx)
.Ltmp562:
.LBB18_20:
	.loc	8 102 7 is_stmt 1
	movq	%rbx, %rdi
	callq	reflect.Value.IsValid
	.loc	8 102 5 is_stmt 0
	testb	%al, %al
	je	.LBB18_22
.Ltmp563:
	.loc	8 107 2 is_stmt 1
	movq	%rbx, (%rbp)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rbp)
	movq	%rbp, %rax
	jmp	.LBB18_8
.Ltmp564:
.LBB18_22:
	.loc	8 103 64
	movq	16(%r13), %rax
	.loc	8 103 68 is_stmt 0
	testq	%rax, %rax
	je	.LBB18_35
.Ltmp565:
	.loc	8 0 68
	movups	8(%rax), %xmm0
	movaps	%xmm0, 624(%rsp)
	.loc	8 103 12
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r15
	movq	command_line_arguments.PkgLogger+8(%rip), %r14
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp566:
	.loc	8 0 12
	movaps	624(%rsp), %xmm0
	movaps	%xmm0, 608(%rsp)
	leaq	608(%rsp), %rdx
	.loc	8 103 12
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$string..d, 296(%rsp)
	movq	%rbx, 304(%rsp)
	leaq	296(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbp, %rsi
	callq	runtime.typedmemmove
	movq	%rbp, 224(%rsp)
	movq	$1, 232(%rsp)
	movq	$1, 240(%rsp)
	movq	240(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	224(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.184, %esi
	movl	$38, %edx
	movq	%r14, %rdi
	callq	*%r15
	movq	32(%rsp), %rcx
	.loc	8 104 16 is_stmt 1
	testq	%rcx, %rcx
	je	.LBB18_35
.Ltmp567:
	.loc	8 0 16 is_stmt 0
	movq	16(%rcx), %rax
	movq	%rax, 64(%rsp)
	movups	(%rcx), %xmm0
	movaps	%xmm0, 48(%rsp)
	leaq	48(%rsp), %rdi
.Ltmp568:
	.file	10 "./print.go"
	.loc	10 20 6 is_stmt 1
	callq	reflect.Value.Kind
	.loc	10 20 14 is_stmt 0
	cmpq	$22, %rax
	jne	.LBB18_26
.Ltmp569:
	.loc	10 0 14
	leaq	896(%rsp), %rdi
	leaq	48(%rsp), %rsi
	.loc	10 21 8 is_stmt 1
	callq	reflect.Value.Elem
	.loc	10 21 5 is_stmt 0
	movq	912(%rsp), %rax
	movq	%rax, 64(%rsp)
	movups	896(%rsp), %xmm0
	movaps	%xmm0, 48(%rsp)
.Ltmp570:
.LBB18_26:
	.loc	10 0 5
	leaq	48(%rsp), %rdi
.Ltmp571:
	.loc	10 23 19 is_stmt 1
	callq	reflect.Value.NumMethod
	.loc	10 23 16 is_stmt 0
	testq	%rax, %rax
	jle	.LBB18_29
.Ltmp572:
	.loc	10 0 16
	xorl	%ebx, %ebx
.Ltmp573:
	.p2align	4, 0x90
.LBB18_28:
	leaq	48(%rsp), %rax
	movq	%rax, %rdi
.Ltmp574:
	.loc	10 24 9 is_stmt 1
	callq	reflect.Value.Type
	.loc	10 24 16 is_stmt 0
	leaq	920(%rsp), %rdi
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	callq	*152(%rax)
	movups	920(%rsp), %xmm0
	movaps	%xmm0, 752(%rsp)
	.loc	10 25 12 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %r13
	movq	command_line_arguments.PkgLogger+8(%rip), %r15
	movl	$type...62x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %r14
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movaps	48(%rsp), %xmm0
	movaps	%xmm0, 720(%rsp)
	movq	64(%rsp), %rax
	movq	%rax, 736(%rsp)
	movl	$reflect.Value..d, %edi
	movq	%rbp, %rsi
	leaq	720(%rsp), %rdx
	callq	runtime.typedmemmove
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %r12
	movaps	752(%rsp), %xmm0
	movaps	%xmm0, 704(%rsp)
	movl	$string..d, %edi
	movq	%rax, %rsi
	leaq	704(%rsp), %rdx
	callq	runtime.typedmemmove
	movq	$reflect.Value..d, 384(%rsp)
	movq	%rbp, 392(%rsp)
	movq	$string..d, 400(%rsp)
	movq	%r12, 408(%rsp)
	movl	$type...62x.7interface.4.5, %edi
	movq	%r14, %rsi
	leaq	384(%rsp), %rdx
	callq	runtime.typedmemmove
	movq	%r14, 272(%rsp)
	movq	$2, 280(%rsp)
	movq	$2, 288(%rsp)
	movq	288(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	272(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.207, %esi
	movl	$15, %edx
	movq	%r15, %rdi
	callq	*%r13
.Ltmp575:
	.loc	10 23 33
	addq	$1, %rbx
.Ltmp576:
	.loc	10 23 19 is_stmt 0
	leaq	48(%rsp), %rdi
	callq	reflect.Value.NumMethod
	.loc	10 23 16
	cmpq	%rax, %rbx
	jl	.LBB18_28
.Ltmp577:
.LBB18_29:
	.loc	10 0 16
	movq	32(%rsp), %rbx
	.loc	8 105 105 is_stmt 1
	movq	%rbx, %rdi
	callq	reflect.Value.Type
	movq	40(%rsp), %r12
	.loc	8 105 120 is_stmt 0
	movq	16(%r12), %rcx
	.loc	8 105 124
	testq	%rcx, %rcx
	je	.LBB18_35
.Ltmp578:
	.loc	8 0 124
	movq	%rdx, %r14
	movups	8(%rcx), %xmm0
	movaps	%xmm0, 592(%rsp)
	.loc	8 105 105
	testq	%rax, %rax
	movq	72(%rsp), %r15
	je	.LBB18_31
.Ltmp579:
	movq	(%rax), %r13
	jmp	.LBB18_32
.Ltmp580:
.LBB18_31:
	.loc	8 0 105
	xorl	%r13d, %r13d
.Ltmp581:
.LBB18_32:
	.loc	8 105 66
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	movaps	592(%rsp), %xmm0
	movaps	%xmm0, 576(%rsp)
	leaq	576(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%r13, 416(%rsp)
	movq	%r14, 424(%rsp)
	movq	$type...1reflect.Value, 432(%rsp)
	movq	%rbx, 440(%rsp)
	movq	$string..d, 448(%rsp)
	movq	%rbp, 456(%rsp)
	leaq	416(%rsp), %rax
	movq	%rax, 248(%rsp)
	movq	$3, 256(%rsp)
	movq	$3, 264(%rsp)
	movq	264(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	248(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.186, %edi
	movl	$24, %esi
	callq	fmt.Sprintf
	movq	%rax, %r14
	movq	%rdx, %rbp
	.loc	8 105 3
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp582:
	.loc	8 105 15
	movq	$pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr, 776(%rsp)
	movq	%r12, 784(%rsp)
	movups	.Lconst.189(%rip), %xmm0
	movups	%xmm0, 792(%rsp)
	movq	%r14, 808(%rsp)
	movq	%rbp, 816(%rsp)
	leaq	776(%rsp), %rdx
.Ltmp583:
.LBB18_33:
	.loc	8 0 15
	movl	$command_line_arguments.EvalError..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$0, (%r15)
	movq	$imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError, 8(%r15)
	movq	%rbx, 16(%r15)
.Ltmp584:
.LBB18_7:
	movq	%r15, %rax
.LBB18_8:
	addq	$1000, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB18_35:
	.cfi_def_cfa_offset 1056
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end18:
	.size	command_line_arguments.Context.evalSelectorExpr, .Lfunc_end18-command_line_arguments.Context.evalSelectorExpr
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalStmt,"ax",@progbits
	.globl	command_line_arguments.Context.evalStmt
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalStmt,@function
command_line_arguments.Context.evalStmt:
.Lfunc_begin19:
	.loc	7 9 0 is_stmt 1
	.cfi_startproc
	leaq	-280(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB19_2
	movq	%r10, %rax
	movabsq	$280, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB19_2:
.Ltmp585:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
	.cfi_def_cfa_offset 288
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
.Ltmp586:
	.loc	7 10 6 prologue_end
	testq	%rsi, %rsi
	je	.LBB19_45
.Ltmp587:
	.loc	7 0 6 is_stmt 0
	movq	%rcx, %r15
.Ltmp588:
	movq	%rdx, %rbx
.Ltmp589:
	movq	%rsi, %r12
.Ltmp590:
	movq	%rdi, %r14
	testb	$1, 16(%rsi)
	jne	.LBB19_7
.Ltmp591:
	.loc	7 17 2 is_stmt 1
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	runtime.ifacetype
	movq	%rax, %r13
	.loc	7 18 2
	movl	$type...1go_ast.BlockStmt, %edi
	movq	%rax, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB19_17
.Ltmp592:
	.loc	7 17 9
	testq	%rbx, %rbx
	je	.LBB19_6
.Ltmp593:
	movq	(%rbx), %rsi
	jmp	.LBB19_14
.Ltmp594:
.LBB19_7:
	.loc	7 11 15
	movb	$0, 16(%r12)
.Ltmp595:
	.loc	7 12 8
	movq	24(%r12), %rdi
	.loc	7 12 20 is_stmt 0
	callq	reflect.Value.IsValid
	.loc	7 12 6
	testb	%al, %al
	jne	.LBB19_11
.Ltmp596:
	.loc	7 13 13 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
	movq	8(%rax), %rax
	movq	%rax, 24(%rsp)
	movq	command_line_arguments.PkgLogger+8(%rip), %r13
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %rbp
	.loc	7 13 36 is_stmt 0
	testq	%rbx, %rbx
	je	.LBB19_9
.Ltmp597:
	movq	(%rbx), %rax
	jmp	.LBB19_10
.Ltmp598:
.LBB19_17:
	.loc	7 20 2 is_stmt 1
	movl	$type...1go_ast.IfStmt, %edi
	movq	%r13, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB19_18
.Ltmp599:
	.loc	7 17 9
	testq	%rbx, %rbx
	je	.LBB19_16
.Ltmp600:
	movq	(%rbx), %rsi
	jmp	.LBB19_22
.Ltmp601:
.LBB19_6:
	.loc	7 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp602:
.LBB19_14:
	.loc	7 18 2 is_stmt 1
	movl	$type...1go_ast.BlockStmt, %edi
	movl	$go_ast.Stmt..d, %edx
	callq	runtime.assertI2T
.Ltmp603:
	.loc	7 0 2 is_stmt 0
	leaq	208(%rsp), %rdi
.Ltmp604:
	.loc	7 19 11 is_stmt 1
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	command_line_arguments.Context.evalBlockStmt
	movq	208(%rsp), %rax
	.loc	7 19 3 is_stmt 0
	movq	%rax, (%r14)
	movups	216(%rsp), %xmm0
	jmp	.LBB19_12
.Ltmp605:
.LBB19_9:
	.loc	7 0 3
	xorl	%eax, %eax
.Ltmp606:
.LBB19_10:
	.loc	7 13 13 is_stmt 1
	movq	%rax, 96(%rsp)
	movq	%r15, 104(%rsp)
	leaq	96(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rbp, %rsi
	callq	runtime.typedmemmove
	movq	%rbp, 32(%rsp)
	movq	$1, 40(%rsp)
	movq	$1, 48(%rsp)
	movq	48(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	32(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.209, %esi
	movl	$10, %edx
	movq	%r13, %rdi
	callq	*24(%rsp)
.Ltmp607:
.LBB19_11:
	.loc	7 15 11
	movq	24(%r12), %rax
	.loc	7 15 3 is_stmt 0
	movq	%rax, (%r14)
	xorps	%xmm0, %xmm0
.Ltmp608:
.LBB19_12:
	.loc	7 0 3
	movups	%xmm0, 8(%r14)
	movq	%r14, %rax
	addq	$232, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
.Ltmp609:
	.cfi_def_cfa_offset 48
	popq	%r12
.Ltmp610:
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB19_18:
	.cfi_def_cfa_offset 288
.Ltmp611:
	.loc	7 22 2 is_stmt 1
	movl	$type...1go_ast.ReturnStmt, %edi
	movq	%r13, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB19_27
.Ltmp612:
	.loc	7 17 9
	testq	%rbx, %rbx
	je	.LBB19_20
.Ltmp613:
	movq	(%rbx), %rsi
	jmp	.LBB19_24
.Ltmp614:
.LBB19_16:
	.loc	7 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp615:
.LBB19_22:
	.loc	7 20 2 is_stmt 1
	movl	$type...1go_ast.IfStmt, %edi
	movl	$go_ast.Stmt..d, %edx
	callq	runtime.assertI2T
.Ltmp616:
	.loc	7 0 2 is_stmt 0
	leaq	184(%rsp), %rdi
.Ltmp617:
	.loc	7 21 11 is_stmt 1
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	command_line_arguments.Context.evalIfStmt
	movq	184(%rsp), %rax
	.loc	7 21 3 is_stmt 0
	movq	%rax, (%r14)
	movups	192(%rsp), %xmm0
	jmp	.LBB19_12
.Ltmp618:
.LBB19_27:
	.loc	7 24 2 is_stmt 1
	movl	$type...1go_ast.AssignStmt, %edi
	movq	%r13, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB19_28
.Ltmp619:
	.loc	7 17 9
	testq	%rbx, %rbx
	je	.LBB19_26
.Ltmp620:
	movq	(%rbx), %rsi
	jmp	.LBB19_32
.Ltmp621:
.LBB19_20:
	.loc	7 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp622:
.LBB19_24:
	.loc	7 22 2 is_stmt 1
	movl	$type...1go_ast.ReturnStmt, %edi
	movl	$go_ast.Stmt..d, %edx
	callq	runtime.assertI2T
.Ltmp623:
	.loc	7 0 2 is_stmt 0
	leaq	160(%rsp), %rdi
.Ltmp624:
	.loc	7 23 11 is_stmt 1
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	command_line_arguments.Context.evalReturnStmt
	movq	160(%rsp), %rax
	.loc	7 23 3 is_stmt 0
	movq	%rax, (%r14)
	movups	168(%rsp), %xmm0
	jmp	.LBB19_12
.Ltmp625:
.LBB19_28:
	.loc	7 26 2 is_stmt 1
	movl	$type...1go_ast.ExprStmt, %edi
	movq	%r13, %rsi
	callq	runtime.ifacetypeeq
	testb	%al, %al
	je	.LBB19_33
.Ltmp626:
	.loc	7 0 0 is_stmt 0
	testq	%rbx, %rbx
	je	.LBB19_30
.Ltmp627:
	.loc	7 17 9 is_stmt 1
	movq	(%rbx), %rsi
	jmp	.LBB19_40
.Ltmp628:
.LBB19_26:
	.loc	7 0 9 is_stmt 0
	xorl	%esi, %esi
.Ltmp629:
.LBB19_32:
	.loc	7 24 2 is_stmt 1
	movl	$type...1go_ast.AssignStmt, %edi
	movl	$go_ast.Stmt..d, %edx
	callq	runtime.assertI2T
.Ltmp630:
	.loc	7 0 2 is_stmt 0
	leaq	136(%rsp), %rdi
.Ltmp631:
	.loc	7 25 11 is_stmt 1
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	command_line_arguments.Context.evalAssignStmt
	movq	136(%rsp), %rax
	.loc	7 25 3 is_stmt 0
	movq	%rax, (%r14)
	movups	144(%rsp), %xmm0
	jmp	.LBB19_12
.Ltmp632:
.LBB19_30:
	.loc	7 0 3
	xorl	%esi, %esi
.Ltmp633:
.LBB19_40:
	.loc	7 26 2 is_stmt 1
	movl	$type...1go_ast.ExprStmt, %edi
	movl	$go_ast.Stmt..d, %edx
	callq	runtime.assertI2T
.Ltmp634:
	.loc	7 0 2 is_stmt 0
	leaq	112(%rsp), %rdi
.Ltmp635:
	.loc	7 27 11 is_stmt 1
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	command_line_arguments.Context.evalExprStmt
	movq	112(%rsp), %rax
	.loc	7 27 3 is_stmt 0
	movq	%rax, (%r14)
	movups	120(%rsp), %xmm0
	jmp	.LBB19_12
.Ltmp636:
.LBB19_45:
	.loc	7 10 6 is_stmt 1
	movl	$6, %edi
	callq	__go_runtime_error
.Ltmp637:
.LBB19_33:
	.loc	7 0 0 is_stmt 0
	testq	%rbx, %rbx
	jne	.LBB19_41
.Ltmp638:
	xorl	%edi, %edi
	jmp	.LBB19_35
.Ltmp639:
.LBB19_41:
	.loc	7 29 70 is_stmt 1
	movq	(%rbx), %rdi
.Ltmp640:
.LBB19_35:
	.loc	7 29 63 is_stmt 0
	movq	%r15, %rsi
	callq	reflect.TypeOf
	testq	%rax, %rax
	jne	.LBB19_42
.Ltmp641:
	.loc	7 0 63
	xorl	%eax, %eax
	jmp	.LBB19_37
.Ltmp642:
.LBB19_42:
	.loc	7 29 63
	movq	(%rax), %rax
.Ltmp643:
.LBB19_37:
	.loc	7 29 13
	movq	%rax, 80(%rsp)
	movq	%rdx, 88(%rsp)
	leaq	80(%rsp), %rax
	movq	%rax, 56(%rsp)
	movq	$1, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	72(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	56(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.211, %edi
	movl	$30, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB19_43
.Ltmp644:
	.loc	7 0 13
	xorl	%edi, %edi
	.loc	7 29 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp645:
.LBB19_43:
	.loc	7 29 13
	movq	(%rax), %rdi
	.loc	7 29 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp646:
.Lfunc_end19:
	.size	command_line_arguments.Context.evalStmt, .Lfunc_end19-command_line_arguments.Context.evalStmt
	.cfi_endproc

	.section	.text.command_line_arguments.Context.evalUnaryExpr,"ax",@progbits
	.globl	command_line_arguments.Context.evalUnaryExpr
	.p2align	4, 0x90
	.type	command_line_arguments.Context.evalUnaryExpr,@function
command_line_arguments.Context.evalUnaryExpr:
.Lfunc_begin20:
	.loc	8 160 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB20_2
	movq	%r10, %rax
	movabsq	$232, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB20_2:
.Ltmp647:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	.loc	8 161 21 prologue_end
	testq	%rdx, %rdx
	je	.LBB20_18
.Ltmp648:
	.loc	8 0 21 is_stmt 0
	movq	%rdx, %rbx
.Ltmp649:
	movq	%rsi, %r15
.Ltmp650:
	movq	%rdi, %r14
	movq	16(%rdx), %rax
	movq	24(%rdx), %r12
	.loc	8 161 21
	testq	%rax, %rax
	je	.LBB20_4
.Ltmp651:
	movq	(%rax), %rsi
	jmp	.LBB20_5
.Ltmp652:
.LBB20_4:
	.loc	8 0 21
	xorl	%esi, %esi
.Ltmp653:
.LBB20_5:
	.loc	8 161 21
	movl	$go_ast.Node..d, %edi
	callq	runtime.requireitab
	leaq	136(%rsp), %rdi
	.loc	8 161 14
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	command_line_arguments.Context.Eval
	movq	144(%rsp), %rax
.Ltmp654:
	.loc	8 162 9 is_stmt 1
	testq	%rax, %rax
	je	.LBB20_7
.Ltmp655:
	.loc	8 161 14
	movq	152(%rsp), %rcx
	.loc	8 163 3
	movq	$0, (%r14)
	movq	%rax, 8(%r14)
	movq	%rcx, 16(%r14)
	jmp	.LBB20_13
.Ltmp656:
.LBB20_7:
	.loc	8 0 3 is_stmt 0
	movq	136(%rsp), %r15
.Ltmp657:
	.loc	8 165 11 is_stmt 1
	movq	command_line_arguments.PkgLogger(%rip), %rax
.Ltmp658:
	movq	8(%rax), %rbp
	movq	command_line_arguments.PkgLogger+8(%rip), %r12
	movl	$type...61x.7interface.4.5, %edi
	callq	runtime.newobject
	movq	%rax, %r13
	movq	$type...1reflect.Value, 120(%rsp)
	movq	%r15, 128(%rsp)
	leaq	120(%rsp), %rdx
	movl	$type...61x.7interface.4.5, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	%r13, 56(%rsp)
	movq	$1, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	72(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	56(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.196, %esi
	movl	$19, %edx
	movq	%r12, %rdi
	callq	*%rbp
	.loc	8 166 10
	movq	8(%rbx), %rbx
.Ltmp659:
	.loc	8 0 10 is_stmt 0
	cmpq	$43, %rbx
	jne	.LBB20_14
.Ltmp660:
	.loc	8 168 28 is_stmt 1
	movq	%r15, %rdi
	callq	reflect.Value.Bool
	movl	%eax, %ebx
	.loc	8 168 25 is_stmt 0
	movl	$bool..d, %edi
	callq	runtime.newobject
	testb	%bl, %bl
	sete	(%rax)
	leaq	160(%rsp), %rdi
	.loc	8 168 17
	movl	$bool..d, %esi
	movq	%rax, %rdx
	callq	reflect.ValueOf
	movq	176(%rsp), %rax
	movq	%rax, 48(%rsp)
	movups	160(%rsp), %xmm0
	movaps	%xmm0, 32(%rsp)
	.loc	8 168 3
	movl	$reflect.Value..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp661:
	.loc	8 168 17
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB20_9
.Ltmp662:
	.loc	8 0 17
	leaq	32(%rsp), %rdx
	.loc	8 168 17
	movl	$reflect.Value..d, %edi
	movq	%rbx, %rsi
	callq	runtime.typedmemmove
	jmp	.LBB20_12
.Ltmp663:
.LBB20_9:
	testq	%rbx, %rbx
	je	.LBB20_18
.Ltmp664:
	movq	48(%rsp), %rax
	movq	%rax, 16(%rbx)
	movaps	32(%rsp), %xmm0
	movups	%xmm0, (%rbx)
.Ltmp665:
.LBB20_12:
	.loc	8 169 3 is_stmt 1
	movq	%rbx, (%r14)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%r14)
.Ltmp666:
.LBB20_13:
	.loc	8 0 3 is_stmt 0
	movq	%r14, %rax
	addq	$184, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB20_18:
	.cfi_def_cfa_offset 240
	movl	$6, %edi
	callq	__go_runtime_error
.LBB20_14:
.Ltmp667:
	.loc	8 171 13 is_stmt 1
	movl	$go_token.Token..d, %edi
	callq	runtime.newobject
	movq	%rbx, (%rax)
	movq	$go_token.Token..d, 104(%rsp)
	movq	%rax, 112(%rsp)
	leaq	104(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	$1, 96(%rsp)
	movq	96(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	80(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.198, %edi
	movl	$23, %esi
	callq	fmt.Errorf
	testq	%rax, %rax
	jne	.LBB20_17
.Ltmp668:
	.loc	8 0 13 is_stmt 0
	xorl	%edi, %edi
	.loc	8 171 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp669:
.LBB20_17:
	.loc	8 171 13
	movq	(%rax), %rdi
	.loc	8 171 3
	movq	%rdx, %rsi
	callq	runtime.gopanic
.Ltmp670:
.Lfunc_end20:
	.size	command_line_arguments.Context.evalUnaryExpr, .Lfunc_end20-command_line_arguments.Context.evalUnaryExpr
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI21_0:
	.zero	16
	.section	.text.command_line_arguments.NewContext,"ax",@progbits
	.globl	command_line_arguments.NewContext
	.p2align	4, 0x90
	.type	command_line_arguments.NewContext,@function
command_line_arguments.NewContext:
.Lfunc_begin21:
	.loc	2 42 0 is_stmt 1
	.cfi_startproc
	leaq	-392(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB21_2
	movq	%r10, %rax
	movabsq	$392, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB21_2:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$344, %rsp
	.cfi_def_cfa_offset 400
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%rdi, 48(%rsp)
.Ltmp671:
	.loc	2 44 22 prologue_end
	callq	go_token.NewFileSet
	movq	%rax, %rbp
	.loc	2 43 7
	movl	$command_line_arguments.Context..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
.Ltmp672:
	.loc	2 43 8 is_stmt 0
	movq	%rbp, 128(%rsp)
	movq	%r14, 136(%rsp)
	movb	$0, 144(%rsp)
	movq	$0, 152(%rsp)
	leaq	128(%rsp), %rdx
	.loc	2 43 7
	movl	$command_line_arguments.Context..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 32(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 208(%rsp)
	movaps	%xmm0, 304(%rsp)
	movaps	%xmm0, 288(%rsp)
	movaps	%xmm0, 272(%rsp)
	movaps	%xmm0, 256(%rsp)
	movaps	%xmm0, 240(%rsp)
	movaps	%xmm0, 224(%rsp)
.Ltmp673:
	.loc	2 47 2 is_stmt 1
	movq	command_line_arguments.types(%rip), %rsi
	leaq	224(%rsp), %rdx
	movl	$type..map.6string.7interface.4.5, %edi
	callq	runtime.mapiterinit
	movq	224(%rsp), %rax
	testq	%rax, %rax
	je	.LBB21_12
.Ltmp674:
	.loc	2 0 2 is_stmt 0
	leaq	192(%rsp), %r15
	leaq	224(%rsp), %rbp
	leaq	176(%rsp), %r14
.Ltmp675:
	leaq	320(%rsp), %r13
.Ltmp676:
	.p2align	4, 0x90
.LBB21_7:
	.loc	2 47 2
	movups	(%rax), %xmm0
	movaps	%xmm0, 208(%rsp)
	movq	232(%rsp), %rax
	movaps	%xmm0, 32(%rsp)
	movups	(%rax), %xmm1
	movaps	%xmm1, 96(%rsp)
.Ltmp677:
	.loc	2 0 2
	movaps	%xmm0, 192(%rsp)
	testq	%rbx, %rbx
	je	.LBB21_8
.Ltmp678:
	.loc	2 48 16 is_stmt 1
	movq	8(%rbx), %rsi
	.loc	2 48 6 is_stmt 0
	movl	$type..map.6string.7interface.4.5, %edi
	movq	%r15, %rdx
	callq	runtime.mapaccess2
.Ltmp679:
	.loc	2 48 3
	testb	$1, %dl
	jne	.LBB21_5
.Ltmp680:
	.loc	2 0 3
	movaps	32(%rsp), %xmm0
	movaps	%xmm0, 160(%rsp)
	movaps	96(%rsp), %xmm0
	movaps	%xmm0, 80(%rsp)
	.loc	2 52 4 is_stmt 1
	movq	8(%rbx), %rsi
	.loc	2 52 20 is_stmt 0
	movl	$type..map.6string.7interface.4.5, %edi
	leaq	160(%rsp), %rdx
.Ltmp681:
	callq	runtime.mapassign
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB21_10
.Ltmp682:
	movl	$type..interface.4.5, %edi
	movq	%rax, %rsi
	leaq	80(%rsp), %rdx
	callq	runtime.typedmemmove
	jmp	.LBB21_6
.Ltmp683:
	.p2align	4, 0x90
.LBB21_5:
	.loc	2 49 8 is_stmt 1
	movl	$string..d, %edi
	callq	runtime.newobject
.Ltmp684:
	movq	%rax, %r12
	movaps	32(%rsp), %xmm0
	movaps	%xmm0, 176(%rsp)
	movl	$string..d, %edi
	movq	%rax, %rsi
	movq	%r14, %rdx
	callq	runtime.typedmemmove
	movq	$string..d, 112(%rsp)
	movq	%r12, 120(%rsp)
	leaq	112(%rsp), %rax
	movq	%rax, 56(%rsp)
	movq	$1, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	72(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	56(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.118, %esi
	movl	$26, %edx
	movq	%r13, %rdi
	callq	fmt.Printf
	jmp	.LBB21_6
.Ltmp685:
.LBB21_10:
	.loc	2 52 20
	testq	%rax, %rax
	je	.LBB21_8
.Ltmp686:
	movaps	80(%rsp), %xmm0
	movups	%xmm0, (%rax)
.Ltmp687:
	.p2align	4, 0x90
.LBB21_6:
	.loc	2 47 2
	movq	%rbp, %rdi
	callq	runtime.mapiternext
	movq	224(%rsp), %rax
	testq	%rax, %rax
	jne	.LBB21_7
.Ltmp688:
.LBB21_12:
	.loc	2 0 2 is_stmt 0
	movq	48(%rsp), %rax
	.loc	2 54 2 is_stmt 1
	movq	%rbx, (%rax)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rax)
	addq	$344, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
.Ltmp689:
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Ltmp690:
.LBB21_8:
	.cfi_def_cfa_offset 400
	.loc	2 0 2 is_stmt 0
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end21:
	.size	command_line_arguments.NewContext, .Lfunc_end21-command_line_arguments.NewContext
	.cfi_endproc

	.section	.text.command_line_arguments.command_line_arguments.EvalError..hash,"ax",@progbits
	.globl	command_line_arguments.command_line_arguments.EvalError..hash
	.p2align	4, 0x90
	.type	command_line_arguments.command_line_arguments.EvalError..hash,@function
command_line_arguments.command_line_arguments.EvalError..hash:
.Lfunc_begin22:
	.loc	1 1 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB22_2
	movq	%r10, %rax
	movabsq	$8, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB22_2:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
.Ltmp691:
	.loc	1 1 1 prologue_end
	callq	runtime.interhash
	leaq	16(%rbx), %rdi
	movq	%rax, %rsi
	callq	runtime.strhash
	addq	$32, %rbx
.Ltmp692:
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	runtime.strhash
.Ltmp693:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Ltmp694:
.Lfunc_end22:
	.size	command_line_arguments.command_line_arguments.EvalError..hash, .Lfunc_end22-command_line_arguments.command_line_arguments.EvalError..hash
	.cfi_endproc

	.section	.text.command_line_arguments.command_line_arguments.EvalError..eq,"ax",@progbits
	.globl	command_line_arguments.command_line_arguments.EvalError..eq
	.p2align	4, 0x90
	.type	command_line_arguments.command_line_arguments.EvalError..eq,@function
command_line_arguments.command_line_arguments.EvalError..eq:
.Lfunc_begin23:
	.loc	1 1 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB23_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB23_2:
.Ltmp695:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
.Ltmp696:
	.loc	1 1 1 prologue_end
	testq	%rdi, %rdi
	je	.LBB23_9
.Ltmp697:
	.loc	1 0 1 is_stmt 0
	movq	%rsi, %r14
.Ltmp698:
	.loc	1 1 1
	testq	%rsi, %rsi
	je	.LBB23_9
.Ltmp699:
	.loc	1 0 1
	movq	%rdi, %rbx
.Ltmp700:
	.loc	1 1 1
	movq	(%rdi), %rdi
	movq	8(%rbx), %rsi
	movq	(%r14), %rdx
	movq	8(%r14), %rcx
	callq	runtime.ifaceeq
	cmpb	$1, %al
	jne	.LBB23_5
.Ltmp701:
	movq	16(%rbx), %rdi
	movq	24(%rbx), %rsi
	movq	16(%r14), %rdx
	movq	24(%r14), %rcx
	callq	runtime.eqstring
	cmpb	$1, %al
	jne	.LBB23_5
.Ltmp702:
	movq	32(%rbx), %rdi
	movq	40(%rbx), %rsi
	movq	32(%r14), %rdx
	movq	40(%r14), %rcx
	callq	runtime.eqstring
	cmpb	$1, %al
	sete	%al
	jmp	.LBB23_6
.Ltmp703:
.LBB23_5:
	xorl	%eax, %eax
.Ltmp704:
.LBB23_6:
	.loc	1 0 1
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
.Ltmp705:
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp706:
	.cfi_def_cfa_offset 8
	retq
.LBB23_9:
	.cfi_def_cfa_offset 32
.Ltmp707:
	.loc	1 1 1
	movl	$6, %edi
.Ltmp708:
	callq	__go_runtime_error
.Ltmp709:
.Lfunc_end23:
	.size	command_line_arguments.command_line_arguments.EvalError..eq, .Lfunc_end23-command_line_arguments.command_line_arguments.EvalError..eq
	.cfi_endproc

	.section	.text.command_line_arguments.EvalError.End..stub,"ax",@progbits
	.globl	command_line_arguments.EvalError.End..stub
	.p2align	4, 0x90
	.type	command_line_arguments.EvalError.End..stub,@function
command_line_arguments.EvalError.End..stub:
.Lfunc_begin24:
	.loc	9 5 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB24_2
	movq	%r10, %rax
	movabsq	$72, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB24_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$56, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
.Ltmp710:
	.loc	9 5 8 prologue_end
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	testq	%rbx, %rbx
	je	.LBB24_5
.Ltmp711:
	.loc	9 0 8 is_stmt 0
	movq	%rax, %r14
.Ltmp712:
	movups	(%rbx), %xmm0
	movups	16(%rbx), %xmm1
	movups	32(%rbx), %xmm2
	movaps	%xmm2, 32(%rsp)
	movaps	%xmm1, 16(%rsp)
	movaps	%xmm0, (%rsp)
	movq	%rsp, %rdx
	.loc	9 5 8
	movl	$command_line_arguments.EvalError..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
.Ltmp713:
	.loc	5 32 6 is_stmt 1
	testq	%r14, %r14
	je	.LBB24_5
.Ltmp714:
	movq	(%r14), %rax
	movq	8(%r14), %rdi
	callq	*8(%rax)
.Ltmp715:
	addq	$56, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
.Ltmp716:
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp717:
	.cfi_def_cfa_offset 8
	retq
.Ltmp718:
.LBB24_5:
	.cfi_def_cfa_offset 80
	.loc	5 0 6 is_stmt 0
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end24:
	.size	command_line_arguments.EvalError.End..stub, .Lfunc_end24-command_line_arguments.EvalError.End..stub
	.cfi_endproc

	.section	.text.command_line_arguments.EvalError.Error,"ax",@progbits
	.globl	command_line_arguments.EvalError.Error
	.p2align	4, 0x90
	.type	command_line_arguments.EvalError.Error,@function
command_line_arguments.EvalError.Error:
.Lfunc_begin25:
	.loc	5 38 0 is_stmt 1
	.cfi_startproc
	leaq	-264(%rsp), %r11
	cmpq	%fs:112, %r11
	ja	.LBB25_2
	movq	%r10, %rax
	movabsq	$264, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB25_2:
.Ltmp719:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$224, %rsp
	.cfi_def_cfa_offset 272
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	.loc	5 38 1 prologue_end
	testq	%rdi, %rdi
	je	.LBB25_4
.Ltmp720:
	.loc	5 0 1 is_stmt 0
	movups	(%rdi), %xmm0
	movups	16(%rdi), %xmm1
	movups	32(%rdi), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	leaq	176(%rsp), %rbx
.Ltmp721:
	.loc	5 39 47 is_stmt 1
	movq	%rbx, %rdi
.Ltmp722:
	callq	command_line_arguments.EvalError.Pos..stub
	movq	%rax, %r14
	.loc	5 39 56 is_stmt 0
	movq	%rbx, %rdi
	callq	command_line_arguments.EvalError.End..stub
	movq	%rax, %r15
	movaps	192(%rsp), %xmm0
	movaps	208(%rsp), %xmm1
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm1, 144(%rsp)
	.loc	5 39 13
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %r12
	movaps	160(%rsp), %xmm0
	movaps	%xmm0, 128(%rsp)
	leaq	128(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movl	$go_token.Pos..d, %edi
	callq	runtime.newobject
	movq	%rax, %r13
	movq	%r14, (%rax)
	movl	$go_token.Pos..d, %edi
	callq	runtime.newobject
	movq	%rax, %r14
	movq	%r15, (%rax)
	movl	$string..d, %edi
	callq	runtime.newobject
	movq	%rax, %rbx
	movaps	144(%rsp), %xmm0
	movaps	%xmm0, 112(%rsp)
	leaq	112(%rsp), %rdx
	movl	$string..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
	movq	$string..d, 48(%rsp)
	movq	%r12, 56(%rsp)
	movq	$go_token.Pos..d, 64(%rsp)
	movq	%r13, 72(%rsp)
	movq	$go_token.Pos..d, 80(%rsp)
	movq	%r14, 88(%rsp)
	movq	$string..d, 96(%rsp)
	movq	%rbx, 104(%rsp)
	leaq	48(%rsp), %rax
	movq	%rax, 24(%rsp)
	movq	$4, 32(%rsp)
	movq	$4, 40(%rsp)
	movq	40(%rsp), %rax
	movq	%rax, 16(%rsp)
	movups	24(%rsp), %xmm0
	movups	%xmm0, (%rsp)
	movl	$.Lconst.143, %edi
	movl	$13, %esi
	callq	fmt.Sprintf
	.loc	5 39 2
	addq	$224, %rsp
.Ltmp723:
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB25_4:
	.cfi_def_cfa_offset 272
.Ltmp724:
	.loc	5 38 1 is_stmt 1
	movl	$6, %edi
.Ltmp725:
	callq	__go_runtime_error
.Ltmp726:
.Lfunc_end25:
	.size	command_line_arguments.EvalError.Error, .Lfunc_end25-command_line_arguments.EvalError.Error
	.cfi_endproc

	.section	.text.command_line_arguments.EvalError.Pos..stub,"ax",@progbits
	.globl	command_line_arguments.EvalError.Pos..stub
	.p2align	4, 0x90
	.type	command_line_arguments.EvalError.Pos..stub,@function
command_line_arguments.EvalError.Pos..stub:
.Lfunc_begin26:
	.loc	9 5 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB26_2
	movq	%r10, %rax
	movabsq	$72, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB26_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$56, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
.Ltmp727:
	.loc	9 5 8 prologue_end
	movl	$command_line_arguments.EvalError..d, %edi
	callq	runtime.newobject
	testq	%rbx, %rbx
	je	.LBB26_5
.Ltmp728:
	.loc	9 0 8 is_stmt 0
	movq	%rax, %r14
.Ltmp729:
	movups	(%rbx), %xmm0
	movups	16(%rbx), %xmm1
	movups	32(%rbx), %xmm2
	movaps	%xmm2, 32(%rsp)
	movaps	%xmm1, 16(%rsp)
	movaps	%xmm0, (%rsp)
	movq	%rsp, %rdx
	.loc	9 5 8
	movl	$command_line_arguments.EvalError..d, %edi
	movq	%rax, %rsi
	callq	runtime.typedmemmove
.Ltmp730:
	.loc	5 32 6 is_stmt 1
	testq	%r14, %r14
	je	.LBB26_5
.Ltmp731:
	movq	(%r14), %rax
	movq	8(%r14), %rdi
	callq	*16(%rax)
.Ltmp732:
	addq	$56, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
.Ltmp733:
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp734:
	.cfi_def_cfa_offset 8
	retq
.Ltmp735:
.LBB26_5:
	.cfi_def_cfa_offset 80
	.loc	5 0 6 is_stmt 0
	movl	$6, %edi
	callq	__go_runtime_error
.Lfunc_end26:
	.size	command_line_arguments.EvalError.Pos..stub, .Lfunc_end26-command_line_arguments.EvalError.Pos..stub
	.cfi_endproc

	.section	.text.command_line_arguments.command_line_arguments..init0,"ax",@progbits
	.globl	command_line_arguments.command_line_arguments..init0
	.p2align	4, 0x90
	.type	command_line_arguments.command_line_arguments..init0,@function
command_line_arguments.command_line_arguments..init0:
.Lfunc_begin27:
	.loc	6 13 0 is_stmt 1
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB27_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB27_2:
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
.Ltmp736:
	.loc	6 14 15 prologue_end
	cmpq	$0, command_line_arguments.PkgLogger(%rip)
	je	.LBB27_3
	.loc	6 0 15 is_stmt 0
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	retq
.LBB27_3:
	.cfi_def_cfa_offset 32
	.loc	6 15 15 is_stmt 1
	movl	$github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger..d, %edi
	callq	runtime.newobject
	.loc	6 15 13 is_stmt 0
	movq	$pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger, 8(%rsp)
	movq	%rax, 16(%rsp)
	cmpl	$0, runtime.writeBarrier(%rip)
	je	.LBB27_6
	.loc	6 0 13
	leaq	8(%rsp), %rdx
	.loc	6 15 13
	movl	$command_line_arguments..command_line_arguments.logger..d, %edi
	movl	$command_line_arguments.PkgLogger, %esi
	callq	runtime.typedmemmove
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	retq
.LBB27_6:
	.cfi_def_cfa_offset 32
	movups	8(%rsp), %xmm0
	movups	%xmm0, command_line_arguments.PkgLogger(%rip)
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	retq
.Ltmp737:
.Lfunc_end27:
	.size	command_line_arguments.command_line_arguments..init0, .Lfunc_end27-command_line_arguments.command_line_arguments..init0
	.cfi_endproc

	.type	.Lconst.0,@object
	.section	.rodata..Lconst.0,"a",@progbits
.Lconst.0:
	.asciz	"Cannot compare, mismatch types %v and %v"
	.size	.Lconst.0, 41

	.type	type...6.7uint8,@object
	.section	.rodata.type...6.7uint8,"aG",@progbits,type...6.7uint8,comdat
	.weak	type...6.7uint8
	.p2align	4
type...6.7uint8:
	.quad	24
	.quad	8
	.long	264632103
	.byte	23
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C1
	.quad	0
	.quad	0
	.quad	uint8..d
	.size	type...6.7uint8, 80

	.type	gcbits..ba,@object
	.section	.rodata.gcbits..ba,"aG",@progbits,gcbits..ba,comdat
	.weak	gcbits..ba
gcbits..ba:
	.byte	1
	.size	gcbits..ba, 1

	.type	.Lconst.2,@object
	.section	.rodata..Lconst.2,"a",@progbits
.Lconst.2:
	.asciz	"[]uint8"
	.size	.Lconst.2, 8

	.type	go..C1,@object
	.section	.rodata.go..C1,"a",@progbits
	.p2align	3
go..C1:
	.quad	.Lconst.2
	.quad	7
	.size	go..C1, 16

	.type	uint8..d,@object
	.section	.rodata.uint8..d,"aG",@progbits,uint8..d,comdat
	.weak	uint8..d
	.p2align	4
uint8..d:
	.quad	1
	.quad	0
	.long	264632089
	.byte	136
	.byte	1
	.byte	1
	.zero	1
	.quad	runtime.memhash8..f
	.quad	runtime.memequal8..f
	.quad	0
	.quad	go..C2
	.quad	go..C5
	.quad	type...1uint8
	.size	uint8..d, 72

	.type	.Lconst.3,@object
	.section	.rodata..Lconst.3,"a",@progbits
.Lconst.3:
	.asciz	"uint8"
	.size	.Lconst.3, 6

	.type	go..C2,@object
	.section	.rodata.go..C2,"a",@progbits
	.p2align	3
go..C2:
	.quad	.Lconst.3
	.quad	5
	.size	go..C2, 16

	.type	go..C3,@object
	.section	.rodata.go..C3,"a",@progbits
	.p2align	3
go..C3:
	.quad	.Lconst.3
	.quad	5
	.size	go..C3, 16

	.type	go..C4,@object
	.section	.bss.go..C4,"aw",@nobits
	.p2align	4
go..C4:
	.zero	40
	.size	go..C4, 40

	.type	go..C5,@object
	.section	.rodata.go..C5,"a",@progbits
	.p2align	4
go..C5:
	.quad	go..C3
	.quad	0
	.quad	go..C4
	.quad	0
	.quad	0
	.size	go..C5, 40

	.type	type...1uint8,@object
	.section	.rodata.type...1uint8,"aG",@progbits,type...1uint8,comdat
	.weak	type...1uint8
	.p2align	4
type...1uint8:
	.quad	8
	.quad	8
	.long	4234113433
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C6
	.quad	0
	.quad	0
	.quad	uint8..d
	.size	type...1uint8, 80

	.type	.Lconst.4,@object
	.section	.rodata..Lconst.4,"a",@progbits
.Lconst.4:
	.asciz	"*uint8"
	.size	.Lconst.4, 7

	.type	go..C6,@object
	.section	.rodata.go..C6,"a",@progbits
	.p2align	3
go..C6:
	.quad	.Lconst.4
	.quad	6
	.size	go..C6, 16

	.type	string..d,@object
	.section	.rodata.string..d,"aG",@progbits,string..d,comdat
	.weak	string..d
	.p2align	4
string..d:
	.quad	16
	.quad	8
	.long	2296014490
	.byte	24
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.strhash..f
	.quad	runtime.strequal..f
	.quad	gcbits..ba
	.quad	go..C7
	.quad	go..C10
	.quad	type...1string
	.size	string..d, 72

	.type	.Lconst.5,@object
	.section	.rodata..Lconst.5,"a",@progbits
.Lconst.5:
	.asciz	"string"
	.size	.Lconst.5, 7

	.type	go..C7,@object
	.section	.rodata.go..C7,"a",@progbits
	.p2align	3
go..C7:
	.quad	.Lconst.5
	.quad	6
	.size	go..C7, 16

	.type	go..C8,@object
	.section	.rodata.go..C8,"a",@progbits
	.p2align	3
go..C8:
	.quad	.Lconst.5
	.quad	6
	.size	go..C8, 16

	.type	go..C9,@object
	.section	.bss.go..C9,"aw",@nobits
	.p2align	4
go..C9:
	.zero	40
	.size	go..C9, 40

	.type	go..C10,@object
	.section	.rodata.go..C10,"a",@progbits
	.p2align	4
go..C10:
	.quad	go..C8
	.quad	0
	.quad	go..C9
	.quad	0
	.quad	0
	.size	go..C10, 40

	.type	type...1string,@object
	.section	.rodata.type...1string,"aG",@progbits,type...1string,comdat
	.weak	type...1string
	.p2align	4
type...1string:
	.quad	8
	.quad	8
	.long	2376493481
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C11
	.quad	0
	.quad	0
	.quad	string..d
	.size	type...1string, 80

	.type	.Lconst.6,@object
	.section	.rodata..Lconst.6,"a",@progbits
.Lconst.6:
	.asciz	"*string"
	.size	.Lconst.6, 8

	.type	go..C11,@object
	.section	.rodata.go..C11,"a",@progbits
	.p2align	3
go..C11:
	.quad	.Lconst.6
	.quad	7
	.size	go..C11, 16

	.type	.Lconst.7,@object
	.section	.rodata..Lconst.7,"a",@progbits
.Lconst.7:
	.asciz	"compare '%+v' is '%v'\n"
	.size	.Lconst.7, 23

	.type	bool..d,@object
	.section	.rodata.bool..d,"aG",@progbits,bool..d,comdat
	.weak	bool..d
	.p2align	4
bool..d:
	.quad	1
	.quad	0
	.long	1537849745
	.byte	129
	.byte	1
	.byte	1
	.zero	1
	.quad	runtime.memhash8..f
	.quad	runtime.memequal8..f
	.quad	0
	.quad	go..C12
	.quad	go..C15
	.quad	type...1bool
	.size	bool..d, 72

	.type	.Lconst.9,@object
	.section	.rodata..Lconst.9,"a",@progbits
.Lconst.9:
	.asciz	"bool"
	.size	.Lconst.9, 5

	.type	go..C12,@object
	.section	.rodata.go..C12,"a",@progbits
	.p2align	3
go..C12:
	.quad	.Lconst.9
	.quad	4
	.size	go..C12, 16

	.type	go..C13,@object
	.section	.rodata.go..C13,"a",@progbits
	.p2align	3
go..C13:
	.quad	.Lconst.9
	.quad	4
	.size	go..C13, 16

	.type	go..C14,@object
	.section	.bss.go..C14,"aw",@nobits
	.p2align	4
go..C14:
	.zero	40
	.size	go..C14, 40

	.type	go..C15,@object
	.section	.rodata.go..C15,"a",@progbits
	.p2align	4
go..C15:
	.quad	go..C13
	.quad	0
	.quad	go..C14
	.quad	0
	.quad	0
	.size	go..C15, 40

	.type	type...1bool,@object
	.section	.rodata.type...1bool,"aG",@progbits,type...1bool,comdat
	.weak	type...1bool
	.p2align	4
type...1bool:
	.quad	8
	.quad	8
	.long	3130759449
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C16
	.quad	0
	.quad	0
	.quad	bool..d
	.size	type...1bool, 80

	.type	.Lconst.10,@object
	.section	.rodata..Lconst.10,"a",@progbits
.Lconst.10:
	.asciz	"*bool"
	.size	.Lconst.10, 6

	.type	go..C16,@object
	.section	.rodata.go..C16,"a",@progbits
	.p2align	3
go..C16:
	.quad	.Lconst.10
	.quad	5
	.size	go..C16, 16

	.type	command_line_arguments.types,@object
	.section	.bss.command_line_arguments.types,"aw",@nobits
	.p2align	3
command_line_arguments.types:
	.quad	0
	.size	command_line_arguments.types, 8

	.type	.Lconst.12,@object
	.section	.rodata..Lconst.12,"a",@progbits
.Lconst.12:
	.asciz	"true"
	.size	.Lconst.12, 5

	.type	.Lconst.13,@object
	.section	.rodata..Lconst.13,"a",@progbits
.Lconst.13:
	.asciz	"false"
	.size	.Lconst.13, 6

	.type	.Lconst.14,@object
	.section	.rodata..Lconst.14,"a",@progbits
	.p2align	3
.Lconst.14:
	.quad	.Lconst.12
	.quad	4
	.size	.Lconst.14, 16

	.type	.Lconst.15,@object
	.section	.rodata..Lconst.15,"a",@progbits
	.p2align	3
.Lconst.15:
	.quad	.Lconst.13
	.quad	5
	.size	.Lconst.15, 16

	.type	type..map.6string.7interface.4.5,@object
	.section	.rodata.type..map.6string.7interface.4.5,"aG",@progbits,type..map.6string.7interface.4.5,comdat
	.weak	type..map.6string.7interface.4.5
	.p2align	4
type..map.6string.7interface.4.5:
	.quad	8
	.quad	8
	.long	2296014522
	.byte	21
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C17
	.quad	0
	.quad	0
	.quad	string..d
	.quad	type..interface.4.5
	.quad	type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.quad	type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5
	.byte	16
	.byte	0
	.byte	16
	.byte	0
	.short	272
	.byte	1
	.byte	1
	.size	type..map.6string.7interface.4.5, 112

	.type	.Lconst.16,@object
	.section	.rodata..Lconst.16,"a",@progbits
.Lconst.16:
	.asciz	"map[string]interface {}"
	.size	.Lconst.16, 24

	.type	go..C17,@object
	.section	.rodata.go..C17,"a",@progbits
	.p2align	3
go..C17:
	.quad	.Lconst.16
	.quad	23
	.size	go..C17, 16

	.type	type..interface.4.5,@object
	.section	.rodata.type..interface.4.5,"aG",@progbits,type..interface.4.5,comdat
	.weak	type..interface.4.5
	.p2align	4
type..interface.4.5:
	.quad	16
	.quad	16
	.long	16
	.byte	20
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.nilinterhash..f
	.quad	runtime.nilinterequal..f
	.quad	gcbits..da
	.quad	go..C18
	.quad	0
	.quad	0
	.quad	go..C19
	.quad	0
	.quad	0
	.size	type..interface.4.5, 96

	.type	gcbits..da,@object
	.section	.rodata.gcbits..da,"aG",@progbits,gcbits..da,comdat
	.weak	gcbits..da
gcbits..da:
	.byte	3
	.size	gcbits..da, 1

	.type	.Lconst.17,@object
	.section	.rodata..Lconst.17,"a",@progbits
.Lconst.17:
	.asciz	"interface {}"
	.size	.Lconst.17, 13

	.type	go..C18,@object
	.section	.rodata.go..C18,"a",@progbits
	.p2align	3
go..C18:
	.quad	.Lconst.17
	.quad	12
	.size	go..C18, 16

	.type	go..C19,@object
	.section	.bss.go..C19,"aw",@nobits
	.p2align	4
go..C19:
	.zero	24
	.size	go..C19, 24

	.type	type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,@object
	.section	.rodata.type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,"aG",@progbits,type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,comdat
	.weak	type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.p2align	4
type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5:
	.quad	272
	.quad	272
	.long	429210724
	.byte	25
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..kwkEGGpa
	.quad	go..C20
	.quad	0
	.quad	0
	.quad	go..C30
	.quad	4
	.quad	4
	.size	type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, 96

	.type	gcbits..kwkEGGpa,@object
	.section	.rodata.gcbits..kwkEGGpa,"aG",@progbits,gcbits..kwkEGGpa,comdat
	.weak	gcbits..kwkEGGpa
gcbits..kwkEGGpa:
	.ascii	"\252\252\376\377\003"
	.size	gcbits..kwkEGGpa, 5

	.type	.Lconst.18,@object
	.section	.rodata..Lconst.18,"a",@progbits
.Lconst.18:
	.asciz	"struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }"
	.size	.Lconst.18, 80

	.type	go..C20,@object
	.section	.rodata.go..C20,"a",@progbits
	.p2align	3
go..C20:
	.quad	.Lconst.18
	.quad	79
	.size	go..C20, 16

	.type	.Lconst.19,@object
	.section	.rodata..Lconst.19,"a",@progbits
.Lconst.19:
	.asciz	"topbits"
	.size	.Lconst.19, 8

	.type	go..C21,@object
	.section	.rodata.go..C21,"a",@progbits
	.p2align	3
go..C21:
	.quad	.Lconst.19
	.quad	7
	.size	go..C21, 16

	.type	type...68x.7uint8,@object
	.section	.rodata.type...68x.7uint8,"aG",@progbits,type...68x.7uint8,comdat
	.weak	type...68x.7uint8
	.p2align	4
type...68x.7uint8:
	.quad	8
	.quad	0
	.long	529264193
	.byte	145
	.byte	1
	.byte	1
	.zero	1
	.quad	0
	.quad	0
	.quad	0
	.quad	go..C22
	.quad	0
	.quad	0
	.quad	uint8..d
	.quad	type...6.7uint8
	.quad	8
	.size	type...68x.7uint8, 96

	.type	.Lconst.20,@object
	.section	.rodata..Lconst.20,"a",@progbits
.Lconst.20:
	.asciz	"[8]uint8"
	.size	.Lconst.20, 9

	.type	go..C22,@object
	.section	.rodata.go..C22,"a",@progbits
	.p2align	3
go..C22:
	.quad	.Lconst.20
	.quad	8
	.size	go..C22, 16

	.type	.Lconst.21,@object
	.section	.rodata..Lconst.21,"a",@progbits
.Lconst.21:
	.asciz	"keys"
	.size	.Lconst.21, 5

	.type	go..C23,@object
	.section	.rodata.go..C23,"a",@progbits
	.p2align	3
go..C23:
	.quad	.Lconst.21
	.quad	4
	.size	go..C23, 16

	.type	type...68x.7string,@object
	.section	.rodata.type...68x.7string,"aG",@progbits,type...68x.7string,comdat
	.weak	type...68x.7string
	.p2align	4
type...68x.7string:
	.quad	128
	.quad	120
	.long	297061699
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..wkwa
	.quad	go..C24
	.quad	0
	.quad	0
	.quad	string..d
	.quad	type...6.7string
	.quad	8
	.size	type...68x.7string, 96

	.type	gcbits..wkwa,@object
	.section	.rodata.gcbits..wkwa,"aG",@progbits,gcbits..wkwa,comdat
	.weak	gcbits..wkwa
gcbits..wkwa:
	.zero	2,85
	.size	gcbits..wkwa, 2

	.type	.Lconst.22,@object
	.section	.rodata..Lconst.22,"a",@progbits
.Lconst.22:
	.asciz	"[8]string"
	.size	.Lconst.22, 10

	.type	go..C24,@object
	.section	.rodata.go..C24,"a",@progbits
	.p2align	3
go..C24:
	.quad	.Lconst.22
	.quad	9
	.size	go..C24, 16

	.type	type...6.7string,@object
	.section	.rodata.type...6.7string,"aG",@progbits,type...6.7string,comdat
	.weak	type...6.7string
	.p2align	4
type...6.7string:
	.quad	24
	.quad	8
	.long	2296014504
	.byte	23
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C25
	.quad	0
	.quad	0
	.quad	string..d
	.size	type...6.7string, 80

	.type	.Lconst.23,@object
	.section	.rodata..Lconst.23,"a",@progbits
.Lconst.23:
	.asciz	"[]string"
	.size	.Lconst.23, 9

	.type	go..C25,@object
	.section	.rodata.go..C25,"a",@progbits
	.p2align	3
go..C25:
	.quad	.Lconst.23
	.quad	8
	.size	go..C25, 16

	.type	.Lconst.24,@object
	.section	.rodata..Lconst.24,"a",@progbits
.Lconst.24:
	.asciz	"values"
	.size	.Lconst.24, 7

	.type	go..C26,@object
	.section	.rodata.go..C26,"a",@progbits
	.p2align	3
go..C26:
	.quad	.Lconst.24
	.quad	6
	.size	go..C26, 16

	.type	type...68x.7interface.4.5,@object
	.section	.rodata.type...68x.7interface.4.5,"aG",@progbits,type...68x.7interface.4.5,comdat
	.weak	type...68x.7interface.4.5
	.p2align	4
type...68x.7interface.4.5:
	.quad	128
	.quad	128
	.long	47
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..GGGb
	.quad	go..C27
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.quad	type...6.7interface.4.5
	.quad	8
	.size	type...68x.7interface.4.5, 96

	.type	gcbits..GGGb,@object
	.section	.rodata.gcbits..GGGb,"aG",@progbits,gcbits..GGGb,comdat
	.weak	gcbits..GGGb
gcbits..GGGb:
	.zero	2,255
	.size	gcbits..GGGb, 2

	.type	.Lconst.25,@object
	.section	.rodata..Lconst.25,"a",@progbits
.Lconst.25:
	.asciz	"[8]interface {}"
	.size	.Lconst.25, 16

	.type	go..C27,@object
	.section	.rodata.go..C27,"a",@progbits
	.p2align	3
go..C27:
	.quad	.Lconst.25
	.quad	15
	.size	go..C27, 16

	.type	type...6.7interface.4.5,@object
	.section	.rodata.type...6.7interface.4.5,"aG",@progbits,type...6.7interface.4.5,comdat
	.weak	type...6.7interface.4.5
	.p2align	4
type...6.7interface.4.5:
	.quad	24
	.quad	8
	.long	30
	.byte	23
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C28
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.size	type...6.7interface.4.5, 80

	.type	.Lconst.26,@object
	.section	.rodata..Lconst.26,"a",@progbits
.Lconst.26:
	.asciz	"[]interface {}"
	.size	.Lconst.26, 15

	.type	go..C28,@object
	.section	.rodata.go..C28,"a",@progbits
	.p2align	3
go..C28:
	.quad	.Lconst.26
	.quad	14
	.size	go..C28, 16

	.type	.Lconst.27,@object
	.section	.rodata..Lconst.27,"a",@progbits
.Lconst.27:
	.asciz	"overflow"
	.size	.Lconst.27, 9

	.type	go..C29,@object
	.section	.rodata.go..C29,"a",@progbits
	.p2align	3
go..C29:
	.quad	.Lconst.27
	.quad	8
	.size	go..C29, 16

	.type	go..C30,@object
	.section	.data.go..C30,"aw",@progbits
	.p2align	4
go..C30:
	.quad	go..C21
	.quad	0
	.quad	type...68x.7uint8
	.quad	0
	.quad	0
	.quad	go..C23
	.quad	0
	.quad	type...68x.7string
	.quad	0
	.quad	16
	.quad	go..C26
	.quad	0
	.quad	type...68x.7interface.4.5
	.quad	0
	.quad	272
	.quad	go..C29
	.quad	0
	.quad	unsafe.Pointer..d
	.quad	0
	.quad	528
	.size	go..C30, 160

	.type	type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5,@object
	.section	.rodata.type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5,"aG",@progbits,type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5,comdat
	.weak	type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5
	.p2align	4
type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5:
	.quad	48
	.quad	48
	.long	2181618148
	.byte	25
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..mb
	.quad	go..C31
	.quad	0
	.quad	0
	.quad	go..C62
	.quad	9
	.quad	9
	.size	type..struct.4.4x.5count.0int.2flags.0uint8.2B.0uint8.2noverflow.0uint16.2hash0.0uint32.2buckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2oldbuckets.0.1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5.2nevacuate.0uintptr.2extra.0.1.4void.5.5, 96

	.type	gcbits..mb,@object
	.section	.rodata.gcbits..mb,"aG",@progbits,gcbits..mb,comdat
	.weak	gcbits..mb
gcbits..mb:
	.byte	44
	.size	gcbits..mb, 1

	.type	.Lconst.28,@object
	.section	.rodata..Lconst.28,"a",@progbits
.Lconst.28:
	.asciz	"struct { count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets *struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }; oldbuckets *struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }; nevacuate uintptr; extra * }"
	.size	.Lconst.28, 286

	.type	go..C31,@object
	.section	.rodata.go..C31,"a",@progbits
	.p2align	3
go..C31:
	.quad	.Lconst.28
	.quad	285
	.size	go..C31, 16

	.type	.Lconst.29,@object
	.section	.rodata..Lconst.29,"a",@progbits
.Lconst.29:
	.asciz	"count"
	.size	.Lconst.29, 6

	.type	go..C32,@object
	.section	.rodata.go..C32,"a",@progbits
	.p2align	3
go..C32:
	.quad	.Lconst.29
	.quad	5
	.size	go..C32, 16

	.type	int..d,@object
	.section	.rodata.int..d,"aG",@progbits,int..d,comdat
	.weak	int..d
	.p2align	4
int..d:
	.quad	8
	.quad	0
	.long	876704034
	.byte	130
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	0
	.quad	go..C33
	.quad	go..C36
	.quad	type...1int
	.size	int..d, 72

	.type	.Lconst.30,@object
	.section	.rodata..Lconst.30,"a",@progbits
.Lconst.30:
	.asciz	"int"
	.size	.Lconst.30, 4

	.type	go..C33,@object
	.section	.rodata.go..C33,"a",@progbits
	.p2align	3
go..C33:
	.quad	.Lconst.30
	.quad	3
	.size	go..C33, 16

	.type	go..C34,@object
	.section	.rodata.go..C34,"a",@progbits
	.p2align	3
go..C34:
	.quad	.Lconst.30
	.quad	3
	.size	go..C34, 16

	.type	go..C35,@object
	.section	.bss.go..C35,"aw",@nobits
	.p2align	4
go..C35:
	.zero	40
	.size	go..C35, 40

	.type	go..C36,@object
	.section	.rodata.go..C36,"a",@progbits
	.p2align	4
go..C36:
	.quad	go..C34
	.quad	0
	.quad	go..C35
	.quad	0
	.quad	0
	.size	go..C36, 40

	.type	type...1int,@object
	.section	.rodata.type...1int,"aG",@progbits,type...1int,comdat
	.weak	type...1int
	.p2align	4
type...1int:
	.quad	8
	.quad	8
	.long	1142362665
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C37
	.quad	0
	.quad	0
	.quad	int..d
	.size	type...1int, 80

	.type	.Lconst.31,@object
	.section	.rodata..Lconst.31,"a",@progbits
.Lconst.31:
	.asciz	"*int"
	.size	.Lconst.31, 5

	.type	go..C37,@object
	.section	.rodata.go..C37,"a",@progbits
	.p2align	3
go..C37:
	.quad	.Lconst.31
	.quad	4
	.size	go..C37, 16

	.type	.Lconst.32,@object
	.section	.rodata..Lconst.32,"a",@progbits
.Lconst.32:
	.asciz	"flags"
	.size	.Lconst.32, 6

	.type	go..C38,@object
	.section	.rodata.go..C38,"a",@progbits
	.p2align	3
go..C38:
	.quad	.Lconst.32
	.quad	5
	.size	go..C38, 16

	.type	.Lconst.33,@object
	.section	.rodata..Lconst.33,"a",@progbits
.Lconst.33:
	.asciz	"B"
	.size	.Lconst.33, 2

	.type	go..C39,@object
	.section	.rodata.go..C39,"a",@progbits
	.p2align	3
go..C39:
	.quad	.Lconst.33
	.quad	1
	.size	go..C39, 16

	.type	.Lconst.34,@object
	.section	.rodata..Lconst.34,"a",@progbits
.Lconst.34:
	.asciz	"noverflow"
	.size	.Lconst.34, 10

	.type	go..C40,@object
	.section	.rodata.go..C40,"a",@progbits
	.p2align	3
go..C40:
	.quad	.Lconst.34
	.quad	9
	.size	go..C40, 16

	.type	uint16..d,@object
	.section	.rodata.uint16..d,"aG",@progbits,uint16..d,comdat
	.weak	uint16..d
	.p2align	4
uint16..d:
	.quad	2
	.quad	0
	.long	76732288
	.byte	137
	.byte	2
	.byte	2
	.zero	1
	.quad	runtime.memhash16..f
	.quad	runtime.memequal16..f
	.quad	0
	.quad	go..C41
	.quad	go..C44
	.quad	type...1uint16
	.size	uint16..d, 72

	.type	.Lconst.35,@object
	.section	.rodata..Lconst.35,"a",@progbits
.Lconst.35:
	.asciz	"uint16"
	.size	.Lconst.35, 7

	.type	go..C41,@object
	.section	.rodata.go..C41,"a",@progbits
	.p2align	3
go..C41:
	.quad	.Lconst.35
	.quad	6
	.size	go..C41, 16

	.type	go..C42,@object
	.section	.rodata.go..C42,"a",@progbits
	.p2align	3
go..C42:
	.quad	.Lconst.35
	.quad	6
	.size	go..C42, 16

	.type	go..C43,@object
	.section	.bss.go..C43,"aw",@nobits
	.p2align	4
go..C43:
	.zero	40
	.size	go..C43, 40

	.type	go..C44,@object
	.section	.rodata.go..C44,"a",@progbits
	.p2align	4
go..C44:
	.quad	go..C42
	.quad	0
	.quad	go..C43
	.quad	0
	.quad	0
	.size	go..C44, 40

	.type	type...1uint16,@object
	.section	.rodata.type...1uint16,"aG",@progbits,type...1uint16,comdat
	.weak	type...1uint16
	.p2align	4
type...1uint16:
	.quad	8
	.quad	8
	.long	1227716617
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C45
	.quad	0
	.quad	0
	.quad	uint16..d
	.size	type...1uint16, 80

	.type	.Lconst.36,@object
	.section	.rodata..Lconst.36,"a",@progbits
.Lconst.36:
	.asciz	"*uint16"
	.size	.Lconst.36, 8

	.type	go..C45,@object
	.section	.rodata.go..C45,"a",@progbits
	.p2align	3
go..C45:
	.quad	.Lconst.36
	.quad	7
	.size	go..C45, 16

	.type	.Lconst.37,@object
	.section	.rodata..Lconst.37,"a",@progbits
.Lconst.37:
	.asciz	"hash0"
	.size	.Lconst.37, 6

	.type	go..C46,@object
	.section	.rodata.go..C46,"a",@progbits
	.p2align	3
go..C46:
	.quad	.Lconst.37
	.quad	5
	.size	go..C46, 16

	.type	uint32..d,@object
	.section	.rodata.uint32..d,"aG",@progbits,uint32..d,comdat
	.weak	uint32..d
	.p2align	4
uint32..d:
	.quad	4
	.quad	0
	.long	278357906
	.byte	138
	.byte	4
	.byte	4
	.zero	1
	.quad	runtime.memhash32..f
	.quad	runtime.memequal32..f
	.quad	0
	.quad	go..C47
	.quad	go..C50
	.quad	type...1uint32
	.size	uint32..d, 72

	.type	.Lconst.38,@object
	.section	.rodata..Lconst.38,"a",@progbits
.Lconst.38:
	.asciz	"uint32"
	.size	.Lconst.38, 7

	.type	go..C47,@object
	.section	.rodata.go..C47,"a",@progbits
	.p2align	3
go..C47:
	.quad	.Lconst.38
	.quad	6
	.size	go..C47, 16

	.type	go..C48,@object
	.section	.rodata.go..C48,"a",@progbits
	.p2align	3
go..C48:
	.quad	.Lconst.38
	.quad	6
	.size	go..C48, 16

	.type	go..C49,@object
	.section	.bss.go..C49,"aw",@nobits
	.p2align	4
go..C49:
	.zero	40
	.size	go..C49, 40

	.type	go..C50,@object
	.section	.rodata.go..C50,"a",@progbits
	.p2align	4
go..C50:
	.quad	go..C48
	.quad	0
	.quad	go..C49
	.quad	0
	.quad	0
	.size	go..C50, 40

	.type	type...1uint32,@object
	.section	.rodata.type...1uint32,"aG",@progbits,type...1uint32,comdat
	.weak	type...1uint32
	.p2align	4
type...1uint32:
	.quad	8
	.quad	8
	.long	158759209
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C51
	.quad	0
	.quad	0
	.quad	uint32..d
	.size	type...1uint32, 80

	.type	.Lconst.39,@object
	.section	.rodata..Lconst.39,"a",@progbits
.Lconst.39:
	.asciz	"*uint32"
	.size	.Lconst.39, 8

	.type	go..C51,@object
	.section	.rodata.go..C51,"a",@progbits
	.p2align	3
go..C51:
	.quad	.Lconst.39
	.quad	7
	.size	go..C51, 16

	.type	.Lconst.40,@object
	.section	.rodata..Lconst.40,"a",@progbits
.Lconst.40:
	.asciz	"buckets"
	.size	.Lconst.40, 8

	.type	go..C52,@object
	.section	.rodata.go..C52,"a",@progbits
	.p2align	3
go..C52:
	.quad	.Lconst.40
	.quad	7
	.size	go..C52, 16

	.type	type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,@object
	.section	.rodata.type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,"aG",@progbits,type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5,comdat
	.weak	type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.p2align	4
type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5:
	.quad	8
	.quad	8
	.long	2572404297
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C53
	.quad	0
	.quad	0
	.quad	type..struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.size	type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5, 80

	.type	.Lconst.41,@object
	.section	.rodata..Lconst.41,"a",@progbits
.Lconst.41:
	.asciz	"*struct { topbits [8]uint8; keys [8]string; values [8]interface {}; overflow * }"
	.size	.Lconst.41, 81

	.type	go..C53,@object
	.section	.rodata.go..C53,"a",@progbits
	.p2align	3
go..C53:
	.quad	.Lconst.41
	.quad	80
	.size	go..C53, 16

	.type	.Lconst.42,@object
	.section	.rodata..Lconst.42,"a",@progbits
.Lconst.42:
	.asciz	"oldbuckets"
	.size	.Lconst.42, 11

	.type	go..C54,@object
	.section	.rodata.go..C54,"a",@progbits
	.p2align	3
go..C54:
	.quad	.Lconst.42
	.quad	10
	.size	go..C54, 16

	.type	.Lconst.43,@object
	.section	.rodata..Lconst.43,"a",@progbits
.Lconst.43:
	.asciz	"nevacuate"
	.size	.Lconst.43, 10

	.type	go..C55,@object
	.section	.rodata.go..C55,"a",@progbits
	.p2align	3
go..C55:
	.quad	.Lconst.43
	.quad	9
	.size	go..C55, 16

	.type	uintptr..d,@object
	.section	.rodata.uintptr..d,"aG",@progbits,uintptr..d,comdat
	.weak	uintptr..d
	.p2align	4
uintptr..d:
	.quad	8
	.quad	0
	.long	2806773995
	.byte	140
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	0
	.quad	go..C56
	.quad	go..C59
	.quad	type...1uintptr
	.size	uintptr..d, 72

	.type	.Lconst.44,@object
	.section	.rodata..Lconst.44,"a",@progbits
.Lconst.44:
	.asciz	"uintptr"
	.size	.Lconst.44, 8

	.type	go..C56,@object
	.section	.rodata.go..C56,"a",@progbits
	.p2align	3
go..C56:
	.quad	.Lconst.44
	.quad	7
	.size	go..C56, 16

	.type	go..C57,@object
	.section	.rodata.go..C57,"a",@progbits
	.p2align	3
go..C57:
	.quad	.Lconst.44
	.quad	7
	.size	go..C57, 16

	.type	go..C58,@object
	.section	.bss.go..C58,"aw",@nobits
	.p2align	4
go..C58:
	.zero	40
	.size	go..C58, 40

	.type	go..C59,@object
	.section	.rodata.go..C59,"a",@progbits
	.p2align	4
go..C59:
	.quad	go..C57
	.quad	0
	.quad	go..C58
	.quad	0
	.quad	0
	.size	go..C59, 40

	.type	type...1uintptr,@object
	.section	.rodata.type...1uintptr,"aG",@progbits,type...1uintptr,comdat
	.weak	type...1uintptr
	.p2align	4
type...1uintptr:
	.quad	8
	.quad	8
	.long	1958710969
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C60
	.quad	0
	.quad	0
	.quad	uintptr..d
	.size	type...1uintptr, 80

	.type	.Lconst.45,@object
	.section	.rodata..Lconst.45,"a",@progbits
.Lconst.45:
	.asciz	"*uintptr"
	.size	.Lconst.45, 9

	.type	go..C60,@object
	.section	.rodata.go..C60,"a",@progbits
	.p2align	3
go..C60:
	.quad	.Lconst.45
	.quad	8
	.size	go..C60, 16

	.type	.Lconst.46,@object
	.section	.rodata..Lconst.46,"a",@progbits
.Lconst.46:
	.asciz	"extra"
	.size	.Lconst.46, 6

	.type	go..C61,@object
	.section	.rodata.go..C61,"a",@progbits
	.p2align	3
go..C61:
	.quad	.Lconst.46
	.quad	5
	.size	go..C61, 16

	.type	go..C62,@object
	.section	.data.go..C62,"aw",@progbits
	.p2align	4
go..C62:
	.quad	go..C32
	.quad	0
	.quad	int..d
	.quad	0
	.quad	0
	.quad	go..C38
	.quad	0
	.quad	uint8..d
	.quad	0
	.quad	16
	.quad	go..C39
	.quad	0
	.quad	uint8..d
	.quad	0
	.quad	18
	.quad	go..C40
	.quad	0
	.quad	uint16..d
	.quad	0
	.quad	20
	.quad	go..C46
	.quad	0
	.quad	uint32..d
	.quad	0
	.quad	24
	.quad	go..C52
	.quad	0
	.quad	type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.quad	0
	.quad	32
	.quad	go..C54
	.quad	0
	.quad	type...1struct.4.4x.5topbits.0.68x.7uint8.2keys.0.68x.7string.2values.0.68x.7interface.4.5.2overflow.0.1.4void.5.5
	.quad	0
	.quad	48
	.quad	go..C55
	.quad	0
	.quad	uintptr..d
	.quad	0
	.quad	64
	.quad	go..C61
	.quad	0
	.quad	unsafe.Pointer..d
	.quad	0
	.quad	80
	.size	go..C62, 360

	.type	command_line_arguments.Scope..d,@object
	.section	.rodata.command_line_arguments.Scope..d,"a",@progbits
	.globl	command_line_arguments.Scope..d
	.p2align	4
command_line_arguments.Scope..d:
	.quad	8
	.quad	8
	.long	3956728928
	.byte	25
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C63
	.quad	go..C67
	.quad	type...1command_line_arguments.Scope
	.quad	go..C87
	.quad	1
	.quad	1
	.size	command_line_arguments.Scope..d, 96

	.type	.Lconst.47,@object
	.section	.rodata..Lconst.47,"a",@progbits
.Lconst.47:
	.asciz	"\tcommand_line_arguments\teval.Scope"
	.size	.Lconst.47, 35

	.type	go..C63,@object
	.section	.rodata.go..C63,"a",@progbits
	.p2align	3
go..C63:
	.quad	.Lconst.47
	.quad	34
	.size	go..C63, 16

	.type	.Lconst.48,@object
	.section	.rodata..Lconst.48,"a",@progbits
.Lconst.48:
	.asciz	"Scope"
	.size	.Lconst.48, 6

	.type	go..C64,@object
	.section	.rodata.go..C64,"a",@progbits
	.p2align	3
go..C64:
	.quad	.Lconst.48
	.quad	5
	.size	go..C64, 16

	.type	.Lconst.49,@object
	.section	.rodata..Lconst.49,"a",@progbits
.Lconst.49:
	.asciz	"command-line-arguments"
	.size	.Lconst.49, 23

	.type	go..C65,@object
	.section	.rodata.go..C65,"a",@progbits
	.p2align	3
go..C65:
	.quad	.Lconst.49
	.quad	22
	.size	go..C65, 16

	.type	go..C66,@object
	.section	.bss.go..C66,"aw",@nobits
	.p2align	4
go..C66:
	.zero	40
	.size	go..C66, 40

	.type	go..C67,@object
	.section	.rodata.go..C67,"a",@progbits
	.p2align	4
go..C67:
	.quad	go..C64
	.quad	go..C65
	.quad	go..C66
	.quad	0
	.quad	0
	.size	go..C67, 40

	.type	type...1command_line_arguments.Scope,@object
	.section	.rodata.type...1command_line_arguments.Scope,"aG",@progbits,type...1command_line_arguments.Scope,comdat
	.weak	type...1command_line_arguments.Scope
	.p2align	4
type...1command_line_arguments.Scope:
	.quad	8
	.quad	8
	.long	3178120713
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C68
	.quad	go..C84
	.quad	type...1.1command_line_arguments.Scope
	.quad	command_line_arguments.Scope..d
	.size	type...1command_line_arguments.Scope, 80

	.type	.Lconst.50,@object
	.section	.rodata..Lconst.50,"a",@progbits
.Lconst.50:
	.asciz	"*\tcommand_line_arguments\teval.Scope"
	.size	.Lconst.50, 36

	.type	go..C68,@object
	.section	.rodata.go..C68,"a",@progbits
	.p2align	3
go..C68:
	.quad	.Lconst.50
	.quad	35
	.size	go..C68, 16

	.type	.Lconst.51,@object
	.section	.rodata..Lconst.51,"a",@progbits
.Lconst.51:
	.asciz	"Insert"
	.size	.Lconst.51, 7

	.type	go..C69,@object
	.section	.rodata.go..C69,"a",@progbits
	.p2align	3
go..C69:
	.quad	.Lconst.51
	.quad	6
	.size	go..C69, 16

	.type	type..func.8string.3interface.4.5.9.8.9,@object
	.section	.rodata.type..func.8string.3interface.4.5.9.8.9,"aG",@progbits,type..func.8string.3interface.4.5.9.8.9,comdat
	.weak	type..func.8string.3interface.4.5.9.8.9
	.p2align	4
type..func.8string.3interface.4.5.9.8.9:
	.quad	8
	.quad	8
	.long	458020680
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C70
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C71
	.quad	2
	.quad	2
	.quad	go..C72
	.quad	0
	.quad	0
	.size	type..func.8string.3interface.4.5.9.8.9, 128

	.type	.Lconst.52,@object
	.section	.rodata..Lconst.52,"a",@progbits
.Lconst.52:
	.asciz	"func(string, interface {})"
	.size	.Lconst.52, 27

	.type	go..C70,@object
	.section	.rodata.go..C70,"a",@progbits
	.p2align	3
go..C70:
	.quad	.Lconst.52
	.quad	26
	.size	go..C70, 16

	.type	go..C71,@object
	.section	.data.go..C71,"aw",@progbits
	.p2align	3
go..C71:
	.quad	string..d
	.quad	type..interface.4.5
	.size	go..C71, 16

	.type	go..C72,@object
	.section	.bss.go..C72,"aw",@nobits
	.p2align	3
go..C72:
	.zero	8
	.size	go..C72, 8

	.type	type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9,"aG",@progbits,type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9,comdat
	.weak	type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9
	.p2align	4
type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9:
	.quad	8
	.quad	8
	.long	3831656360
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C73
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C74
	.quad	3
	.quad	3
	.quad	go..C75
	.quad	0
	.quad	0
	.size	type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9, 128

	.type	.Lconst.53,@object
	.section	.rodata..Lconst.53,"a",@progbits
.Lconst.53:
	.asciz	"func(*\tcommand_line_arguments\teval.Scope, string, interface {})"
	.size	.Lconst.53, 64

	.type	go..C73,@object
	.section	.rodata.go..C73,"a",@progbits
	.p2align	3
go..C73:
	.quad	.Lconst.53
	.quad	63
	.size	go..C73, 16

	.type	go..C74,@object
	.section	.data.go..C74,"aw",@progbits
	.p2align	4
go..C74:
	.quad	type...1command_line_arguments.Scope
	.quad	string..d
	.quad	type..interface.4.5
	.size	go..C74, 24

	.type	go..C75,@object
	.section	.bss.go..C75,"aw",@nobits
	.p2align	3
go..C75:
	.zero	8
	.size	go..C75, 8

	.type	.Lconst.54,@object
	.section	.rodata..Lconst.54,"a",@progbits
.Lconst.54:
	.asciz	"Lookup"
	.size	.Lconst.54, 7

	.type	go..C76,@object
	.section	.rodata.go..C76,"a",@progbits
	.p2align	3
go..C76:
	.quad	.Lconst.54
	.quad	6
	.size	go..C76, 16

	.type	type..func.8string.9.8interface.4.5.9,@object
	.section	.rodata.type..func.8string.9.8interface.4.5.9,"aG",@progbits,type..func.8string.9.8interface.4.5.9,comdat
	.weak	type..func.8string.9.8interface.4.5.9
	.p2align	4
type..func.8string.9.8interface.4.5.9:
	.quad	8
	.quad	8
	.long	458020680
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C77
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C78
	.quad	1
	.quad	1
	.quad	go..C79
	.quad	1
	.quad	1
	.size	type..func.8string.9.8interface.4.5.9, 128

	.type	.Lconst.55,@object
	.section	.rodata..Lconst.55,"a",@progbits
.Lconst.55:
	.asciz	"func(string) interface {}"
	.size	.Lconst.55, 26

	.type	go..C77,@object
	.section	.rodata.go..C77,"a",@progbits
	.p2align	3
go..C77:
	.quad	.Lconst.55
	.quad	25
	.size	go..C77, 16

	.type	go..C78,@object
	.section	.data.go..C78,"aw",@progbits
	.p2align	3
go..C78:
	.quad	string..d
	.size	go..C78, 8

	.type	go..C79,@object
	.section	.data.go..C79,"aw",@progbits
	.p2align	3
go..C79:
	.quad	type..interface.4.5
	.size	go..C79, 8

	.type	type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9,"aG",@progbits,type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9,comdat
	.weak	type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9
	.p2align	4
type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9:
	.quad	8
	.quad	8
	.long	3831655336
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C80
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C81
	.quad	2
	.quad	2
	.quad	go..C82
	.quad	1
	.quad	1
	.size	type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9, 128

	.type	.Lconst.56,@object
	.section	.rodata..Lconst.56,"a",@progbits
.Lconst.56:
	.asciz	"func(*\tcommand_line_arguments\teval.Scope, string) interface {}"
	.size	.Lconst.56, 63

	.type	go..C80,@object
	.section	.rodata.go..C80,"a",@progbits
	.p2align	3
go..C80:
	.quad	.Lconst.56
	.quad	62
	.size	go..C80, 16

	.type	go..C81,@object
	.section	.data.go..C81,"aw",@progbits
	.p2align	3
go..C81:
	.quad	type...1command_line_arguments.Scope
	.quad	string..d
	.size	go..C81, 16

	.type	go..C82,@object
	.section	.data.go..C82,"aw",@progbits
	.p2align	3
go..C82:
	.quad	type..interface.4.5
	.size	go..C82, 8

	.type	go..C83,@object
	.section	.data.go..C83,"aw",@progbits
	.p2align	4
go..C83:
	.quad	go..C69
	.quad	0
	.quad	type..func.8string.3interface.4.5.9.8.9
	.quad	type..func.8.1command_line_arguments.Scope.3string.3interface.4.5.9.8.9
	.quad	command_line_arguments.Scope.Insert
	.quad	go..C76
	.quad	0
	.quad	type..func.8string.9.8interface.4.5.9
	.quad	type..func.8.1command_line_arguments.Scope.3string.9.8interface.4.5.9
	.quad	command_line_arguments.Scope.Lookup
	.size	go..C83, 80

	.type	go..C84,@object
	.section	.rodata.go..C84,"a",@progbits
	.p2align	4
go..C84:
	.quad	0
	.quad	0
	.quad	go..C83
	.quad	2
	.quad	2
	.size	go..C84, 40

	.type	type...1.1command_line_arguments.Scope,@object
	.section	.rodata.type...1.1command_line_arguments.Scope,"aG",@progbits,type...1.1command_line_arguments.Scope,comdat
	.weak	type...1.1command_line_arguments.Scope
	.p2align	4
type...1.1command_line_arguments.Scope:
	.quad	8
	.quad	8
	.long	3605291161
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C85
	.quad	0
	.quad	0
	.quad	type...1command_line_arguments.Scope
	.size	type...1.1command_line_arguments.Scope, 80

	.type	.Lconst.57,@object
	.section	.rodata..Lconst.57,"a",@progbits
.Lconst.57:
	.asciz	"**\tcommand_line_arguments\teval.Scope"
	.size	.Lconst.57, 37

	.type	go..C85,@object
	.section	.rodata.go..C85,"a",@progbits
	.p2align	3
go..C85:
	.quad	.Lconst.57
	.quad	36
	.size	go..C85, 16

	.type	.Lconst.58,@object
	.section	.rodata..Lconst.58,"a",@progbits
.Lconst.58:
	.asciz	"Objects"
	.size	.Lconst.58, 8

	.type	go..C86,@object
	.section	.rodata.go..C86,"a",@progbits
	.p2align	3
go..C86:
	.quad	.Lconst.58
	.quad	7
	.size	go..C86, 16

	.type	go..C87,@object
	.section	.data.go..C87,"aw",@progbits
	.p2align	4
go..C87:
	.quad	go..C86
	.quad	0
	.quad	type..map.6string.7interface.4.5
	.quad	0
	.quad	0
	.size	go..C87, 40

	.type	command_line_arguments.NewScope..f,@object
	.section	.rodata.command_line_arguments.NewScope..f,"a",@progbits
	.globl	command_line_arguments.NewScope..f
	.p2align	3
command_line_arguments.NewScope..f:
	.quad	command_line_arguments.NewScope
	.size	command_line_arguments.NewScope..f, 8

	.type	command_line_arguments.Context..d,@object
	.section	.rodata.command_line_arguments.Context..d,"a",@progbits
	.globl	command_line_arguments.Context..d
	.p2align	4
command_line_arguments.Context..d:
	.quad	32
	.quad	32
	.long	1700601581
	.byte	25
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..la
	.quad	go..C88
	.quad	go..C92
	.quad	type...1command_line_arguments.Context
	.quad	go..C224
	.quad	4
	.quad	4
	.size	command_line_arguments.Context..d, 96

	.type	gcbits..la,@object
	.section	.rodata.gcbits..la,"aG",@progbits,gcbits..la,comdat
	.weak	gcbits..la
gcbits..la:
	.byte	11
	.size	gcbits..la, 1

	.type	.Lconst.61,@object
	.section	.rodata..Lconst.61,"a",@progbits
.Lconst.61:
	.asciz	"\tcommand_line_arguments\teval.Context"
	.size	.Lconst.61, 37

	.type	go..C88,@object
	.section	.rodata.go..C88,"a",@progbits
	.p2align	3
go..C88:
	.quad	.Lconst.61
	.quad	36
	.size	go..C88, 16

	.type	.Lconst.62,@object
	.section	.rodata..Lconst.62,"a",@progbits
.Lconst.62:
	.asciz	"Context"
	.size	.Lconst.62, 8

	.type	go..C89,@object
	.section	.rodata.go..C89,"a",@progbits
	.p2align	3
go..C89:
	.quad	.Lconst.62
	.quad	7
	.size	go..C89, 16

	.type	go..C90,@object
	.section	.rodata.go..C90,"a",@progbits
	.p2align	3
go..C90:
	.quad	.Lconst.49
	.quad	22
	.size	go..C90, 16

	.type	go..C91,@object
	.section	.bss.go..C91,"aw",@nobits
	.p2align	4
go..C91:
	.zero	40
	.size	go..C91, 40

	.type	go..C92,@object
	.section	.rodata.go..C92,"a",@progbits
	.p2align	4
go..C92:
	.quad	go..C89
	.quad	go..C90
	.quad	go..C91
	.quad	0
	.quad	0
	.size	go..C92, 40

	.type	type...1command_line_arguments.Context,@object
	.section	.rodata.type...1command_line_arguments.Context,"aG",@progbits,type...1command_line_arguments.Context,comdat
	.weak	type...1command_line_arguments.Context
	.p2align	4
type...1command_line_arguments.Context:
	.quad	8
	.quad	8
	.long	1439821529
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C93
	.quad	go..C214
	.quad	type...1.1command_line_arguments.Context
	.quad	command_line_arguments.Context..d
	.size	type...1command_line_arguments.Context, 80

	.type	.Lconst.63,@object
	.section	.rodata..Lconst.63,"a",@progbits
.Lconst.63:
	.asciz	"*\tcommand_line_arguments\teval.Context"
	.size	.Lconst.63, 38

	.type	go..C93,@object
	.section	.rodata.go..C93,"a",@progbits
	.p2align	3
go..C93:
	.quad	.Lconst.63
	.quad	37
	.size	go..C93, 16

	.type	.Lconst.64,@object
	.section	.rodata..Lconst.64,"a",@progbits
.Lconst.64:
	.asciz	"Eval"
	.size	.Lconst.64, 5

	.type	go..C94,@object
	.section	.rodata.go..C94,"a",@progbits
	.p2align	3
go..C94:
	.quad	.Lconst.64
	.quad	4
	.size	go..C94, 16

	.type	type..func.8go_ast.Node.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8go_ast.Node.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8go_ast.Node.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8go_ast.Node.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8go_ast.Node.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3669661576
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C95
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C96
	.quad	1
	.quad	1
	.quad	go..C107
	.quad	2
	.quad	2
	.size	type..func.8go_ast.Node.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.65,@object
	.section	.rodata..Lconst.65,"a",@progbits
.Lconst.65:
	.asciz	"func(\tgo_ast\tast.Node) (*\treflect\treflect.Value, error)"
	.size	.Lconst.65, 56

	.type	go..C95,@object
	.section	.rodata.go..C95,"a",@progbits
	.p2align	3
go..C95:
	.quad	.Lconst.65
	.quad	55
	.size	go..C95, 16

	.type	go..C96,@object
	.section	.data.go..C96,"aw",@progbits
	.p2align	3
go..C96:
	.quad	go_ast.Node..d
	.size	go..C96, 8

	.type	error..d,@object
	.section	.rodata.error..d,"aG",@progbits,error..d,comdat
	.weak	error..d
	.p2align	4
error..d:
	.quad	16
	.quad	16
	.long	2166057687
	.byte	20
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.interhash..f
	.quad	runtime.interequal..f
	.quad	gcbits..da
	.quad	go..C97
	.quad	go..C100
	.quad	type...1error
	.quad	go..C106
	.quad	1
	.quad	1
	.size	error..d, 96

	.type	.Lconst.66,@object
	.section	.rodata..Lconst.66,"a",@progbits
.Lconst.66:
	.asciz	"error"
	.size	.Lconst.66, 6

	.type	go..C97,@object
	.section	.rodata.go..C97,"a",@progbits
	.p2align	3
go..C97:
	.quad	.Lconst.66
	.quad	5
	.size	go..C97, 16

	.type	go..C98,@object
	.section	.rodata.go..C98,"a",@progbits
	.p2align	3
go..C98:
	.quad	.Lconst.66
	.quad	5
	.size	go..C98, 16

	.type	go..C99,@object
	.section	.bss.go..C99,"aw",@nobits
	.p2align	4
go..C99:
	.zero	40
	.size	go..C99, 40

	.type	go..C100,@object
	.section	.rodata.go..C100,"a",@progbits
	.p2align	4
go..C100:
	.quad	go..C98
	.quad	0
	.quad	go..C99
	.quad	0
	.quad	0
	.size	go..C100, 40

	.type	type...1error,@object
	.section	.rodata.type...1error,"aG",@progbits,type...1error,comdat
	.weak	type...1error
	.p2align	4
type...1error:
	.quad	8
	.quad	8
	.long	297184633
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C101
	.quad	0
	.quad	0
	.quad	error..d
	.size	type...1error, 80

	.type	.Lconst.67,@object
	.section	.rodata..Lconst.67,"a",@progbits
.Lconst.67:
	.asciz	"*error"
	.size	.Lconst.67, 7

	.type	go..C101,@object
	.section	.rodata.go..C101,"a",@progbits
	.p2align	3
go..C101:
	.quad	.Lconst.67
	.quad	6
	.size	go..C101, 16

	.type	.Lconst.68,@object
	.section	.rodata..Lconst.68,"a",@progbits
.Lconst.68:
	.asciz	"Error"
	.size	.Lconst.68, 6

	.type	go..C102,@object
	.section	.rodata.go..C102,"a",@progbits
	.p2align	3
go..C102:
	.quad	.Lconst.68
	.quad	5
	.size	go..C102, 16

	.type	type..func.8.9.8string.9,@object
	.section	.rodata.type..func.8.9.8string.9,"aG",@progbits,type..func.8.9.8string.9,comdat
	.weak	type..func.8.9.8string.9
	.p2align	4
type..func.8.9.8string.9:
	.quad	8
	.quad	8
	.long	916039304
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C103
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C104
	.quad	0
	.quad	0
	.quad	go..C105
	.quad	1
	.quad	1
	.size	type..func.8.9.8string.9, 128

	.type	.Lconst.69,@object
	.section	.rodata..Lconst.69,"a",@progbits
.Lconst.69:
	.asciz	"func() string"
	.size	.Lconst.69, 14

	.type	go..C103,@object
	.section	.rodata.go..C103,"a",@progbits
	.p2align	3
go..C103:
	.quad	.Lconst.69
	.quad	13
	.size	go..C103, 16

	.type	go..C104,@object
	.section	.bss.go..C104,"aw",@nobits
	.p2align	3
go..C104:
	.zero	8
	.size	go..C104, 8

	.type	go..C105,@object
	.section	.data.go..C105,"aw",@progbits
	.p2align	3
go..C105:
	.quad	string..d
	.size	go..C105, 8

	.type	go..C106,@object
	.section	.data.go..C106,"aw",@progbits
	.p2align	4
go..C106:
	.quad	go..C102
	.quad	0
	.quad	type..func.8.9.8string.9
	.size	go..C106, 24

	.type	go..C107,@object
	.section	.data.go..C107,"aw",@progbits
	.p2align	3
go..C107:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C107, 16

	.type	type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	1907867752
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C108
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C109
	.quad	2
	.quad	2
	.quad	go..C110
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.70,@object
	.section	.rodata..Lconst.70,"a",@progbits
.Lconst.70:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, \tgo_ast\tast.Node) (*\treflect\treflect.Value, error)"
	.size	.Lconst.70, 95

	.type	go..C108,@object
	.section	.rodata.go..C108,"a",@progbits
	.p2align	3
go..C108:
	.quad	.Lconst.70
	.quad	94
	.size	go..C108, 16

	.type	go..C109,@object
	.section	.data.go..C109,"aw",@progbits
	.p2align	3
go..C109:
	.quad	type...1command_line_arguments.Context
	.quad	go_ast.Node..d
	.size	go..C109, 16

	.type	go..C110,@object
	.section	.data.go..C110,"aw",@progbits
	.p2align	3
go..C110:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C110, 16

	.type	.Lconst.71,@object
	.section	.rodata..Lconst.71,"a",@progbits
.Lconst.71:
	.asciz	"evalAssignStmt"
	.size	.Lconst.71, 15

	.type	go..C111,@object
	.section	.rodata.go..C111,"a",@progbits
	.p2align	3
go..C111:
	.quad	.Lconst.71
	.quad	14
	.size	go..C111, 16

	.type	go..C112,@object
	.section	.rodata.go..C112,"a",@progbits
	.p2align	3
go..C112:
	.quad	.Lconst.49
	.quad	22
	.size	go..C112, 16

	.type	type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2570838248
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C113
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C114
	.quad	1
	.quad	1
	.quad	go..C115
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.72,@object
	.section	.rodata..Lconst.72,"a",@progbits
.Lconst.72:
	.asciz	"func(*\tgo_ast\tast.AssignStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.72, 63

	.type	go..C113,@object
	.section	.rodata.go..C113,"a",@progbits
	.p2align	3
go..C113:
	.quad	.Lconst.72
	.quad	62
	.size	go..C113, 16

	.type	go..C114,@object
	.section	.data.go..C114,"aw",@progbits
	.p2align	3
go..C114:
	.quad	type...1go_ast.AssignStmt
	.size	go..C114, 8

	.type	go..C115,@object
	.section	.data.go..C115,"aw",@progbits
	.p2align	3
go..C115:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C115, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	4005188392
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C116
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C117
	.quad	2
	.quad	2
	.quad	go..C118
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.73,@object
	.section	.rodata..Lconst.73,"a",@progbits
.Lconst.73:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.AssignStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.73, 102

	.type	go..C116,@object
	.section	.rodata.go..C116,"a",@progbits
	.p2align	3
go..C116:
	.quad	.Lconst.73
	.quad	101
	.size	go..C116, 16

	.type	go..C117,@object
	.section	.data.go..C117,"aw",@progbits
	.p2align	3
go..C117:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.AssignStmt
	.size	go..C117, 16

	.type	go..C118,@object
	.section	.data.go..C118,"aw",@progbits
	.p2align	3
go..C118:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C118, 16

	.type	.Lconst.74,@object
	.section	.rodata..Lconst.74,"a",@progbits
.Lconst.74:
	.asciz	"evalBinaryExpr"
	.size	.Lconst.74, 15

	.type	go..C119,@object
	.section	.rodata.go..C119,"a",@progbits
	.p2align	3
go..C119:
	.quad	.Lconst.74
	.quad	14
	.size	go..C119, 16

	.type	go..C120,@object
	.section	.rodata.go..C120,"a",@progbits
	.p2align	3
go..C120:
	.quad	.Lconst.49
	.quad	22
	.size	go..C120, 16

	.type	type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	334498536
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C121
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C122
	.quad	1
	.quad	1
	.quad	go..C123
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.75,@object
	.section	.rodata..Lconst.75,"a",@progbits
.Lconst.75:
	.asciz	"func(*\tgo_ast\tast.BinaryExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.75, 63

	.type	go..C121,@object
	.section	.rodata.go..C121,"a",@progbits
	.p2align	3
go..C121:
	.quad	.Lconst.75
	.quad	62
	.size	go..C121, 16

	.type	go..C122,@object
	.section	.data.go..C122,"aw",@progbits
	.p2align	3
go..C122:
	.quad	type...1go_ast.BinaryExpr
	.size	go..C122, 8

	.type	go..C123,@object
	.section	.data.go..C123,"aw",@progbits
	.p2align	3
go..C123:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C123, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3827476264
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C124
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C125
	.quad	2
	.quad	2
	.quad	go..C126
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.76,@object
	.section	.rodata..Lconst.76,"a",@progbits
.Lconst.76:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.BinaryExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.76, 102

	.type	go..C124,@object
	.section	.rodata.go..C124,"a",@progbits
	.p2align	3
go..C124:
	.quad	.Lconst.76
	.quad	101
	.size	go..C124, 16

	.type	go..C125,@object
	.section	.data.go..C125,"aw",@progbits
	.p2align	3
go..C125:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.BinaryExpr
	.size	go..C125, 16

	.type	go..C126,@object
	.section	.data.go..C126,"aw",@progbits
	.p2align	3
go..C126:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C126, 16

	.type	.Lconst.77,@object
	.section	.rodata..Lconst.77,"a",@progbits
.Lconst.77:
	.asciz	"evalBlockStmt"
	.size	.Lconst.77, 14

	.type	go..C127,@object
	.section	.rodata.go..C127,"a",@progbits
	.p2align	3
go..C127:
	.quad	.Lconst.77
	.quad	13
	.size	go..C127, 16

	.type	go..C128,@object
	.section	.rodata.go..C128,"a",@progbits
	.p2align	3
go..C128:
	.quad	.Lconst.49
	.quad	22
	.size	go..C128, 16

	.type	type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	628351208
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C129
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C130
	.quad	1
	.quad	1
	.quad	go..C131
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.78,@object
	.section	.rodata..Lconst.78,"a",@progbits
.Lconst.78:
	.asciz	"func(*\tgo_ast\tast.BlockStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.78, 62

	.type	go..C129,@object
	.section	.rodata.go..C129,"a",@progbits
	.p2align	3
go..C129:
	.quad	.Lconst.78
	.quad	61
	.size	go..C129, 16

	.type	go..C130,@object
	.section	.data.go..C130,"aw",@progbits
	.p2align	3
go..C130:
	.quad	type...1go_ast.BlockStmt
	.size	go..C130, 8

	.type	go..C131,@object
	.section	.data.go..C131,"aw",@progbits
	.p2align	3
go..C131:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C131, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	120214312
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C132
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C133
	.quad	2
	.quad	2
	.quad	go..C134
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.79,@object
	.section	.rodata..Lconst.79,"a",@progbits
.Lconst.79:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.BlockStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.79, 101

	.type	go..C132,@object
	.section	.rodata.go..C132,"a",@progbits
	.p2align	3
go..C132:
	.quad	.Lconst.79
	.quad	100
	.size	go..C132, 16

	.type	go..C133,@object
	.section	.data.go..C133,"aw",@progbits
	.p2align	3
go..C133:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.BlockStmt
	.size	go..C133, 16

	.type	go..C134,@object
	.section	.data.go..C134,"aw",@progbits
	.p2align	3
go..C134:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C134, 16

	.type	.Lconst.80,@object
	.section	.rodata..Lconst.80,"a",@progbits
.Lconst.80:
	.asciz	"evalCallExpr"
	.size	.Lconst.80, 13

	.type	go..C135,@object
	.section	.rodata.go..C135,"a",@progbits
	.p2align	3
go..C135:
	.quad	.Lconst.80
	.quad	12
	.size	go..C135, 16

	.type	go..C136,@object
	.section	.rodata.go..C136,"a",@progbits
	.p2align	3
go..C136:
	.quad	.Lconst.49
	.quad	22
	.size	go..C136, 16

	.type	type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2326941928
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C137
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C138
	.quad	1
	.quad	1
	.quad	go..C139
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.81,@object
	.section	.rodata..Lconst.81,"a",@progbits
.Lconst.81:
	.asciz	"func(*\tgo_ast\tast.CallExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.81, 61

	.type	go..C137,@object
	.section	.rodata.go..C137,"a",@progbits
	.p2align	3
go..C137:
	.quad	.Lconst.81
	.quad	60
	.size	go..C137, 16

	.type	go..C138,@object
	.section	.data.go..C138,"aw",@progbits
	.p2align	3
go..C138:
	.quad	type...1go_ast.CallExpr
	.size	go..C138, 8

	.type	go..C139,@object
	.section	.data.go..C139,"aw",@progbits
	.p2align	3
go..C139:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C139, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3517395752
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C140
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C141
	.quad	2
	.quad	2
	.quad	go..C142
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.82,@object
	.section	.rodata..Lconst.82,"a",@progbits
.Lconst.82:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.CallExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.82, 100

	.type	go..C140,@object
	.section	.rodata.go..C140,"a",@progbits
	.p2align	3
go..C140:
	.quad	.Lconst.82
	.quad	99
	.size	go..C140, 16

	.type	go..C141,@object
	.section	.data.go..C141,"aw",@progbits
	.p2align	3
go..C141:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.CallExpr
	.size	go..C141, 16

	.type	go..C142,@object
	.section	.data.go..C142,"aw",@progbits
	.p2align	3
go..C142:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C142, 16

	.type	.Lconst.83,@object
	.section	.rodata..Lconst.83,"a",@progbits
.Lconst.83:
	.asciz	"evalDecl"
	.size	.Lconst.83, 9

	.type	go..C143,@object
	.section	.rodata.go..C143,"a",@progbits
	.p2align	3
go..C143:
	.quad	.Lconst.83
	.quad	8
	.size	go..C143, 16

	.type	go..C144,@object
	.section	.rodata.go..C144,"a",@progbits
	.p2align	3
go..C144:
	.quad	.Lconst.49
	.quad	22
	.size	go..C144, 16

	.type	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	1636413832
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C145
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C146
	.quad	1
	.quad	1
	.quad	go..C147
	.quad	2
	.quad	2
	.size	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.84,@object
	.section	.rodata..Lconst.84,"a",@progbits
.Lconst.84:
	.asciz	"func(\tgo_ast\tast.Decl) (*\treflect\treflect.Value, error)"
	.size	.Lconst.84, 56

	.type	go..C145,@object
	.section	.rodata.go..C145,"a",@progbits
	.p2align	3
go..C145:
	.quad	.Lconst.84
	.quad	55
	.size	go..C145, 16

	.type	go..C146,@object
	.section	.data.go..C146,"aw",@progbits
	.p2align	3
go..C146:
	.quad	go_ast.Decl..d
	.size	go..C146, 8

	.type	go..C147,@object
	.section	.data.go..C147,"aw",@progbits
	.p2align	3
go..C147:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C147, 16

	.type	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2136339560
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C148
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C149
	.quad	2
	.quad	2
	.quad	go..C150
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.85,@object
	.section	.rodata..Lconst.85,"a",@progbits
.Lconst.85:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, \tgo_ast\tast.Decl) (*\treflect\treflect.Value, error)"
	.size	.Lconst.85, 95

	.type	go..C148,@object
	.section	.rodata.go..C148,"a",@progbits
	.p2align	3
go..C148:
	.quad	.Lconst.85
	.quad	94
	.size	go..C148, 16

	.type	go..C149,@object
	.section	.data.go..C149,"aw",@progbits
	.p2align	3
go..C149:
	.quad	type...1command_line_arguments.Context
	.quad	go_ast.Decl..d
	.size	go..C149, 16

	.type	go..C150,@object
	.section	.data.go..C150,"aw",@progbits
	.p2align	3
go..C150:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C150, 16

	.type	.Lconst.86,@object
	.section	.rodata..Lconst.86,"a",@progbits
.Lconst.86:
	.asciz	"evalExpr"
	.size	.Lconst.86, 9

	.type	go..C151,@object
	.section	.rodata.go..C151,"a",@progbits
	.p2align	3
go..C151:
	.quad	.Lconst.86
	.quad	8
	.size	go..C151, 16

	.type	go..C152,@object
	.section	.rodata.go..C152,"a",@progbits
	.p2align	3
go..C152:
	.quad	.Lconst.49
	.quad	22
	.size	go..C152, 16

	.type	type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3233911336
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C153
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C154
	.quad	1
	.quad	1
	.quad	go..C155
	.quad	2
	.quad	2
	.size	type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.87,@object
	.section	.rodata..Lconst.87,"a",@progbits
.Lconst.87:
	.asciz	"func(\tgo_ast\tast.Expr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.87, 56

	.type	go..C153,@object
	.section	.rodata.go..C153,"a",@progbits
	.p2align	3
go..C153:
	.quad	.Lconst.87
	.quad	55
	.size	go..C153, 16

	.type	go..C154,@object
	.section	.data.go..C154,"aw",@progbits
	.p2align	3
go..C154:
	.quad	go_ast.Expr..d
	.size	go..C154, 8

	.type	go..C155,@object
	.section	.data.go..C155,"aw",@progbits
	.p2align	3
go..C155:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C155, 16

	.type	type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	1036367272
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C156
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C157
	.quad	2
	.quad	2
	.quad	go..C158
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.88,@object
	.section	.rodata..Lconst.88,"a",@progbits
.Lconst.88:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, \tgo_ast\tast.Expr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.88, 95

	.type	go..C156,@object
	.section	.rodata.go..C156,"a",@progbits
	.p2align	3
go..C156:
	.quad	.Lconst.88
	.quad	94
	.size	go..C156, 16

	.type	go..C157,@object
	.section	.data.go..C157,"aw",@progbits
	.p2align	3
go..C157:
	.quad	type...1command_line_arguments.Context
	.quad	go_ast.Expr..d
	.size	go..C157, 16

	.type	go..C158,@object
	.section	.data.go..C158,"aw",@progbits
	.p2align	3
go..C158:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C158, 16

	.type	.Lconst.89,@object
	.section	.rodata..Lconst.89,"a",@progbits
.Lconst.89:
	.asciz	"evalExprStmt"
	.size	.Lconst.89, 13

	.type	go..C159,@object
	.section	.rodata.go..C159,"a",@progbits
	.p2align	3
go..C159:
	.quad	.Lconst.89
	.quad	12
	.size	go..C159, 16

	.type	go..C160,@object
	.section	.rodata.go..C160,"a",@progbits
	.p2align	3
go..C160:
	.quad	.Lconst.49
	.quad	22
	.size	go..C160, 16

	.type	type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	1893840104
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C161
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C162
	.quad	1
	.quad	1
	.quad	go..C163
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.90,@object
	.section	.rodata..Lconst.90,"a",@progbits
.Lconst.90:
	.asciz	"func(*\tgo_ast\tast.ExprStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.90, 61

	.type	go..C161,@object
	.section	.rodata.go..C161,"a",@progbits
	.p2align	3
go..C161:
	.quad	.Lconst.90
	.quad	60
	.size	go..C161, 16

	.type	go..C162,@object
	.section	.data.go..C162,"aw",@progbits
	.p2align	3
go..C162:
	.quad	type...1go_ast.ExprStmt
	.size	go..C162, 8

	.type	go..C163,@object
	.section	.data.go..C163,"aw",@progbits
	.p2align	3
go..C163:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C163, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2651192104
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C164
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C165
	.quad	2
	.quad	2
	.quad	go..C166
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.91,@object
	.section	.rodata..Lconst.91,"a",@progbits
.Lconst.91:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.ExprStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.91, 100

	.type	go..C164,@object
	.section	.rodata.go..C164,"a",@progbits
	.p2align	3
go..C164:
	.quad	.Lconst.91
	.quad	99
	.size	go..C164, 16

	.type	go..C165,@object
	.section	.data.go..C165,"aw",@progbits
	.p2align	3
go..C165:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.ExprStmt
	.size	go..C165, 16

	.type	go..C166,@object
	.section	.data.go..C166,"aw",@progbits
	.p2align	3
go..C166:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C166, 16

	.type	.Lconst.92,@object
	.section	.rodata..Lconst.92,"a",@progbits
.Lconst.92:
	.asciz	"evalFuncDecl"
	.size	.Lconst.92, 13

	.type	go..C167,@object
	.section	.rodata.go..C167,"a",@progbits
	.p2align	3
go..C167:
	.quad	.Lconst.92
	.quad	12
	.size	go..C167, 16

	.type	go..C168,@object
	.section	.rodata.go..C168,"a",@progbits
	.p2align	3
go..C168:
	.quad	.Lconst.49
	.quad	22
	.size	go..C168, 16

	.type	.Lconst.93,@object
	.section	.rodata..Lconst.93,"a",@progbits
.Lconst.93:
	.asciz	"evalGenDecl"
	.size	.Lconst.93, 12

	.type	go..C169,@object
	.section	.rodata.go..C169,"a",@progbits
	.p2align	3
go..C169:
	.quad	.Lconst.93
	.quad	11
	.size	go..C169, 16

	.type	go..C170,@object
	.section	.rodata.go..C170,"a",@progbits
	.p2align	3
go..C170:
	.quad	.Lconst.49
	.quad	22
	.size	go..C170, 16

	.type	.Lconst.94,@object
	.section	.rodata..Lconst.94,"a",@progbits
.Lconst.94:
	.asciz	"evalIdent"
	.size	.Lconst.94, 10

	.type	go..C171,@object
	.section	.rodata.go..C171,"a",@progbits
	.p2align	3
go..C171:
	.quad	.Lconst.94
	.quad	9
	.size	go..C171, 16

	.type	go..C172,@object
	.section	.rodata.go..C172,"a",@progbits
	.p2align	3
go..C172:
	.quad	.Lconst.49
	.quad	22
	.size	go..C172, 16

	.type	.Lconst.95,@object
	.section	.rodata..Lconst.95,"a",@progbits
.Lconst.95:
	.asciz	"evalIfStmt"
	.size	.Lconst.95, 11

	.type	go..C173,@object
	.section	.rodata.go..C173,"a",@progbits
	.p2align	3
go..C173:
	.quad	.Lconst.95
	.quad	10
	.size	go..C173, 16

	.type	go..C174,@object
	.section	.rodata.go..C174,"a",@progbits
	.p2align	3
go..C174:
	.quad	.Lconst.49
	.quad	22
	.size	go..C174, 16

	.type	type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2126730472
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C175
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C176
	.quad	1
	.quad	1
	.quad	go..C177
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.96,@object
	.section	.rodata..Lconst.96,"a",@progbits
.Lconst.96:
	.asciz	"func(*\tgo_ast\tast.IfStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.96, 59

	.type	go..C175,@object
	.section	.rodata.go..C175,"a",@progbits
	.p2align	3
go..C175:
	.quad	.Lconst.96
	.quad	58
	.size	go..C175, 16

	.type	go..C176,@object
	.section	.data.go..C176,"aw",@progbits
	.p2align	3
go..C176:
	.quad	type...1go_ast.IfStmt
	.size	go..C176, 8

	.type	go..C177,@object
	.section	.data.go..C177,"aw",@progbits
	.p2align	3
go..C177:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C177, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3116972840
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C178
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C179
	.quad	2
	.quad	2
	.quad	go..C180
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.97,@object
	.section	.rodata..Lconst.97,"a",@progbits
.Lconst.97:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.IfStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.97, 98

	.type	go..C178,@object
	.section	.rodata.go..C178,"a",@progbits
	.p2align	3
go..C178:
	.quad	.Lconst.97
	.quad	97
	.size	go..C178, 16

	.type	go..C179,@object
	.section	.data.go..C179,"aw",@progbits
	.p2align	3
go..C179:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.IfStmt
	.size	go..C179, 16

	.type	go..C180,@object
	.section	.data.go..C180,"aw",@progbits
	.p2align	3
go..C180:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C180, 16

	.type	.Lconst.98,@object
	.section	.rodata..Lconst.98,"a",@progbits
.Lconst.98:
	.asciz	"evalReturnStmt"
	.size	.Lconst.98, 15

	.type	go..C181,@object
	.section	.rodata.go..C181,"a",@progbits
	.p2align	3
go..C181:
	.quad	.Lconst.98
	.quad	14
	.size	go..C181, 16

	.type	go..C182,@object
	.section	.rodata.go..C182,"a",@progbits
	.p2align	3
go..C182:
	.quad	.Lconst.49
	.quad	22
	.size	go..C182, 16

	.type	type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3122188008
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C183
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C184
	.quad	1
	.quad	1
	.quad	go..C185
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.99,@object
	.section	.rodata..Lconst.99,"a",@progbits
.Lconst.99:
	.asciz	"func(*\tgo_ast\tast.ReturnStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.99, 63

	.type	go..C183,@object
	.section	.rodata.go..C183,"a",@progbits
	.p2align	3
go..C183:
	.quad	.Lconst.99
	.quad	62
	.size	go..C183, 16

	.type	go..C184,@object
	.section	.data.go..C184,"aw",@progbits
	.p2align	3
go..C184:
	.quad	type...1go_ast.ReturnStmt
	.size	go..C184, 8

	.type	go..C185,@object
	.section	.data.go..C185,"aw",@progbits
	.p2align	3
go..C185:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C185, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	812920616
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C186
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C187
	.quad	2
	.quad	2
	.quad	go..C188
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.100,@object
	.section	.rodata..Lconst.100,"a",@progbits
.Lconst.100:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.ReturnStmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.100, 102

	.type	go..C186,@object
	.section	.rodata.go..C186,"a",@progbits
	.p2align	3
go..C186:
	.quad	.Lconst.100
	.quad	101
	.size	go..C186, 16

	.type	go..C187,@object
	.section	.data.go..C187,"aw",@progbits
	.p2align	3
go..C187:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.ReturnStmt
	.size	go..C187, 16

	.type	go..C188,@object
	.section	.data.go..C188,"aw",@progbits
	.p2align	3
go..C188:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C188, 16

	.type	.Lconst.101,@object
	.section	.rodata..Lconst.101,"a",@progbits
.Lconst.101:
	.asciz	"evalSelectorExpr"
	.size	.Lconst.101, 17

	.type	go..C189,@object
	.section	.rodata.go..C189,"a",@progbits
	.p2align	3
go..C189:
	.quad	.Lconst.101
	.quad	16
	.size	go..C189, 16

	.type	go..C190,@object
	.section	.rodata.go..C190,"a",@progbits
	.p2align	3
go..C190:
	.quad	.Lconst.49
	.quad	22
	.size	go..C190, 16

	.type	type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2126392040
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C191
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C192
	.quad	1
	.quad	1
	.quad	go..C193
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.102,@object
	.section	.rodata..Lconst.102,"a",@progbits
.Lconst.102:
	.asciz	"func(*\tgo_ast\tast.SelectorExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.102, 65

	.type	go..C191,@object
	.section	.rodata.go..C191,"a",@progbits
	.p2align	3
go..C191:
	.quad	.Lconst.102
	.quad	64
	.size	go..C191, 16

	.type	go..C192,@object
	.section	.data.go..C192,"aw",@progbits
	.p2align	3
go..C192:
	.quad	type...1go_ast.SelectorExpr
	.size	go..C192, 8

	.type	go..C193,@object
	.section	.data.go..C193,"aw",@progbits
	.p2align	3
go..C193:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C193, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3116295976
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C194
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C195
	.quad	2
	.quad	2
	.quad	go..C196
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.103,@object
	.section	.rodata..Lconst.103,"a",@progbits
.Lconst.103:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.SelectorExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.103, 104

	.type	go..C194,@object
	.section	.rodata.go..C194,"a",@progbits
	.p2align	3
go..C194:
	.quad	.Lconst.103
	.quad	103
	.size	go..C194, 16

	.type	go..C195,@object
	.section	.data.go..C195,"aw",@progbits
	.p2align	3
go..C195:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.SelectorExpr
	.size	go..C195, 16

	.type	go..C196,@object
	.section	.data.go..C196,"aw",@progbits
	.p2align	3
go..C196:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C196, 16

	.type	.Lconst.104,@object
	.section	.rodata..Lconst.104,"a",@progbits
.Lconst.104:
	.asciz	"evalStmt"
	.size	.Lconst.104, 9

	.type	go..C197,@object
	.section	.rodata.go..C197,"a",@progbits
	.p2align	3
go..C197:
	.quad	.Lconst.104
	.quad	8
	.size	go..C197, 16

	.type	go..C198,@object
	.section	.rodata.go..C198,"a",@progbits
	.p2align	3
go..C198:
	.quad	.Lconst.49
	.quad	22
	.size	go..C198, 16

	.type	type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3610577864
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C199
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C200
	.quad	1
	.quad	1
	.quad	go..C201
	.quad	2
	.quad	2
	.size	type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.105,@object
	.section	.rodata..Lconst.105,"a",@progbits
.Lconst.105:
	.asciz	"func(\tgo_ast\tast.Stmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.105, 56

	.type	go..C199,@object
	.section	.rodata.go..C199,"a",@progbits
	.p2align	3
go..C199:
	.quad	.Lconst.105
	.quad	55
	.size	go..C199, 16

	.type	go..C200,@object
	.section	.data.go..C200,"aw",@progbits
	.p2align	3
go..C200:
	.quad	go_ast.Stmt..d
	.size	go..C200, 8

	.type	go..C201,@object
	.section	.data.go..C201,"aw",@progbits
	.p2align	3
go..C201:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C201, 16

	.type	type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	1789700328
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C202
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C203
	.quad	2
	.quad	2
	.quad	go..C204
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.106,@object
	.section	.rodata..Lconst.106,"a",@progbits
.Lconst.106:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, \tgo_ast\tast.Stmt) (*\treflect\treflect.Value, error)"
	.size	.Lconst.106, 95

	.type	go..C202,@object
	.section	.rodata.go..C202,"a",@progbits
	.p2align	3
go..C202:
	.quad	.Lconst.106
	.quad	94
	.size	go..C202, 16

	.type	go..C203,@object
	.section	.data.go..C203,"aw",@progbits
	.p2align	3
go..C203:
	.quad	type...1command_line_arguments.Context
	.quad	go_ast.Stmt..d
	.size	go..C203, 16

	.type	go..C204,@object
	.section	.data.go..C204,"aw",@progbits
	.p2align	3
go..C204:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C204, 16

	.type	.Lconst.107,@object
	.section	.rodata..Lconst.107,"a",@progbits
.Lconst.107:
	.asciz	"evalUnaryExpr"
	.size	.Lconst.107, 14

	.type	go..C205,@object
	.section	.rodata.go..C205,"a",@progbits
	.p2align	3
go..C205:
	.quad	.Lconst.107
	.quad	13
	.size	go..C205, 16

	.type	go..C206,@object
	.section	.rodata.go..C206,"a",@progbits
	.p2align	3
go..C206:
	.quad	.Lconst.49
	.quad	22
	.size	go..C206, 16

	.type	type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	2124596968
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C207
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C208
	.quad	1
	.quad	1
	.quad	go..C209
	.quad	2
	.quad	2
	.size	type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.108,@object
	.section	.rodata..Lconst.108,"a",@progbits
.Lconst.108:
	.asciz	"func(*\tgo_ast\tast.UnaryExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.108, 62

	.type	go..C207,@object
	.section	.rodata.go..C207,"a",@progbits
	.p2align	3
go..C207:
	.quad	.Lconst.108
	.quad	61
	.size	go..C207, 16

	.type	go..C208,@object
	.section	.data.go..C208,"aw",@progbits
	.p2align	3
go..C208:
	.quad	type...1go_ast.UnaryExpr
	.size	go..C208, 8

	.type	go..C209,@object
	.section	.data.go..C209,"aw",@progbits
	.p2align	3
go..C209:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C209, 16

	.type	type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,"aG",@progbits,type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9,comdat
	.weak	type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9
	.p2align	4
type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9:
	.quad	8
	.quad	8
	.long	3112705832
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C210
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C211
	.quad	2
	.quad	2
	.quad	go..C212
	.quad	2
	.quad	2
	.size	type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9, 128

	.type	.Lconst.109,@object
	.section	.rodata..Lconst.109,"a",@progbits
.Lconst.109:
	.asciz	"func(*\tcommand_line_arguments\teval.Context, *\tgo_ast\tast.UnaryExpr) (*\treflect\treflect.Value, error)"
	.size	.Lconst.109, 101

	.type	go..C210,@object
	.section	.rodata.go..C210,"a",@progbits
	.p2align	3
go..C210:
	.quad	.Lconst.109
	.quad	100
	.size	go..C210, 16

	.type	go..C211,@object
	.section	.data.go..C211,"aw",@progbits
	.p2align	3
go..C211:
	.quad	type...1command_line_arguments.Context
	.quad	type...1go_ast.UnaryExpr
	.size	go..C211, 16

	.type	go..C212,@object
	.section	.data.go..C212,"aw",@progbits
	.p2align	3
go..C212:
	.quad	type...1reflect.Value
	.quad	error..d
	.size	go..C212, 16

	.type	go..C213,@object
	.section	.data.go..C213,"aw",@progbits
	.p2align	4
go..C213:
	.quad	go..C94
	.quad	0
	.quad	type..func.8go_ast.Node.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Node.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.Eval
	.quad	go..C111
	.quad	go..C112
	.quad	type..func.8.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.AssignStmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalAssignStmt
	.quad	go..C119
	.quad	go..C120
	.quad	type..func.8.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.BinaryExpr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalBinaryExpr
	.quad	go..C127
	.quad	go..C128
	.quad	type..func.8.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.BlockStmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalBlockStmt
	.quad	go..C135
	.quad	go..C136
	.quad	type..func.8.1go_ast.CallExpr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.CallExpr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalCallExpr
	.quad	go..C143
	.quad	go..C144
	.quad	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalDecl
	.quad	go..C151
	.quad	go..C152
	.quad	type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalExpr
	.quad	go..C159
	.quad	go..C160
	.quad	type..func.8.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.ExprStmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalExprStmt
	.quad	go..C167
	.quad	go..C168
	.quad	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalFuncDecl
	.quad	go..C169
	.quad	go..C170
	.quad	type..func.8go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Decl.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalGenDecl
	.quad	go..C171
	.quad	go..C172
	.quad	type..func.8go_ast.Expr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Expr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalIdent
	.quad	go..C173
	.quad	go..C174
	.quad	type..func.8.1go_ast.IfStmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.IfStmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalIfStmt
	.quad	go..C181
	.quad	go..C182
	.quad	type..func.8.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.ReturnStmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalReturnStmt
	.quad	go..C189
	.quad	go..C190
	.quad	type..func.8.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.SelectorExpr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalSelectorExpr
	.quad	go..C197
	.quad	go..C198
	.quad	type..func.8go_ast.Stmt.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3go_ast.Stmt.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalStmt
	.quad	go..C205
	.quad	go..C206
	.quad	type..func.8.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9
	.quad	type..func.8.1command_line_arguments.Context.3.1go_ast.UnaryExpr.9.8.1reflect.Value.3error.9
	.quad	command_line_arguments.Context.evalUnaryExpr
	.size	go..C213, 640

	.type	go..C214,@object
	.section	.rodata.go..C214,"a",@progbits
	.p2align	4
go..C214:
	.quad	0
	.quad	0
	.quad	go..C213
	.quad	16
	.quad	16
	.size	go..C214, 40

	.type	type...1.1command_line_arguments.Context,@object
	.section	.rodata.type...1.1command_line_arguments.Context,"aG",@progbits,type...1.1command_line_arguments.Context,comdat
	.weak	type...1.1command_line_arguments.Context
	.p2align	4
type...1.1command_line_arguments.Context:
	.quad	8
	.quad	8
	.long	1562307993
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C215
	.quad	0
	.quad	0
	.quad	type...1command_line_arguments.Context
	.size	type...1.1command_line_arguments.Context, 80

	.type	.Lconst.110,@object
	.section	.rodata..Lconst.110,"a",@progbits
.Lconst.110:
	.asciz	"**\tcommand_line_arguments\teval.Context"
	.size	.Lconst.110, 39

	.type	go..C215,@object
	.section	.rodata.go..C215,"a",@progbits
	.p2align	3
go..C215:
	.quad	.Lconst.110
	.quad	38
	.size	go..C215, 16

	.type	.Lconst.111,@object
	.section	.rodata..Lconst.111,"a",@progbits
.Lconst.111:
	.asciz	"fset"
	.size	.Lconst.111, 5

	.type	go..C216,@object
	.section	.rodata.go..C216,"a",@progbits
	.p2align	3
go..C216:
	.quad	.Lconst.111
	.quad	4
	.size	go..C216, 16

	.type	go..C217,@object
	.section	.rodata.go..C217,"a",@progbits
	.p2align	3
go..C217:
	.quad	.Lconst.49
	.quad	22
	.size	go..C217, 16

	.type	.Lconst.112,@object
	.section	.rodata..Lconst.112,"a",@progbits
.Lconst.112:
	.asciz	"identifiers"
	.size	.Lconst.112, 12

	.type	go..C218,@object
	.section	.rodata.go..C218,"a",@progbits
	.p2align	3
go..C218:
	.quad	.Lconst.112
	.quad	11
	.size	go..C218, 16

	.type	go..C219,@object
	.section	.rodata.go..C219,"a",@progbits
	.p2align	3
go..C219:
	.quad	.Lconst.49
	.quad	22
	.size	go..C219, 16

	.type	.Lconst.113,@object
	.section	.rodata..Lconst.113,"a",@progbits
.Lconst.113:
	.asciz	"returnSet"
	.size	.Lconst.113, 10

	.type	go..C220,@object
	.section	.rodata.go..C220,"a",@progbits
	.p2align	3
go..C220:
	.quad	.Lconst.113
	.quad	9
	.size	go..C220, 16

	.type	go..C221,@object
	.section	.rodata.go..C221,"a",@progbits
	.p2align	3
go..C221:
	.quad	.Lconst.49
	.quad	22
	.size	go..C221, 16

	.type	.Lconst.114,@object
	.section	.rodata..Lconst.114,"a",@progbits
.Lconst.114:
	.asciz	"returnValue"
	.size	.Lconst.114, 12

	.type	go..C222,@object
	.section	.rodata.go..C222,"a",@progbits
	.p2align	3
go..C222:
	.quad	.Lconst.114
	.quad	11
	.size	go..C222, 16

	.type	go..C223,@object
	.section	.rodata.go..C223,"a",@progbits
	.p2align	3
go..C223:
	.quad	.Lconst.49
	.quad	22
	.size	go..C223, 16

	.type	go..C224,@object
	.section	.data.go..C224,"aw",@progbits
	.p2align	4
go..C224:
	.quad	go..C216
	.quad	go..C217
	.quad	type...1go_token.FileSet
	.quad	0
	.quad	0
	.quad	go..C218
	.quad	go..C219
	.quad	type..map.6string.7interface.4.5
	.quad	0
	.quad	16
	.quad	go..C220
	.quad	go..C221
	.quad	bool..d
	.quad	0
	.quad	32
	.quad	go..C222
	.quad	go..C223
	.quad	type...1reflect.Value
	.quad	0
	.quad	48
	.size	go..C224, 160

	.type	.Lconst.118,@object
	.section	.rodata..Lconst.118,"a",@progbits
.Lconst.118:
	.asciz	"Ident '%s' already exists\n"
	.size	.Lconst.118, 27

	.type	command_line_arguments.NewContext..f,@object
	.section	.rodata.command_line_arguments.NewContext..f,"a",@progbits
	.globl	command_line_arguments.NewContext..f
	.p2align	3
command_line_arguments.NewContext..f:
	.quad	command_line_arguments.NewContext
	.size	command_line_arguments.NewContext..f, 8

	.type	.Lconst.121,@object
	.section	.rodata..Lconst.121,"a",@progbits
.Lconst.121:
	.asciz	"unhandled ast.Decl type: '%v'\n"
	.size	.Lconst.121, 31

	.type	command_line_arguments.False,@object
	.section	.bss.command_line_arguments.False,"aw",@nobits
	.globl	command_line_arguments.False
	.p2align	4
command_line_arguments.False:
	.zero	24
	.size	command_line_arguments.False, 24

	.type	command_line_arguments.True,@object
	.section	.bss.command_line_arguments.True,"aw",@nobits
	.globl	command_line_arguments.True
	.p2align	4
command_line_arguments.True:
	.zero	24
	.size	command_line_arguments.True, 24

	.type	command_line_arguments.Nil,@object
	.section	.bss.command_line_arguments.Nil,"aw",@nobits
	.globl	command_line_arguments.Nil
	.p2align	4
command_line_arguments.Nil:
	.zero	24
	.size	command_line_arguments.Nil, 24

	.type	command_line_arguments.ErrInvalidValue,@object
	.section	.bss.command_line_arguments.ErrInvalidValue,"aw",@nobits
	.globl	command_line_arguments.ErrInvalidValue
	.p2align	3
command_line_arguments.ErrInvalidValue:
	.zero	16
	.size	command_line_arguments.ErrInvalidValue, 16

	.type	.Lconst.123,@object
	.section	.rodata..Lconst.123,"a",@progbits
.Lconst.123:
	.asciz	"reflect.Value is invalid"
	.size	.Lconst.123, 25

	.type	command_line_arguments.ErrReturnValue,@object
	.section	.bss.command_line_arguments.ErrReturnValue,"aw",@nobits
	.globl	command_line_arguments.ErrReturnValue
	.p2align	3
command_line_arguments.ErrReturnValue:
	.zero	16
	.size	command_line_arguments.ErrReturnValue, 16

	.type	.Lconst.125,@object
	.section	.rodata..Lconst.125,"a",@progbits
.Lconst.125:
	.asciz	"return value is set"
	.size	.Lconst.125, 20

	.type	.Lconst.127,@object
	.section	.rodata..Lconst.127,"a",@progbits
.Lconst.127:
	.asciz	"unhandled ast.Node type: '%v'\n"
	.size	.Lconst.127, 31

	.type	command_line_arguments.EvalError..d,@object
	.section	.rodata.command_line_arguments.EvalError..d,"a",@progbits
	.globl	command_line_arguments.EvalError..d
	.p2align	4
command_line_arguments.EvalError..d:
	.quad	48
	.quad	40
	.long	3708565740
	.byte	25
	.byte	8
	.byte	8
	.zero	1
	.quad	command_line_arguments.command_line_arguments.EvalError..hash..f
	.quad	command_line_arguments.command_line_arguments.EvalError..eq..f
	.quad	gcbits..ya
	.quad	go..C225
	.quad	go..C241
	.quad	type...1command_line_arguments.EvalError
	.quad	go..C258
	.quad	3
	.quad	3
	.size	command_line_arguments.EvalError..d, 96

	.type	command_line_arguments.command_line_arguments.EvalError..hash..f,@object
	.section	.rodata.command_line_arguments.command_line_arguments.EvalError..hash..f,"a",@progbits
	.globl	command_line_arguments.command_line_arguments.EvalError..hash..f
	.p2align	3
command_line_arguments.command_line_arguments.EvalError..hash..f:
	.quad	command_line_arguments.command_line_arguments.EvalError..hash
	.size	command_line_arguments.command_line_arguments.EvalError..hash..f, 8

	.type	command_line_arguments.command_line_arguments.EvalError..eq..f,@object
	.section	.rodata.command_line_arguments.command_line_arguments.EvalError..eq..f,"a",@progbits
	.globl	command_line_arguments.command_line_arguments.EvalError..eq..f
	.p2align	3
command_line_arguments.command_line_arguments.EvalError..eq..f:
	.quad	command_line_arguments.command_line_arguments.EvalError..eq
	.size	command_line_arguments.command_line_arguments.EvalError..eq..f, 8

	.type	gcbits..ya,@object
	.section	.rodata.gcbits..ya,"aG",@progbits,gcbits..ya,comdat
	.weak	gcbits..ya
gcbits..ya:
	.byte	23
	.size	gcbits..ya, 1

	.type	.Lconst.129,@object
	.section	.rodata..Lconst.129,"a",@progbits
.Lconst.129:
	.asciz	"\tcommand_line_arguments\teval.EvalError"
	.size	.Lconst.129, 39

	.type	go..C225,@object
	.section	.rodata.go..C225,"a",@progbits
	.p2align	3
go..C225:
	.quad	.Lconst.129
	.quad	38
	.size	go..C225, 16

	.type	.Lconst.130,@object
	.section	.rodata..Lconst.130,"a",@progbits
.Lconst.130:
	.asciz	"EvalError"
	.size	.Lconst.130, 10

	.type	go..C226,@object
	.section	.rodata.go..C226,"a",@progbits
	.p2align	3
go..C226:
	.quad	.Lconst.130
	.quad	9
	.size	go..C226, 16

	.type	go..C227,@object
	.section	.rodata.go..C227,"a",@progbits
	.p2align	3
go..C227:
	.quad	.Lconst.49
	.quad	22
	.size	go..C227, 16

	.type	.Lconst.131,@object
	.section	.rodata..Lconst.131,"a",@progbits
.Lconst.131:
	.asciz	"End"
	.size	.Lconst.131, 4

	.type	go..C228,@object
	.section	.rodata.go..C228,"a",@progbits
	.p2align	3
go..C228:
	.quad	.Lconst.131
	.quad	3
	.size	go..C228, 16

	.type	type..func.8.9.8go_token.Pos.9,@object
	.section	.rodata.type..func.8.9.8go_token.Pos.9,"aG",@progbits,type..func.8.9.8go_token.Pos.9,comdat
	.weak	type..func.8.9.8go_token.Pos.9
	.p2align	4
type..func.8.9.8go_token.Pos.9:
	.quad	8
	.quad	8
	.long	321518792
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C229
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C230
	.quad	0
	.quad	0
	.quad	go..C231
	.quad	1
	.quad	1
	.size	type..func.8.9.8go_token.Pos.9, 128

	.type	.Lconst.132,@object
	.section	.rodata..Lconst.132,"a",@progbits
.Lconst.132:
	.asciz	"func() \tgo_token\ttoken.Pos"
	.size	.Lconst.132, 27

	.type	go..C229,@object
	.section	.rodata.go..C229,"a",@progbits
	.p2align	3
go..C229:
	.quad	.Lconst.132
	.quad	26
	.size	go..C229, 16

	.type	go..C230,@object
	.section	.bss.go..C230,"aw",@nobits
	.p2align	3
go..C230:
	.zero	8
	.size	go..C230, 8

	.type	go..C231,@object
	.section	.data.go..C231,"aw",@progbits
	.p2align	3
go..C231:
	.quad	go_token.Pos..d
	.size	go..C231, 8

	.type	type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9,@object
	.section	.rodata.type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9,"aG",@progbits,type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9,comdat
	.weak	type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9
	.p2align	4
type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9:
	.quad	8
	.quad	8
	.long	3031505480
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C232
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C233
	.quad	1
	.quad	1
	.quad	go..C234
	.quad	1
	.quad	1
	.size	type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9, 128

	.type	.Lconst.133,@object
	.section	.rodata..Lconst.133,"a",@progbits
.Lconst.133:
	.asciz	"func(\tcommand_line_arguments\teval.EvalError) \tgo_token\ttoken.Pos"
	.size	.Lconst.133, 65

	.type	go..C232,@object
	.section	.rodata.go..C232,"a",@progbits
	.p2align	3
go..C232:
	.quad	.Lconst.133
	.quad	64
	.size	go..C232, 16

	.type	go..C233,@object
	.section	.data.go..C233,"aw",@progbits
	.p2align	3
go..C233:
	.quad	command_line_arguments.EvalError..d
	.size	go..C233, 8

	.type	go..C234,@object
	.section	.data.go..C234,"aw",@progbits
	.p2align	3
go..C234:
	.quad	go_token.Pos..d
	.size	go..C234, 8

	.type	go..C235,@object
	.section	.rodata.go..C235,"a",@progbits
	.p2align	3
go..C235:
	.quad	.Lconst.68
	.quad	5
	.size	go..C235, 16

	.type	type..func.8command_line_arguments.EvalError.9.8string.9,@object
	.section	.rodata.type..func.8command_line_arguments.EvalError.9.8string.9,"aG",@progbits,type..func.8command_line_arguments.EvalError.9.8string.9,comdat
	.weak	type..func.8command_line_arguments.EvalError.9.8string.9
	.p2align	4
type..func.8command_line_arguments.EvalError.9.8string.9:
	.quad	8
	.quad	8
	.long	3626025992
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C236
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C237
	.quad	1
	.quad	1
	.quad	go..C238
	.quad	1
	.quad	1
	.size	type..func.8command_line_arguments.EvalError.9.8string.9, 128

	.type	.Lconst.134,@object
	.section	.rodata..Lconst.134,"a",@progbits
.Lconst.134:
	.asciz	"func(\tcommand_line_arguments\teval.EvalError) string"
	.size	.Lconst.134, 52

	.type	go..C236,@object
	.section	.rodata.go..C236,"a",@progbits
	.p2align	3
go..C236:
	.quad	.Lconst.134
	.quad	51
	.size	go..C236, 16

	.type	go..C237,@object
	.section	.data.go..C237,"aw",@progbits
	.p2align	3
go..C237:
	.quad	command_line_arguments.EvalError..d
	.size	go..C237, 8

	.type	go..C238,@object
	.section	.data.go..C238,"aw",@progbits
	.p2align	3
go..C238:
	.quad	string..d
	.size	go..C238, 8

	.type	.Lconst.135,@object
	.section	.rodata..Lconst.135,"a",@progbits
.Lconst.135:
	.asciz	"Pos"
	.size	.Lconst.135, 4

	.type	go..C239,@object
	.section	.rodata.go..C239,"a",@progbits
	.p2align	3
go..C239:
	.quad	.Lconst.135
	.quad	3
	.size	go..C239, 16

	.type	go..C240,@object
	.section	.data.go..C240,"aw",@progbits
	.p2align	4
go..C240:
	.quad	go..C228
	.quad	0
	.quad	type..func.8.9.8go_token.Pos.9
	.quad	type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9
	.quad	command_line_arguments.EvalError.End..stub
	.quad	go..C235
	.quad	0
	.quad	type..func.8.9.8string.9
	.quad	type..func.8command_line_arguments.EvalError.9.8string.9
	.quad	command_line_arguments.EvalError.Error
	.quad	go..C239
	.quad	0
	.quad	type..func.8.9.8go_token.Pos.9
	.quad	type..func.8command_line_arguments.EvalError.9.8go_token.Pos.9
	.quad	command_line_arguments.EvalError.Pos..stub
	.size	go..C240, 120

	.type	go..C241,@object
	.section	.rodata.go..C241,"a",@progbits
	.p2align	4
go..C241:
	.quad	go..C226
	.quad	go..C227
	.quad	go..C240
	.quad	3
	.quad	3
	.size	go..C241, 40

	.type	type...1command_line_arguments.EvalError,@object
	.section	.rodata.type...1command_line_arguments.EvalError,"aG",@progbits,type...1command_line_arguments.EvalError,comdat
	.weak	type...1command_line_arguments.EvalError
	.p2align	4
type...1command_line_arguments.EvalError:
	.quad	8
	.quad	8
	.long	3502477001
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C242
	.quad	go..C253
	.quad	type...1.1command_line_arguments.EvalError
	.quad	command_line_arguments.EvalError..d
	.size	type...1command_line_arguments.EvalError, 80

	.type	.Lconst.136,@object
	.section	.rodata..Lconst.136,"a",@progbits
.Lconst.136:
	.asciz	"*\tcommand_line_arguments\teval.EvalError"
	.size	.Lconst.136, 40

	.type	go..C242,@object
	.section	.rodata.go..C242,"a",@progbits
	.p2align	3
go..C242:
	.quad	.Lconst.136
	.quad	39
	.size	go..C242, 16

	.type	go..C243,@object
	.section	.rodata.go..C243,"a",@progbits
	.p2align	3
go..C243:
	.quad	.Lconst.131
	.quad	3
	.size	go..C243, 16

	.type	type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9,"aG",@progbits,type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9,comdat
	.weak	type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9
	.p2align	4
type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9:
	.quad	8
	.quad	8
	.long	731633128
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C244
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C245
	.quad	1
	.quad	1
	.quad	go..C246
	.quad	1
	.quad	1
	.size	type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9, 128

	.type	.Lconst.137,@object
	.section	.rodata..Lconst.137,"a",@progbits
.Lconst.137:
	.asciz	"func(*\tcommand_line_arguments\teval.EvalError) \tgo_token\ttoken.Pos"
	.size	.Lconst.137, 66

	.type	go..C244,@object
	.section	.rodata.go..C244,"a",@progbits
	.p2align	3
go..C244:
	.quad	.Lconst.137
	.quad	65
	.size	go..C244, 16

	.type	go..C245,@object
	.section	.data.go..C245,"aw",@progbits
	.p2align	3
go..C245:
	.quad	type...1command_line_arguments.EvalError
	.size	go..C245, 8

	.type	go..C246,@object
	.section	.data.go..C246,"aw",@progbits
	.p2align	3
go..C246:
	.quad	go_token.Pos..d
	.size	go..C246, 8

	.type	go..C247,@object
	.section	.rodata.go..C247,"a",@progbits
	.p2align	3
go..C247:
	.quad	.Lconst.68
	.quad	5
	.size	go..C247, 16

	.type	type..func.8.1command_line_arguments.EvalError.9.8string.9,@object
	.section	.rodata.type..func.8.1command_line_arguments.EvalError.9.8string.9,"aG",@progbits,type..func.8.1command_line_arguments.EvalError.9.8string.9,comdat
	.weak	type..func.8.1command_line_arguments.EvalError.9.8string.9
	.p2align	4
type..func.8.1command_line_arguments.EvalError.9.8string.9:
	.quad	8
	.quad	8
	.long	1326153640
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C248
	.quad	0
	.quad	0
	.byte	0
	.zero	7
	.quad	go..C249
	.quad	1
	.quad	1
	.quad	go..C250
	.quad	1
	.quad	1
	.size	type..func.8.1command_line_arguments.EvalError.9.8string.9, 128

	.type	.Lconst.138,@object
	.section	.rodata..Lconst.138,"a",@progbits
.Lconst.138:
	.asciz	"func(*\tcommand_line_arguments\teval.EvalError) string"
	.size	.Lconst.138, 53

	.type	go..C248,@object
	.section	.rodata.go..C248,"a",@progbits
	.p2align	3
go..C248:
	.quad	.Lconst.138
	.quad	52
	.size	go..C248, 16

	.type	go..C249,@object
	.section	.data.go..C249,"aw",@progbits
	.p2align	3
go..C249:
	.quad	type...1command_line_arguments.EvalError
	.size	go..C249, 8

	.type	go..C250,@object
	.section	.data.go..C250,"aw",@progbits
	.p2align	3
go..C250:
	.quad	string..d
	.size	go..C250, 8

	.type	go..C251,@object
	.section	.rodata.go..C251,"a",@progbits
	.p2align	3
go..C251:
	.quad	.Lconst.135
	.quad	3
	.size	go..C251, 16

	.type	go..C252,@object
	.section	.data.go..C252,"aw",@progbits
	.p2align	4
go..C252:
	.quad	go..C243
	.quad	0
	.quad	type..func.8.9.8go_token.Pos.9
	.quad	type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9
	.quad	command_line_arguments.EvalError.End..stub
	.quad	go..C247
	.quad	0
	.quad	type..func.8.9.8string.9
	.quad	type..func.8.1command_line_arguments.EvalError.9.8string.9
	.quad	command_line_arguments.EvalError.Error
	.quad	go..C251
	.quad	0
	.quad	type..func.8.9.8go_token.Pos.9
	.quad	type..func.8.1command_line_arguments.EvalError.9.8go_token.Pos.9
	.quad	command_line_arguments.EvalError.Pos..stub
	.size	go..C252, 120

	.type	go..C253,@object
	.section	.rodata.go..C253,"a",@progbits
	.p2align	4
go..C253:
	.quad	0
	.quad	0
	.quad	go..C252
	.quad	3
	.quad	3
	.size	go..C253, 40

	.type	type...1.1command_line_arguments.EvalError,@object
	.section	.rodata.type...1.1command_line_arguments.EvalError,"aG",@progbits,type...1.1command_line_arguments.EvalError,comdat
	.weak	type...1.1command_line_arguments.EvalError
	.p2align	4
type...1.1command_line_arguments.EvalError:
	.quad	8
	.quad	8
	.long	205057177
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C254
	.quad	0
	.quad	0
	.quad	type...1command_line_arguments.EvalError
	.size	type...1.1command_line_arguments.EvalError, 80

	.type	.Lconst.139,@object
	.section	.rodata..Lconst.139,"a",@progbits
.Lconst.139:
	.asciz	"**\tcommand_line_arguments\teval.EvalError"
	.size	.Lconst.139, 41

	.type	go..C254,@object
	.section	.rodata.go..C254,"a",@progbits
	.p2align	3
go..C254:
	.quad	.Lconst.139
	.quad	40
	.size	go..C254, 16

	.type	.Lconst.140,@object
	.section	.rodata..Lconst.140,"a",@progbits
.Lconst.140:
	.asciz	"Node"
	.size	.Lconst.140, 5

	.type	go..C255,@object
	.section	.rodata.go..C255,"a",@progbits
	.p2align	3
go..C255:
	.quad	.Lconst.140
	.quad	4
	.size	go..C255, 16

	.type	.Lconst.141,@object
	.section	.rodata..Lconst.141,"a",@progbits
.Lconst.141:
	.asciz	"Type"
	.size	.Lconst.141, 5

	.type	go..C256,@object
	.section	.rodata.go..C256,"a",@progbits
	.p2align	3
go..C256:
	.quad	.Lconst.141
	.quad	4
	.size	go..C256, 16

	.type	.Lconst.142,@object
	.section	.rodata..Lconst.142,"a",@progbits
.Lconst.142:
	.asciz	"Msg"
	.size	.Lconst.142, 4

	.type	go..C257,@object
	.section	.rodata.go..C257,"a",@progbits
	.p2align	3
go..C257:
	.quad	.Lconst.142
	.quad	3
	.size	go..C257, 16

	.type	go..C258,@object
	.section	.data.go..C258,"aw",@progbits
	.p2align	4
go..C258:
	.quad	go..C255
	.quad	0
	.quad	go_ast.Node..d
	.quad	0
	.quad	1
	.quad	go..C256
	.quad	0
	.quad	string..d
	.quad	0
	.quad	32
	.quad	go..C257
	.quad	0
	.quad	string..d
	.quad	0
	.quad	64
	.size	go..C258, 120

	.type	.Lconst.143,@object
	.section	.rodata..Lconst.143,"a",@progbits
.Lconst.143:
	.asciz	"%s[%d:%d]: %s"
	.size	.Lconst.143, 14

	.type	.Lconst.145,@object
	.section	.rodata..Lconst.145,"a",@progbits
	.p2align	4
.Lconst.145:
	.zero	24
	.size	.Lconst.145, 24

	.type	.Lconst.147,@object
	.section	.rodata..Lconst.147,"a",@progbits
.Lconst.147:
	.asciz	"unhandled BasicLit type '%s'"
	.size	.Lconst.147, 29

	.type	.Lconst.149,@object
	.section	.rodata..Lconst.149,"a",@progbits
.Lconst.149:
	.asciz	"unhandled ast.Expr type: '%v'\n"
	.size	.Lconst.149, 31

	.type	.Lconst.151,@object
	.section	.rodata..Lconst.151,"a",@progbits
.Lconst.151:
	.asciz	"evalCallExpr: %v\n"
	.size	.Lconst.151, 18

	.type	type...61x.7interface.4.5,@object
	.section	.rodata.type...61x.7interface.4.5,"aG",@progbits,type...61x.7interface.4.5,comdat
	.weak	type...61x.7interface.4.5
	.p2align	4
type...61x.7interface.4.5:
	.quad	16
	.quad	16
	.long	47
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..da
	.quad	go..C259
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.quad	type...6.7interface.4.5
	.quad	1
	.size	type...61x.7interface.4.5, 96

	.type	.Lconst.152,@object
	.section	.rodata..Lconst.152,"a",@progbits
.Lconst.152:
	.asciz	"[1]interface {}"
	.size	.Lconst.152, 16

	.type	go..C259,@object
	.section	.rodata.go..C259,"a",@progbits
	.p2align	3
go..C259:
	.quad	.Lconst.152
	.quad	15
	.size	go..C259, 16

	.type	command_line_arguments.PkgLogger,@object
	.section	.bss.command_line_arguments.PkgLogger,"aw",@nobits
	.globl	command_line_arguments.PkgLogger
	.p2align	3
command_line_arguments.PkgLogger:
	.zero	16
	.size	command_line_arguments.PkgLogger, 16

	.type	.Lconst.155,@object
	.section	.rodata..Lconst.155,"a",@progbits
.Lconst.155:
	.asciz	"evalCallExpr: invalid return value\n"
	.size	.Lconst.155, 36

	.type	.Lconst.157,@object
	.section	.rodata..Lconst.157,"a",@progbits
.Lconst.157:
	.asciz	"evalCallExpr: result=%+v\n"
	.size	.Lconst.157, 26

	.type	.Lconst.159,@object
	.section	.rodata..Lconst.159,"a",@progbits
.Lconst.159:
	.asciz	"Expected type '*ast.Ident', received '%v'"
	.size	.Lconst.159, 42

	.type	.Lconst.161,@object
	.section	.rodata..Lconst.161,"a",@progbits
.Lconst.161:
	.asciz	"evalIdent: %+v, identifer=%+v\n"
	.size	.Lconst.161, 31

	.type	type...62x.7interface.4.5,@object
	.section	.rodata.type...62x.7interface.4.5,"aG",@progbits,type...62x.7interface.4.5,comdat
	.weak	type...62x.7interface.4.5
	.p2align	4
type...62x.7interface.4.5:
	.quad	32
	.quad	32
	.long	47
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..pa
	.quad	go..C260
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.quad	type...6.7interface.4.5
	.quad	2
	.size	type...62x.7interface.4.5, 96

	.type	gcbits..pa,@object
	.section	.rodata.gcbits..pa,"aG",@progbits,gcbits..pa,comdat
	.weak	gcbits..pa
gcbits..pa:
	.byte	15
	.size	gcbits..pa, 1

	.type	.Lconst.162,@object
	.section	.rodata..Lconst.162,"a",@progbits
.Lconst.162:
	.asciz	"[2]interface {}"
	.size	.Lconst.162, 16

	.type	go..C260,@object
	.section	.rodata.go..C260,"a",@progbits
	.p2align	3
go..C260:
	.quad	.Lconst.162
	.quad	15
	.size	go..C260, 16

	.type	.Lconst.164,@object
	.section	.rodata..Lconst.164,"a",@progbits
.Lconst.164:
	.asciz	"evalIdent: %+v\n"
	.size	.Lconst.164, 16

	.type	.Lconst.166,@object
	.section	.rodata..Lconst.166,"a",@progbits
.Lconst.166:
	.asciz	"UnknownIdentifier"
	.size	.Lconst.166, 18

	.type	.Lconst.167,@object
	.section	.rodata..Lconst.167,"a",@progbits
	.p2align	3
.Lconst.167:
	.quad	.Lconst.166
	.quad	17
	.size	.Lconst.167, 16

	.type	.Lconst.168,@object
	.section	.rodata..Lconst.168,"a",@progbits
.Lconst.168:
	.asciz	"no identifier '%s'"
	.size	.Lconst.168, 19

	.type	imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError,@object
	.section	.rodata.imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError,"aG",@progbits,imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError,comdat
	.weak	imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError
	.p2align	3
imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError:
	.quad	command_line_arguments.EvalError..d
	.quad	command_line_arguments.EvalError.Error
	.size	imt..interface.4Error.0func.8.9.8string.9.5..command_line_arguments.EvalError, 16

	.type	.Lconst.170,@object
	.section	.rodata..Lconst.170,"a",@progbits
.Lconst.170:
	.asciz	"evalSelectorExpr: INVALID %+v\n"
	.size	.Lconst.170, 31

	.type	.Lconst.172,@object
	.section	.rodata..Lconst.172,"a",@progbits
.Lconst.172:
	.asciz	"InvalidSelector"
	.size	.Lconst.172, 16

	.type	.Lconst.173,@object
	.section	.rodata..Lconst.173,"a",@progbits
	.p2align	3
.Lconst.173:
	.quad	.Lconst.172
	.quad	15
	.size	.Lconst.173, 16

	.type	.Lconst.174,@object
	.section	.rodata..Lconst.174,"a",@progbits
.Lconst.174:
	.asciz	"InvalidSelector: %+v"
	.size	.Lconst.174, 21

	.type	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr,@object
	.section	.rodata.pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr,"aG",@progbits,pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr,comdat
	.weak	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr
	.p2align	4
pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr:
	.quad	type...1go_ast.SelectorExpr
	.quad	go_ast.SelectorExpr.End
	.quad	go_ast.SelectorExpr.Pos
	.size	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.SelectorExpr, 24

	.type	.Lconst.176,@object
	.section	.rodata..Lconst.176,"a",@progbits
.Lconst.176:
	.asciz	"evalSelectorExpr: (%+v), valid=%t, select=%s\n"
	.size	.Lconst.176, 46

	.type	type...63x.7interface.4.5,@object
	.section	.rodata.type...63x.7interface.4.5,"aG",@progbits,type...63x.7interface.4.5,comdat
	.weak	type...63x.7interface.4.5
	.p2align	4
type...63x.7interface.4.5:
	.quad	48
	.quad	48
	.long	47
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..Gb
	.quad	go..C261
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.quad	type...6.7interface.4.5
	.quad	3
	.size	type...63x.7interface.4.5, 96

	.type	gcbits..Gb,@object
	.section	.rodata.gcbits..Gb,"aG",@progbits,gcbits..Gb,comdat
	.weak	gcbits..Gb
gcbits..Gb:
	.byte	63
	.size	gcbits..Gb, 1

	.type	.Lconst.177,@object
	.section	.rodata..Lconst.177,"a",@progbits
.Lconst.177:
	.asciz	"[3]interface {}"
	.size	.Lconst.177, 16

	.type	go..C261,@object
	.section	.rodata.go..C261,"a",@progbits
	.p2align	3
go..C261:
	.quad	.Lconst.177
	.quad	15
	.size	go..C261, 16

	.type	.Lconst.179,@object
	.section	.rodata..Lconst.179,"a",@progbits
.Lconst.179:
	.asciz	"evalSelectorExpr: (%+v), type=%v, val=%+v, select=%s\n"
	.size	.Lconst.179, 54

	.type	type...64x.7interface.4.5,@object
	.section	.rodata.type...64x.7interface.4.5,"aG",@progbits,type...64x.7interface.4.5,comdat
	.weak	type...64x.7interface.4.5
	.p2align	4
type...64x.7interface.4.5:
	.quad	64
	.quad	64
	.long	47
	.byte	17
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..Gh
	.quad	go..C262
	.quad	0
	.quad	0
	.quad	type..interface.4.5
	.quad	type...6.7interface.4.5
	.quad	4
	.size	type...64x.7interface.4.5, 96

	.type	gcbits..Gh,@object
	.section	.rodata.gcbits..Gh,"aG",@progbits,gcbits..Gh,comdat
	.weak	gcbits..Gh
gcbits..Gh:
	.byte	255
	.size	gcbits..Gh, 1

	.type	.Lconst.180,@object
	.section	.rodata..Lconst.180,"a",@progbits
.Lconst.180:
	.asciz	"[4]interface {}"
	.size	.Lconst.180, 16

	.type	go..C262,@object
	.section	.rodata.go..C262,"a",@progbits
	.p2align	3
go..C262:
	.quad	.Lconst.180
	.quad	15
	.size	go..C262, 16

	.type	.Lconst.182,@object
	.section	.rodata..Lconst.182,"a",@progbits
.Lconst.182:
	.asciz	"evalSelectorExpr: valid %+v\n"
	.size	.Lconst.182, 29

	.type	.Lconst.184,@object
	.section	.rodata..Lconst.184,"a",@progbits
.Lconst.184:
	.asciz	"evalSelectorExpr: method=%s not valid\n"
	.size	.Lconst.184, 39

	.type	.Lconst.186,@object
	.section	.rodata..Lconst.186,"a",@progbits
.Lconst.186:
	.asciz	"%s %s has no method '%s'"
	.size	.Lconst.186, 25

	.type	.Lconst.188,@object
	.section	.rodata..Lconst.188,"a",@progbits
.Lconst.188:
	.asciz	"InvalidMethod"
	.size	.Lconst.188, 14

	.type	.Lconst.189,@object
	.section	.rodata..Lconst.189,"a",@progbits
	.p2align	3
.Lconst.189:
	.quad	.Lconst.188
	.quad	13
	.size	.Lconst.189, 16

	.type	.Lconst.190,@object
	.section	.rodata..Lconst.190,"a",@progbits
.Lconst.190:
	.asciz	"compare: %t\n"
	.size	.Lconst.190, 13

	.type	.Lconst.192,@object
	.section	.rodata..Lconst.192,"a",@progbits
.Lconst.192:
	.asciz	"isn't valid moving on %+v\n"
	.size	.Lconst.192, 27

	.type	.Lconst.194,@object
	.section	.rodata..Lconst.194,"a",@progbits
.Lconst.194:
	.asciz	"Op is '%v'\n"
	.size	.Lconst.194, 12

	.type	.Lconst.196,@object
	.section	.rodata..Lconst.196,"a",@progbits
.Lconst.196:
	.asciz	"evalUnaryExpr: %+v\n"
	.size	.Lconst.196, 20

	.type	.Lconst.198,@object
	.section	.rodata..Lconst.198,"a",@progbits
.Lconst.198:
	.asciz	"unknown unary expr '%v'"
	.size	.Lconst.198, 24

	.type	command_line_arguments..command_line_arguments.logger..d,@object
	.section	.rodata.command_line_arguments..command_line_arguments.logger..d,"a",@progbits
	.globl	command_line_arguments..command_line_arguments.logger..d
	.p2align	4
command_line_arguments..command_line_arguments.logger..d:
	.quad	16
	.quad	16
	.long	3748037226
	.byte	20
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.interhash..f
	.quad	runtime.interequal..f
	.quad	gcbits..da
	.quad	go..C263
	.quad	go..C267
	.quad	type...1command_line_arguments.logger
	.quad	go..C273
	.quad	1
	.quad	1
	.size	command_line_arguments..command_line_arguments.logger..d, 96

	.type	.Lconst.200,@object
	.section	.rodata..Lconst.200,"a",@progbits
.Lconst.200:
	.asciz	"\tcommand_line_arguments\teval.logger"
	.size	.Lconst.200, 36

	.type	go..C263,@object
	.section	.rodata.go..C263,"a",@progbits
	.p2align	3
go..C263:
	.quad	.Lconst.200
	.quad	35
	.size	go..C263, 16

	.type	.Lconst.201,@object
	.section	.rodata..Lconst.201,"a",@progbits
.Lconst.201:
	.asciz	"logger"
	.size	.Lconst.201, 7

	.type	go..C264,@object
	.section	.rodata.go..C264,"a",@progbits
	.p2align	3
go..C264:
	.quad	.Lconst.201
	.quad	6
	.size	go..C264, 16

	.type	go..C265,@object
	.section	.rodata.go..C265,"a",@progbits
	.p2align	3
go..C265:
	.quad	.Lconst.49
	.quad	22
	.size	go..C265, 16

	.type	go..C266,@object
	.section	.bss.go..C266,"aw",@nobits
	.p2align	4
go..C266:
	.zero	40
	.size	go..C266, 40

	.type	go..C267,@object
	.section	.rodata.go..C267,"a",@progbits
	.p2align	4
go..C267:
	.quad	go..C264
	.quad	go..C265
	.quad	go..C266
	.quad	0
	.quad	0
	.size	go..C267, 40

	.type	type...1command_line_arguments.logger,@object
	.section	.rodata.type...1command_line_arguments.logger,"aG",@progbits,type...1command_line_arguments.logger,comdat
	.weak	type...1command_line_arguments.logger
	.p2align	4
type...1command_line_arguments.logger:
	.quad	8
	.quad	8
	.long	4134020777
	.byte	54
	.byte	8
	.byte	8
	.zero	1
	.quad	runtime.memhash64..f
	.quad	runtime.memequal64..f
	.quad	gcbits..ba
	.quad	go..C268
	.quad	0
	.quad	0
	.quad	command_line_arguments..command_line_arguments.logger..d
	.size	type...1command_line_arguments.logger, 80

	.type	.Lconst.202,@object
	.section	.rodata..Lconst.202,"a",@progbits
.Lconst.202:
	.asciz	"*\tcommand_line_arguments\teval.logger"
	.size	.Lconst.202, 37

	.type	go..C268,@object
	.section	.rodata.go..C268,"a",@progbits
	.p2align	3
go..C268:
	.quad	.Lconst.202
	.quad	36
	.size	go..C268, 16

	.type	.Lconst.203,@object
	.section	.rodata..Lconst.203,"a",@progbits
.Lconst.203:
	.asciz	"Printf"
	.size	.Lconst.203, 7

	.type	go..C269,@object
	.section	.rodata.go..C269,"a",@progbits
	.p2align	3
go..C269:
	.quad	.Lconst.203
	.quad	6
	.size	go..C269, 16

	.type	type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9,@object
	.section	.rodata.type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9,"aG",@progbits,type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9,comdat
	.weak	type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9
	.p2align	4
type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9:
	.quad	8
	.quad	8
	.long	458021592
	.byte	19
	.byte	8
	.byte	8
	.zero	1
	.quad	0
	.quad	0
	.quad	gcbits..ba
	.quad	go..C270
	.quad	0
	.quad	0
	.byte	1
	.zero	7
	.quad	go..C271
	.quad	2
	.quad	2
	.quad	go..C272
	.quad	0
	.quad	0
	.size	type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9, 128

	.type	.Lconst.204,@object
	.section	.rodata..Lconst.204,"a",@progbits
.Lconst.204:
	.asciz	"func(string, ...interface {})"
	.size	.Lconst.204, 30

	.type	go..C270,@object
	.section	.rodata.go..C270,"a",@progbits
	.p2align	3
go..C270:
	.quad	.Lconst.204
	.quad	29
	.size	go..C270, 16

	.type	go..C271,@object
	.section	.data.go..C271,"aw",@progbits
	.p2align	3
go..C271:
	.quad	string..d
	.quad	type...6.7interface.4.5
	.size	go..C271, 16

	.type	go..C272,@object
	.section	.bss.go..C272,"aw",@nobits
	.p2align	3
go..C272:
	.zero	8
	.size	go..C272, 8

	.type	go..C273,@object
	.section	.data.go..C273,"aw",@progbits
	.p2align	4
go..C273:
	.quad	go..C269
	.quad	0
	.quad	type..func.8string.3.3.3.3.6.7interface.4.5.9.8.9
	.size	go..C273, 24

	.type	pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger,@object
	.section	.rodata.pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger,"aG",@progbits,pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger,comdat
	.weak	pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger
	.p2align	3
pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger:
	.quad	type...1github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger
	.quad	github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger.Printf
	.size	pimt..interface.4Printf.0func.8string.3.3.3.3.6.7interface.4.5.9.8.9.5..github_com_ChrisRx_dungeonfs_pkg_logging.NullLogger, 16

	.type	command_line_arguments.command_line_arguments..init0..f,@object
	.section	.rodata.command_line_arguments.command_line_arguments..init0..f,"a",@progbits
	.globl	command_line_arguments.command_line_arguments..init0..f
	.p2align	3
command_line_arguments.command_line_arguments..init0..f:
	.quad	command_line_arguments.command_line_arguments..init0
	.size	command_line_arguments.command_line_arguments..init0..f, 8

	.type	.Lconst.207,@object
	.section	.rodata..Lconst.207,"a",@progbits
.Lconst.207:
	.asciz	"Method %v: %+v\n"
	.size	.Lconst.207, 16

	.type	.Lconst.209,@object
	.section	.rodata..Lconst.209,"a",@progbits
.Lconst.209:
	.asciz	"WTF!: %+v\n"
	.size	.Lconst.209, 11

	.type	.Lconst.211,@object
	.section	.rodata..Lconst.211,"a",@progbits
.Lconst.211:
	.asciz	"unhandled ast.Stmt type: '%v'\n"
	.size	.Lconst.211, 31

	.type	.Lconst.213,@object
	.section	.rodata..Lconst.213,"a",@progbits
.Lconst.213:
	.asciz	"ReturnError"
	.size	.Lconst.213, 12

	.type	.Lconst.214,@object
	.section	.rodata..Lconst.214,"a",@progbits
	.p2align	3
.Lconst.214:
	.quad	.Lconst.213
	.quad	11
	.size	.Lconst.214, 16

	.type	.Lconst.215,@object
	.section	.rodata..Lconst.215,"a",@progbits
.Lconst.215:
	.asciz	"not enough return arguments"
	.size	.Lconst.215, 28

	.type	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt,@object
	.section	.rodata.pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt,"aG",@progbits,pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt,comdat
	.weak	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt
	.p2align	4
pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt:
	.quad	type...1go_ast.ReturnStmt
	.quad	go_ast.ReturnStmt.End
	.quad	go_ast.ReturnStmt.Pos
	.size	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.ReturnStmt, 24

	.type	.Lconst.217,@object
	.section	.rodata..Lconst.217,"a",@progbits
.Lconst.217:
	.asciz	"evalReturnStmt: %+v\n"
	.size	.Lconst.217, 21

	.type	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt,@object
	.section	.rodata.pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt,"aG",@progbits,pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt,comdat
	.weak	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt
	.p2align	4
pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt:
	.quad	type...1go_ast.BlockStmt
	.quad	go_ast.BlockStmt.End
	.quad	go_ast.BlockStmt.Pos
	.size	pimt..interface.4End.0func.8.9.8go_token.Pos.9.2Pos.0func.8.9.8go_token.Pos.9.5..go_ast.BlockStmt, 24

	.type	.Lconst.219,@object
	.section	.rodata..Lconst.219,"a",@progbits
.Lconst.219:
	.asciz	"evalBlockStmt: %+v\n"
	.size	.Lconst.219, 20

	.type	.Lconst.222,@object
	.section	.rodata..Lconst.222,"a",@progbits
.Lconst.222:
	.asciz	"Block[%d]: %+v\n"
	.size	.Lconst.222, 16

	.type	gcbits..ppppa,@object
	.section	.rodata.gcbits..ppppa,"aG",@progbits,gcbits..ppppa,comdat
	.weak	gcbits..ppppa
gcbits..ppppa:
	.ascii	"\357\275\007"
	.size	gcbits..ppppa, 3

	.type	gcbits..pppppppppa,@object
	.section	.rodata.gcbits..pppppppppa,"aG",@progbits,gcbits..pppppppppa,comdat
	.weak	gcbits..pppppppppa
gcbits..pppppppppa:
	.ascii	"\357\275\367\336{\017"
	.size	gcbits..pppppppppa, 6

	.type	gcbits..ha,@object
	.section	.rodata.gcbits..ha,"aG",@progbits,gcbits..ha,comdat
	.weak	gcbits..ha
gcbits..ha:
	.byte	7
	.size	gcbits..ha, 1

	.type	gcbits..GGaa,@object
	.section	.rodata.gcbits..GGaa,"aG",@progbits,gcbits..GGaa,comdat
	.weak	gcbits..GGaa
gcbits..GGaa:
	.ascii	"\377\003"
	.size	gcbits..GGaa, 2

	.type	gcbits..GGGGGGGGGGGGGGGG,@object
	.section	.rodata.gcbits..GGGGGGGGGGGGGGGG,"aG",@progbits,gcbits..GGGGGGGGGGGGGGGG,comdat
	.weak	gcbits..GGGGGGGGGGGGGGGG
gcbits..GGGGGGGGGGGGGGGG:
	.zero	10,255
	.size	gcbits..GGGGGGGGGGGGGGGG, 10

	.type	gcbits..GGGa,@object
	.section	.rodata.gcbits..GGGa,"aG",@progbits,gcbits..GGGa,comdat
	.weak	gcbits..GGGa
gcbits..GGGa:
	.ascii	"\377\177"
	.size	gcbits..GGGa, 2

	.type	gcbits..pppa,@object
	.section	.rodata.gcbits..pppa,"aG",@progbits,gcbits..pppa,comdat
	.weak	gcbits..pppa
gcbits..pppa:
	.ascii	"\357="
	.size	gcbits..pppa, 2

	.type	go..C0,@object
	.section	.data.go..C0,"aw",@progbits
	.p2align	4
go..C0:
	.quad	0
	.quad	87
	.quad	command_line_arguments.types
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	command_line_arguments.False
	.quad	24
	.quad	16
	.quad	gcbits..da
	.quad	command_line_arguments.True
	.quad	24
	.quad	16
	.quad	gcbits..da
	.quad	command_line_arguments.Nil
	.quad	24
	.quad	16
	.quad	gcbits..da
	.quad	command_line_arguments.ErrInvalidValue
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	command_line_arguments.ErrReturnValue
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	command_line_arguments.PkgLogger
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C30
	.quad	160
	.quad	152
	.quad	gcbits..ppppa
	.quad	go..C62
	.quad	360
	.quad	352
	.quad	gcbits..pppppppppa
	.quad	go..C71
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C74
	.quad	24
	.quad	24
	.quad	gcbits..ha
	.quad	go..C78
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C79
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C81
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C82
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C83
	.quad	80
	.quad	80
	.quad	gcbits..GGaa
	.quad	go..C87
	.quad	40
	.quad	32
	.quad	gcbits..pa
	.quad	go..C96
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C105
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C106
	.quad	24
	.quad	24
	.quad	gcbits..ha
	.quad	go..C107
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C109
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C110
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C114
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C115
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C117
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C118
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C122
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C123
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C125
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C126
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C130
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C131
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C133
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C134
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C138
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C139
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C141
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C142
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C146
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C147
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C149
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C150
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C154
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C155
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C157
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C158
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C162
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C163
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C165
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C166
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C176
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C177
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C179
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C180
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C184
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C185
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C187
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C188
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C192
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C193
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C195
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C196
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C200
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C201
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C203
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C204
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C208
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C209
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C211
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C212
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C213
	.quad	640
	.quad	640
	.quad	gcbits..GGGGGGGGGGGGGGGG
	.quad	go..C224
	.quad	160
	.quad	152
	.quad	gcbits..ppppa
	.quad	go..C231
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C233
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C234
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C237
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C238
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C240
	.quad	120
	.quad	120
	.quad	gcbits..GGGa
	.quad	go..C245
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C246
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C249
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C250
	.quad	8
	.quad	8
	.quad	gcbits..ba
	.quad	go..C252
	.quad	120
	.quad	120
	.quad	gcbits..GGGa
	.quad	go..C258
	.quad	120
	.quad	112
	.quad	gcbits..pppa
	.quad	go..C271
	.quad	16
	.quad	16
	.quad	gcbits..da
	.quad	go..C273
	.quad	24
	.quad	24
	.quad	gcbits..ha
	.size	go..C0, 2800

	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"llvm-goc"
.Linfo_string1:
	.asciz	"./binop.go"
.Linfo_string2:
	.asciz	"/home/wangcong/go_path/src/github.com/ChrisRx/dungeonfs/pkg/eval"
.Linfo_string3:
	.asciz	"runtime.writeBarrier"
.Linfo_string4:
	.asciz	"uint32"
.Linfo_string5:
	.asciz	"command_line_arguments.types"
.Linfo_string6:
	.asciz	"count"
.Linfo_string7:
	.asciz	"int"
.Linfo_string8:
	.asciz	"flags"
.Linfo_string9:
	.asciz	"uint8"
.Linfo_string10:
	.asciz	"B"
.Linfo_string11:
	.asciz	"noverflow"
.Linfo_string12:
	.asciz	"uint16"
.Linfo_string13:
	.asciz	"hash0"
.Linfo_string14:
	.asciz	"buckets"
.Linfo_string15:
	.asciz	"void"
.Linfo_string16:
	.asciz	"oldbuckets"
.Linfo_string17:
	.asciz	"nevacuate"
.Linfo_string18:
	.asciz	"uintptr"
.Linfo_string19:
	.asciz	"extra"
.Linfo_string20:
	.asciz	"runtime.hmap"
.Linfo_string21:
	.asciz	"command_line_arguments.False"
.Linfo_string22:
	.asciz	"typ"
.Linfo_string23:
	.asciz	"size"
.Linfo_string24:
	.asciz	"ptrdata"
.Linfo_string25:
	.asciz	"hash"
.Linfo_string26:
	.asciz	"kind"
.Linfo_string27:
	.asciz	"align"
.Linfo_string28:
	.asciz	"int8"
.Linfo_string29:
	.asciz	"fieldAlign"
.Linfo_string30:
	.asciz	"_"
.Linfo_string31:
	.asciz	"hashfn"
.Linfo_string32:
	.asciz	"code"
.Linfo_string33:
	.asciz	"__go_descriptor"
.Linfo_string34:
	.asciz	"equalfn"
.Linfo_string35:
	.asciz	"bool"
.Linfo_string36:
	.asciz	"gcdata"
.Linfo_string37:
	.asciz	"string"
.Linfo_string38:
	.asciz	"__data"
.Linfo_string39:
	.asciz	"__length"
.Linfo_string40:
	.asciz	"uncommonType"
.Linfo_string41:
	.asciz	"name"
.Linfo_string42:
	.asciz	"pkgPath"
.Linfo_string43:
	.asciz	"methods"
.Linfo_string44:
	.asciz	"__values"
.Linfo_string45:
	.asciz	"mtyp"
.Linfo_string46:
	.asciz	"tfn"
.Linfo_string47:
	.asciz	".reflect.method"
.Linfo_string48:
	.asciz	"__count"
.Linfo_string49:
	.asciz	"__capacity"
.Linfo_string50:
	.asciz	"struct{*.reflect.method,int,int}"
.Linfo_string51:
	.asciz	".reflect.uncommonType"
.Linfo_string52:
	.asciz	"ptrToThis"
.Linfo_string53:
	.asciz	".reflect.rtype"
.Linfo_string54:
	.asciz	"ptr"
.Linfo_string55:
	.asciz	"flag"
.Linfo_string56:
	.asciz	".reflect.flag"
.Linfo_string57:
	.asciz	"Value"
.Linfo_string58:
	.asciz	"command_line_arguments.True"
.Linfo_string59:
	.asciz	"command_line_arguments.Nil"
.Linfo_string60:
	.asciz	"command_line_arguments.ErrInvalidValue"
.Linfo_string61:
	.asciz	"__methods"
.Linfo_string62:
	.asciz	"__type_descriptor"
.Linfo_string63:
	.asciz	"method"
.Linfo_string64:
	.asciz	"struct{*method,int,int}"
.Linfo_string65:
	.asciz	"_type"
.Linfo_string66:
	.asciz	"Error"
.Linfo_string67:
	.asciz	"struct{*_type,*func(*void)string}"
.Linfo_string68:
	.asciz	"__object"
.Linfo_string69:
	.asciz	"error"
.Linfo_string70:
	.asciz	"command_line_arguments.ErrReturnValue"
.Linfo_string71:
	.asciz	"command_line_arguments.PkgLogger"
.Linfo_string72:
	.asciz	"Printf"
.Linfo_string73:
	.asciz	"struct{*_type,*void}"
.Linfo_string74:
	.asciz	"struct{*struct{*_type,*void},int,int}"
.Linfo_string75:
	.asciz	"struct{*_type,*func(*void,string,struct{*struct{*_type,*void},int,int})void}"
.Linfo_string76:
	.asciz	".command-line-arguments.logger"
.Linfo_string77:
	.asciz	"eval.compare"
.Linfo_string78:
	.asciz	"UNNAMED"
.Linfo_string79:
	.asciz	"struct{*Value,error}"
.Linfo_string80:
	.asciz	"a"
.Linfo_string81:
	.asciz	"b"
.Linfo_string82:
	.asciz	"$ret1"
.Linfo_string83:
	.asciz	"$ret0"
.Linfo_string84:
	.asciz	"v"
.Linfo_string85:
	.asciz	"vv"
.Linfo_string86:
	.asciz	"err"
.Linfo_string87:
	.asciz	"eval.printMethods"
.Linfo_string88:
	.asciz	"i"
.Linfo_string89:
	.asciz	"eval.checkValues"
.Linfo_string90:
	.asciz	"command_line_arguments..import"
.Linfo_string91:
	.asciz	"eval.command_line_arguments..import"
.Linfo_string92:
	.asciz	"command_line_arguments.Scope.Insert"
.Linfo_string93:
	.asciz	"eval.Insert..1command_line_arguments.Scope"
.Linfo_string94:
	.asciz	"command_line_arguments.Scope.Lookup"
.Linfo_string95:
	.asciz	"eval.Lookup..1command_line_arguments.Scope"
.Linfo_string96:
	.asciz	"command_line_arguments.NewScope"
.Linfo_string97:
	.asciz	"eval.NewScope"
.Linfo_string98:
	.asciz	"Objects"
.Linfo_string99:
	.asciz	"Scope"
.Linfo_string100:
	.asciz	"command_line_arguments.Context.Eval"
.Linfo_string101:
	.asciz	"eval.Eval..1command_line_arguments.Context"
.Linfo_string102:
	.asciz	"command_line_arguments.Context.evalAssignStmt"
.Linfo_string103:
	.asciz	"eval.evalAssignStmt..1command_line_arguments.Context"
.Linfo_string104:
	.asciz	"command_line_arguments.Context.evalBinaryExpr"
.Linfo_string105:
	.asciz	"eval.evalBinaryExpr..1command_line_arguments.Context"
.Linfo_string106:
	.asciz	"command_line_arguments.Context.evalBlockStmt"
.Linfo_string107:
	.asciz	"eval.evalBlockStmt..1command_line_arguments.Context"
.Linfo_string108:
	.asciz	"command_line_arguments.Context.evalCallExpr"
.Linfo_string109:
	.asciz	"eval.evalCallExpr..1command_line_arguments.Context"
.Linfo_string110:
	.asciz	"command_line_arguments.Context.evalDecl"
.Linfo_string111:
	.asciz	"eval.evalDecl..1command_line_arguments.Context"
.Linfo_string112:
	.asciz	"command_line_arguments.Context.evalExpr"
.Linfo_string113:
	.asciz	"eval.evalExpr..1command_line_arguments.Context"
.Linfo_string114:
	.asciz	"command_line_arguments.Context.evalExprStmt"
.Linfo_string115:
	.asciz	"eval.evalExprStmt..1command_line_arguments.Context"
.Linfo_string116:
	.asciz	"command_line_arguments.Context.evalFuncDecl"
.Linfo_string117:
	.asciz	"eval.evalFuncDecl..1command_line_arguments.Context"
.Linfo_string118:
	.asciz	"command_line_arguments.Context.evalGenDecl"
.Linfo_string119:
	.asciz	"eval.evalGenDecl..1command_line_arguments.Context"
.Linfo_string120:
	.asciz	"command_line_arguments.Context.evalIdent"
.Linfo_string121:
	.asciz	"eval.evalIdent..1command_line_arguments.Context"
.Linfo_string122:
	.asciz	"command_line_arguments.Context.evalIfStmt"
.Linfo_string123:
	.asciz	"eval.evalIfStmt..1command_line_arguments.Context"
.Linfo_string124:
	.asciz	"command_line_arguments.Context.evalReturnStmt"
.Linfo_string125:
	.asciz	"eval.evalReturnStmt..1command_line_arguments.Context"
.Linfo_string126:
	.asciz	"command_line_arguments.Context.evalSelectorExpr"
.Linfo_string127:
	.asciz	"eval.evalSelectorExpr..1command_line_arguments.Context"
.Linfo_string128:
	.asciz	"command_line_arguments.Context.evalStmt"
.Linfo_string129:
	.asciz	"eval.evalStmt..1command_line_arguments.Context"
.Linfo_string130:
	.asciz	"command_line_arguments.Context.evalUnaryExpr"
.Linfo_string131:
	.asciz	"eval.evalUnaryExpr..1command_line_arguments.Context"
.Linfo_string132:
	.asciz	"command_line_arguments.NewContext"
.Linfo_string133:
	.asciz	"eval.NewContext"
.Linfo_string134:
	.asciz	"fset"
.Linfo_string135:
	.asciz	"mutex"
.Linfo_string136:
	.asciz	"w"
.Linfo_string137:
	.asciz	"state"
.Linfo_string138:
	.asciz	"int32"
.Linfo_string139:
	.asciz	"sema"
.Linfo_string140:
	.asciz	"Mutex"
.Linfo_string141:
	.asciz	"writerSem"
.Linfo_string142:
	.asciz	"readerSem"
.Linfo_string143:
	.asciz	"readerCount"
.Linfo_string144:
	.asciz	"readerWait"
.Linfo_string145:
	.asciz	"RWMutex"
.Linfo_string146:
	.asciz	"base"
.Linfo_string147:
	.asciz	"files"
.Linfo_string148:
	.asciz	"set"
.Linfo_string149:
	.asciz	"lines"
.Linfo_string150:
	.asciz	"struct{*int,int,int}"
.Linfo_string151:
	.asciz	"infos"
.Linfo_string152:
	.asciz	"Offset"
.Linfo_string153:
	.asciz	"Filename"
.Linfo_string154:
	.asciz	"Line"
.Linfo_string155:
	.asciz	".go/token.lineInfo"
.Linfo_string156:
	.asciz	"struct{*.go/token.lineInfo,int,int}"
.Linfo_string157:
	.asciz	"File"
.Linfo_string158:
	.asciz	"struct{**File,int,int}"
.Linfo_string159:
	.asciz	"last"
.Linfo_string160:
	.asciz	"FileSet"
.Linfo_string161:
	.asciz	"identifiers"
.Linfo_string162:
	.asciz	"returnSet"
.Linfo_string163:
	.asciz	"returnValue"
.Linfo_string164:
	.asciz	"Context"
.Linfo_string165:
	.asciz	"struct{*Context,error}"
.Linfo_string166:
	.asciz	"command_line_arguments.command_line_arguments.EvalError..hash"
.Linfo_string167:
	.asciz	"eval.command_line_arguments.EvalError..hash"
.Linfo_string168:
	.asciz	"command_line_arguments.command_line_arguments.EvalError..eq"
.Linfo_string169:
	.asciz	"eval.command_line_arguments.EvalError..eq"
.Linfo_string170:
	.asciz	"command_line_arguments.EvalError.End..stub"
.Linfo_string171:
	.asciz	"eval.End..stub.command_line_arguments.EvalError"
.Linfo_string172:
	.asciz	"Pos"
.Linfo_string173:
	.asciz	"command_line_arguments.EvalError.Error"
.Linfo_string174:
	.asciz	"eval.Error.command_line_arguments.EvalError"
.Linfo_string175:
	.asciz	"command_line_arguments.EvalError.Pos..stub"
.Linfo_string176:
	.asciz	"eval.Pos..stub.command_line_arguments.EvalError"
.Linfo_string177:
	.asciz	"command_line_arguments.command_line_arguments..init0"
.Linfo_string178:
	.asciz	"eval.command_line_arguments..init0"
.Linfo_string179:
	.asciz	"values"
.Linfo_string180:
	.asciz	"struct{**Value,int,int}"
.Linfo_string181:
	.asciz	"$ret15"
.Linfo_string182:
	.asciz	"s"
.Linfo_string183:
	.asciz	"k"
.Linfo_string184:
	.asciz	"ok"
.Linfo_string185:
	.asciz	"$ret3"
.Linfo_string186:
	.asciz	"val"
.Linfo_string187:
	.asciz	"$ret2"
.Linfo_string188:
	.asciz	"c"
.Linfo_string189:
	.asciz	"node"
.Linfo_string190:
	.asciz	"End"
.Linfo_string191:
	.asciz	"struct{*_type,*func(*void)Pos,*func(*void)Pos}"
.Linfo_string192:
	.asciz	"Node"
.Linfo_string193:
	.asciz	"n"
.Linfo_string194:
	.asciz	"declNode"
.Linfo_string195:
	.asciz	"struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}"
.Linfo_string196:
	.asciz	"Decl"
.Linfo_string197:
	.asciz	"exprNode"
.Linfo_string198:
	.asciz	"Expr"
.Linfo_string199:
	.asciz	"stmtNode"
.Linfo_string200:
	.asciz	"Stmt"
.Linfo_string201:
	.asciz	"$ret12"
.Linfo_string202:
	.asciz	"e"
.Linfo_string203:
	.asciz	"Lhs"
.Linfo_string204:
	.asciz	"struct{*Expr,int,int}"
.Linfo_string205:
	.asciz	"TokPos"
.Linfo_string206:
	.asciz	"Tok"
.Linfo_string207:
	.asciz	"Token"
.Linfo_string208:
	.asciz	"Rhs"
.Linfo_string209:
	.asciz	"AssignStmt"
.Linfo_string210:
	.asciz	"rhs"
.Linfo_string211:
	.asciz	"$ret33"
.Linfo_string212:
	.asciz	"X"
.Linfo_string213:
	.asciz	"OpPos"
.Linfo_string214:
	.asciz	"Op"
.Linfo_string215:
	.asciz	"Y"
.Linfo_string216:
	.asciz	"BinaryExpr"
.Linfo_string217:
	.asciz	"$ret25"
.Linfo_string218:
	.asciz	"v1"
.Linfo_string219:
	.asciz	"$ret24"
.Linfo_string220:
	.asciz	"v2"
.Linfo_string221:
	.asciz	"Lbrace"
.Linfo_string222:
	.asciz	"List"
.Linfo_string223:
	.asciz	"struct{*Stmt,int,int}"
.Linfo_string224:
	.asciz	"Rbrace"
.Linfo_string225:
	.asciz	"BlockStmt"
.Linfo_string226:
	.asciz	"stmt"
.Linfo_string227:
	.asciz	"$ret39"
.Linfo_string228:
	.asciz	"$ret38"
.Linfo_string229:
	.asciz	"Fun"
.Linfo_string230:
	.asciz	"Lparen"
.Linfo_string231:
	.asciz	"Args"
.Linfo_string232:
	.asciz	"Ellipsis"
.Linfo_string233:
	.asciz	"Rparen"
.Linfo_string234:
	.asciz	"CallExpr"
.Linfo_string235:
	.asciz	"$ret19"
.Linfo_string236:
	.asciz	"arg"
.Linfo_string237:
	.asciz	"value"
.Linfo_string238:
	.asciz	"struct{*Value,int,int}"
.Linfo_string239:
	.asciz	"$ret18"
.Linfo_string240:
	.asciz	"decl"
.Linfo_string241:
	.asciz	"d"
.Linfo_string242:
	.asciz	"Doc"
.Linfo_string243:
	.asciz	"Slash"
.Linfo_string244:
	.asciz	"Text"
.Linfo_string245:
	.asciz	"Comment"
.Linfo_string246:
	.asciz	"struct{**Comment,int,int}"
.Linfo_string247:
	.asciz	"CommentGroup"
.Linfo_string248:
	.asciz	"Recv"
.Linfo_string249:
	.asciz	"Opening"
.Linfo_string250:
	.asciz	"Names"
.Linfo_string251:
	.asciz	"NamePos"
.Linfo_string252:
	.asciz	"Name"
.Linfo_string253:
	.asciz	"Obj"
.Linfo_string254:
	.asciz	"Kind"
.Linfo_string255:
	.asciz	"ObjKind"
.Linfo_string256:
	.asciz	"Data"
.Linfo_string257:
	.asciz	"Type"
.Linfo_string258:
	.asciz	"Object"
.Linfo_string259:
	.asciz	"Ident"
.Linfo_string260:
	.asciz	"struct{**Ident,int,int}"
.Linfo_string261:
	.asciz	"Tag"
.Linfo_string262:
	.asciz	"ValuePos"
.Linfo_string263:
	.asciz	"BasicLit"
.Linfo_string264:
	.asciz	"Field"
.Linfo_string265:
	.asciz	"struct{**Field,int,int}"
.Linfo_string266:
	.asciz	"Closing"
.Linfo_string267:
	.asciz	"FieldList"
.Linfo_string268:
	.asciz	"Func"
.Linfo_string269:
	.asciz	"Params"
.Linfo_string270:
	.asciz	"Results"
.Linfo_string271:
	.asciz	"FuncType"
.Linfo_string272:
	.asciz	"Body"
.Linfo_string273:
	.asciz	"FuncDecl"
.Linfo_string274:
	.asciz	"Specs"
.Linfo_string275:
	.asciz	"specNode"
.Linfo_string276:
	.asciz	"Spec"
.Linfo_string277:
	.asciz	"struct{*Spec,int,int}"
.Linfo_string278:
	.asciz	"GenDecl"
.Linfo_string279:
	.asciz	"$ret6"
.Linfo_string280:
	.asciz	"expr"
.Linfo_string281:
	.asciz	"$ret16"
.Linfo_string282:
	.asciz	"UnaryExpr"
.Linfo_string283:
	.asciz	"Sel"
.Linfo_string284:
	.asciz	"SelectorExpr"
.Linfo_string285:
	.asciz	"ExprStmt"
.Linfo_string286:
	.asciz	"$ret31"
.Linfo_string287:
	.asciz	"$ret21"
.Linfo_string288:
	.asciz	"$ret20"
.Linfo_string289:
	.asciz	"If"
.Linfo_string290:
	.asciz	"Init"
.Linfo_string291:
	.asciz	"Cond"
.Linfo_string292:
	.asciz	"Else"
.Linfo_string293:
	.asciz	"IfStmt"
.Linfo_string294:
	.asciz	"$ret37"
.Linfo_string295:
	.asciz	"cond"
.Linfo_string296:
	.asciz	"Return"
.Linfo_string297:
	.asciz	"ReturnStmt"
.Linfo_string298:
	.asciz	"$ret35"
.Linfo_string299:
	.asciz	"result"
.Linfo_string300:
	.asciz	"$ret34"
.Linfo_string301:
	.asciz	"$ret23"
.Linfo_string302:
	.asciz	"$ret22"
.Linfo_string303:
	.asciz	"$ret28"
.Linfo_string304:
	.asciz	"$ret27"
.Linfo_string305:
	.asciz	"$ret26"
.Linfo_string306:
	.asciz	"$ret4"
.Linfo_string307:
	.asciz	"key"
.Linfo_string308:
	.asciz	"seed"
.Linfo_string309:
	.asciz	"$ret42"
.Linfo_string310:
	.asciz	"key1"
.Linfo_string311:
	.asciz	"key2"
.Linfo_string312:
	.asciz	"$ret43"
.Linfo_string313:
	.asciz	"$this8.pointer"
.Linfo_string314:
	.asciz	"Msg"
.Linfo_string315:
	.asciz	"EvalError"
.Linfo_string316:
	.asciz	"$this8"
.Linfo_string317:
	.asciz	"$ret41"
.Linfo_string318:
	.asciz	"pointer"
.Linfo_string319:
	.asciz	"$this7.pointer"
.Linfo_string320:
	.asciz	"$this7"
.Linfo_string321:
	.asciz	"$ret40"
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Ltmp1
	.quad	.Ltmp6
	.short	1
	.byte	92
	.quad	.Ltmp7
	.quad	.Ltmp8
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc1:
	.quad	.Ltmp6
	.quad	.Lfunc_end0
	.short	10
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin2
	.quad	.Ltmp14
	.short	1
	.byte	85
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Lfunc_begin2
	.quad	.Ltmp13
	.short	6
	.byte	84
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin2
	.quad	.Ltmp15
	.short	6
	.byte	82
	.byte	147
	.byte	8
	.byte	88
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc5:
	.quad	.Lfunc_begin3
	.quad	.Ltmp20
	.short	1
	.byte	85
	.quad	.Ltmp27
	.quad	.Ltmp28
	.short	1
	.byte	85
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin3
	.quad	.Ltmp19
	.short	6
	.byte	84
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp27
	.quad	.Ltmp29
	.short	6
	.byte	84
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc7:
	.quad	.Ltmp17
	.quad	.Ltmp21
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	.Ltmp21
	.quad	.Ltmp23
	.short	1
	.byte	81
	.quad	.Ltmp24
	.quad	.Ltmp26
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Ltmp22
	.quad	.Ltmp25
	.short	10
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp25
	.quad	.Ltmp26
	.short	8
	.byte	82
	.byte	147
	.byte	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp26
	.quad	.Ltmp27
	.short	6
	.byte	82
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Ltmp25
	.quad	.Ltmp26
	.short	3
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp26
	.quad	.Ltmp27
	.short	6
	.byte	82
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Ltmp31
	.quad	.Ltmp32
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin5
	.quad	.Ltmp35
	.short	1
	.byte	84
	.quad	.Ltmp35
	.quad	.Ltmp62
	.short	1
	.byte	95
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Lfunc_begin5
	.quad	.Ltmp35
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp35
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp61
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc13:
	.quad	.Ltmp34
	.quad	.Ltmp35
	.short	5
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp43
	.short	5
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp43
	.quad	.Ltmp45
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp46
	.quad	.Ltmp59
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Ltmp34
	.quad	.Ltmp35
	.short	5
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp51
	.short	5
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp51
	.quad	.Ltmp53
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp54
	.quad	.Ltmp59
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Ltmp34
	.quad	.Ltmp35
	.short	5
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp56
	.short	5
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp56
	.quad	.Ltmp58
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc16:
	.quad	.Ltmp34
	.quad	.Ltmp35
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp35
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp35
	.quad	.Ltmp61
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp63
	.quad	.Lfunc_end5
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Ltmp44
	.quad	.Ltmp46
	.short	3
	.byte	119
	.byte	248
	.byte	0
	.quad	.Ltmp52
	.quad	.Ltmp54
	.short	3
	.byte	119
	.byte	224
	.byte	0
	.quad	.Ltmp57
	.quad	.Ltmp59
	.short	3
	.byte	119
	.byte	200
	.byte	0
	.quad	.Ltmp59
	.quad	.Ltmp60
	.short	3
	.byte	119
	.byte	248
	.byte	0
	.quad	0
	.quad	0
.Ldebug_loc18:
	.quad	.Lfunc_begin6
	.quad	.Ltmp77
	.short	1
	.byte	84
	.quad	.Ltmp77
	.quad	.Ltmp99
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Lfunc_begin6
	.quad	.Ltmp75
	.short	1
	.byte	81
	.quad	.Ltmp75
	.quad	.Ltmp87
	.short	1
	.byte	83
	.quad	.Ltmp100
	.quad	.Lfunc_end6
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Ltmp81
	.quad	.Ltmp98
	.short	2
	.byte	119
	.byte	24
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Ltmp82
	.quad	.Ltmp86
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc22:
	.quad	.Ltmp82
	.quad	.Ltmp86
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Lfunc_begin7
	.quad	.Ltmp104
	.short	1
	.byte	84
	.quad	.Ltmp104
	.quad	.Ltmp134
	.short	1
	.byte	92
	.quad	.Ltmp137
	.quad	.Ltmp139
	.short	1
	.byte	92
	.quad	.Ltmp142
	.quad	.Ltmp147
	.short	1
	.byte	92
	.quad	.Ltmp151
	.quad	.Ltmp157
	.short	1
	.byte	92
	.quad	.Ltmp177
	.quad	.Ltmp183
	.short	1
	.byte	92
	.quad	.Ltmp193
	.quad	.Ltmp198
	.short	1
	.byte	92
	.quad	.Ltmp199
	.quad	.Ltmp200
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc24:
	.quad	.Lfunc_begin7
	.quad	.Ltmp103
	.short	1
	.byte	81
	.quad	.Ltmp103
	.quad	.Ltmp110
	.short	1
	.byte	83
	.quad	.Ltmp111
	.quad	.Ltmp119
	.short	1
	.byte	83
	.quad	.Ltmp121
	.quad	.Ltmp125
	.short	1
	.byte	83
	.quad	.Ltmp127
	.quad	.Ltmp129
	.short	1
	.byte	83
	.quad	.Ltmp131
	.quad	.Ltmp136
	.short	1
	.byte	83
	.quad	.Ltmp137
	.quad	.Ltmp141
	.short	1
	.byte	83
	.quad	.Ltmp193
	.quad	.Ltmp198
	.short	1
	.byte	83
	.quad	.Ltmp199
	.quad	.Ltmp200
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp108
	.quad	.Ltmp110
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp111
	.quad	.Ltmp116
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp121
	.quad	.Ltmp122
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp127
	.quad	.Ltmp128
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp193
	.quad	.Ltmp194
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Ltmp108
	.quad	.Ltmp116
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp121
	.quad	.Ltmp122
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp127
	.quad	.Ltmp128
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp144
	.quad	.Ltmp148
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp150
	.quad	.Ltmp150
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp153
	.quad	.Ltmp156
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp179
	.quad	.Ltmp182
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp193
	.quad	.Ltmp194
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc27:
	.quad	.Ltmp112
	.quad	.Ltmp135
	.short	1
	.byte	94
	.quad	.Ltmp137
	.quad	.Ltmp140
	.short	1
	.byte	94
	.quad	.Ltmp142
	.quad	.Ltmp157
	.short	1
	.byte	94
	.quad	.Ltmp173
	.quad	.Ltmp185
	.short	1
	.byte	94
	.quad	.Ltmp193
	.quad	.Ltmp198
	.short	1
	.byte	94
	.quad	.Ltmp199
	.quad	.Ltmp201
	.short	1
	.byte	94
	.quad	.Ltmp207
	.quad	.Lfunc_end7
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp112
	.quad	.Ltmp113
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc29:
	.quad	.Ltmp112
	.quad	.Ltmp135
	.short	1
	.byte	94
	.quad	.Ltmp137
	.quad	.Ltmp140
	.short	1
	.byte	94
	.quad	.Ltmp142
	.quad	.Ltmp157
	.short	1
	.byte	94
	.quad	.Ltmp159
	.quad	.Ltmp163
	.short	1
	.byte	83
	.quad	.Ltmp165
	.quad	.Ltmp172
	.short	1
	.byte	83
	.quad	.Ltmp173
	.quad	.Ltmp185
	.short	1
	.byte	94
	.quad	.Ltmp193
	.quad	.Ltmp198
	.short	1
	.byte	94
	.quad	.Ltmp199
	.quad	.Ltmp201
	.short	1
	.byte	94
	.quad	.Ltmp207
	.quad	.Lfunc_end7
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc30:
	.quad	.Ltmp144
	.quad	.Ltmp148
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp150
	.quad	.Ltmp150
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp147
	.quad	.Ltmp151
	.short	1
	.byte	92
	.quad	.Ltmp173
	.quad	.Ltmp177
	.short	1
	.byte	92
	.quad	.Ltmp183
	.quad	.Ltmp187
	.short	1
	.byte	92
	.quad	.Ltmp200
	.quad	.Ltmp203
	.short	1
	.byte	92
	.quad	.Ltmp204
	.quad	.Ltmp206
	.short	1
	.byte	92
	.quad	.Ltmp207
	.quad	.Ltmp208
	.short	1
	.byte	92
	.quad	.Ltmp209
	.quad	.Ltmp210
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc32:
	.quad	.Ltmp147
	.quad	.Ltmp151
	.short	1
	.byte	92
	.quad	.Ltmp173
	.quad	.Ltmp177
	.short	1
	.byte	92
	.quad	.Ltmp183
	.quad	.Ltmp187
	.short	1
	.byte	92
	.quad	.Ltmp200
	.quad	.Ltmp203
	.short	1
	.byte	92
	.quad	.Ltmp204
	.quad	.Ltmp206
	.short	1
	.byte	92
	.quad	.Ltmp207
	.quad	.Ltmp208
	.short	1
	.byte	92
	.quad	.Ltmp209
	.quad	.Ltmp210
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp149
	.quad	.Ltmp150
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp150
	.quad	.Ltmp151
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp173
	.quad	.Ltmp174
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc34:
	.quad	.Ltmp149
	.quad	.Ltmp150
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp150
	.quad	.Ltmp151
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp173
	.quad	.Ltmp174
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp191
	.quad	.Ltmp191
	.short	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp191
	.quad	.Lfunc_end7
	.short	10
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp153
	.quad	.Ltmp156
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp159
	.quad	.Ltmp160
	.short	1
	.byte	83
	.quad	.Ltmp161
	.quad	.Ltmp163
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Ltmp165
	.quad	.Ltmp166
	.short	1
	.byte	83
	.quad	.Ltmp168
	.quad	.Ltmp170
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc38:
	.quad	.Ltmp175
	.quad	.Lfunc_end7
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Ltmp179
	.quad	.Ltmp182
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc40:
	.quad	.Ltmp187
	.quad	.Ltmp192
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Ltmp187
	.quad	.Ltmp192
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Lfunc_begin8
	.quad	.Ltmp213
	.short	1
	.byte	84
	.quad	.Ltmp213
	.quad	.Ltmp228
	.short	1
	.byte	86
	.quad	.Ltmp234
	.quad	.Ltmp235
	.short	1
	.byte	86
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Lfunc_begin8
	.quad	.Ltmp213
	.short	1
	.byte	81
	.quad	.Ltmp213
	.quad	.Ltmp217
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Ltmp214
	.quad	.Ltmp218
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	.Ltmp218
	.quad	.Ltmp232
	.short	1
	.byte	95
	.quad	.Ltmp234
	.quad	.Ltmp239
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Ltmp219
	.quad	.Ltmp224
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Ltmp225
	.quad	.Ltmp229
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp234
	.quad	.Ltmp235
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Ltmp225
	.quad	.Ltmp229
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp234
	.quad	.Ltmp235
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc48:
	.quad	.Ltmp227
	.quad	.Ltmp233
	.short	1
	.byte	83
	.quad	.Ltmp235
	.quad	.Ltmp239
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc49:
	.quad	.Ltmp227
	.quad	.Ltmp233
	.short	1
	.byte	83
	.quad	.Ltmp235
	.quad	.Ltmp239
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Lfunc_begin9
	.quad	.Ltmp243
	.short	1
	.byte	84
	.quad	.Ltmp243
	.quad	.Ltmp295
	.short	1
	.byte	95
	.quad	.Ltmp297
	.quad	.Ltmp304
	.short	1
	.byte	95
	.quad	.Ltmp306
	.quad	.Ltmp307
	.short	1
	.byte	95
	.quad	.Ltmp308
	.quad	.Lfunc_end9
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc51:
	.quad	.Lfunc_begin9
	.quad	.Ltmp242
	.short	1
	.byte	81
	.quad	.Ltmp242
	.quad	.Ltmp257
	.short	1
	.byte	86
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Ltmp247
	.quad	.Ltmp250
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp251
	.quad	.Ltmp253
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Ltmp249
	.quad	.Ltmp251
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp285
	.quad	.Ltmp286
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp286
	.quad	.Ltmp287
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp288
	.quad	.Ltmp288
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp288
	.quad	.Ltmp289
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp296
	.quad	.Ltmp296
	.short	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp296
	.quad	.Lfunc_end9
	.short	10
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.byte	16
	.byte	0
	.byte	159
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Ltmp252
	.quad	.Ltmp254
	.short	1
	.byte	93
	.quad	.Ltmp254
	.quad	.Ltmp305
	.short	3
	.byte	119
	.byte	240
	.byte	0
	.quad	.Ltmp306
	.quad	.Ltmp307
	.short	3
	.byte	119
	.byte	240
	.byte	0
	.quad	.Ltmp308
	.quad	.Lfunc_end9
	.short	3
	.byte	119
	.byte	240
	.byte	0
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Ltmp259
	.quad	.Ltmp262
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Ltmp264
	.quad	.Ltmp268
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	.Ltmp287
	.quad	.Ltmp289
	.short	3
	.byte	81
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Ltmp266
	.quad	.Ltmp269
	.short	1
	.byte	80
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Ltmp285
	.quad	.Ltmp286
	.short	3
	.byte	83
	.byte	147
	.byte	8
	.quad	.Ltmp286
	.quad	.Ltmp287
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Ltmp290
	.quad	.Ltmp291
	.short	11
	.byte	147
	.byte	16
	.byte	119
	.byte	176
	.byte	3
	.byte	35
	.byte	16
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp291
	.quad	.Ltmp294
	.short	14
	.byte	147
	.byte	8
	.byte	80
	.byte	147
	.byte	8
	.byte	119
	.byte	176
	.byte	3
	.byte	35
	.byte	16
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp294
	.quad	.Ltmp298
	.short	15
	.byte	94
	.byte	147
	.byte	8
	.byte	80
	.byte	147
	.byte	8
	.byte	119
	.byte	176
	.byte	3
	.byte	35
	.byte	16
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Ltmp294
	.quad	.Ltmp297
	.short	1
	.byte	94
	.quad	.Ltmp299
	.quad	.Ltmp304
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Ltmp299
	.quad	.Ltmp304
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc62:
	.quad	.Lfunc_begin10
	.quad	.Ltmp312
	.short	1
	.byte	84
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin10
	.quad	.Ltmp311
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp311
	.quad	.Ltmp311
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp311
	.quad	.Ltmp322
	.short	6
	.byte	92
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp324
	.quad	.Lfunc_end10
	.short	6
	.byte	92
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc64:
	.quad	.Ltmp310
	.quad	.Ltmp311
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp311
	.quad	.Ltmp311
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp311
	.quad	.Ltmp322
	.short	6
	.byte	92
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp324
	.quad	.Lfunc_end10
	.short	6
	.byte	92
	.byte	147
	.byte	8
	.byte	94
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Ltmp310
	.quad	.Ltmp311
	.short	1
	.byte	82
	.quad	.Ltmp311
	.quad	.Ltmp323
	.short	1
	.byte	94
	.quad	.Ltmp324
	.quad	.Lfunc_end10
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Ltmp310
	.quad	.Ltmp311
	.short	1
	.byte	82
	.quad	.Ltmp311
	.quad	.Ltmp323
	.short	1
	.byte	94
	.quad	.Ltmp324
	.quad	.Lfunc_end10
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Lfunc_begin11
	.quad	.Ltmp337
	.short	1
	.byte	84
	.quad	.Ltmp337
	.quad	.Ltmp379
	.short	1
	.byte	95
	.quad	.Ltmp381
	.quad	.Ltmp387
	.short	1
	.byte	95
	.quad	.Ltmp400
	.quad	.Lfunc_end11
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc68:
	.quad	.Lfunc_begin11
	.quad	.Ltmp337
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp337
	.quad	.Ltmp337
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	.Ltmp337
	.quad	.Ltmp398
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	.Ltmp399
	.quad	.Lfunc_end11
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Ltmp336
	.quad	.Ltmp337
	.short	1
	.byte	82
	.quad	.Ltmp337
	.quad	.Ltmp397
	.short	1
	.byte	92
	.quad	.Ltmp399
	.quad	.Lfunc_end11
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc70:
	.quad	.Ltmp336
	.quad	.Ltmp337
	.short	1
	.byte	82
	.quad	.Ltmp337
	.quad	.Ltmp397
	.short	1
	.byte	92
	.quad	.Ltmp399
	.quad	.Lfunc_end11
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp336
	.quad	.Ltmp337
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp337
	.quad	.Ltmp337
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	.Ltmp337
	.quad	.Ltmp398
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	.Ltmp399
	.quad	.Lfunc_end11
	.short	6
	.byte	93
	.byte	147
	.byte	8
	.byte	92
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc72:
	.quad	.Ltmp345
	.quad	.Ltmp347
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Ltmp346
	.quad	.Ltmp347
	.short	3
	.byte	119
	.byte	168
	.byte	3
	.quad	.Ltmp353
	.quad	.Ltmp354
	.short	3
	.byte	119
	.byte	144
	.byte	3
	.quad	.Ltmp360
	.quad	.Ltmp361
	.short	3
	.byte	119
	.byte	248
	.byte	2
	.quad	.Ltmp367
	.quad	.Ltmp368
	.short	3
	.byte	119
	.byte	224
	.byte	2
	.quad	.Ltmp373
	.quad	.Ltmp374
	.short	3
	.byte	119
	.byte	200
	.byte	2
	.quad	.Ltmp379
	.quad	.Ltmp381
	.short	1
	.byte	95
	.quad	.Ltmp387
	.quad	.Ltmp396
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Ltmp352
	.quad	.Ltmp354
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Ltmp359
	.quad	.Ltmp361
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc76:
	.quad	.Ltmp366
	.quad	.Ltmp368
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Ltmp379
	.quad	.Ltmp380
	.short	1
	.byte	95
	.quad	.Ltmp390
	.quad	.Ltmp392
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Ltmp382
	.quad	.Ltmp383
	.short	8
	.byte	147
	.byte	8
	.byte	117
	.byte	24
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp384
	.quad	.Ltmp386
	.short	9
	.byte	80
	.byte	147
	.byte	8
	.byte	117
	.byte	24
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	.Ltmp404
	.quad	.Ltmp405
	.short	9
	.byte	80
	.byte	147
	.byte	8
	.byte	117
	.byte	24
	.byte	6
	.byte	159
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Ltmp387
	.quad	.Ltmp388
	.short	1
	.byte	95
	.quad	.Ltmp392
	.quad	.Ltmp394
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc80:
	.quad	.Lfunc_begin12
	.quad	.Ltmp415
	.short	1
	.byte	84
	.quad	.Ltmp415
	.quad	.Ltmp425
	.short	1
	.byte	94
	.quad	.Ltmp426
	.quad	.Ltmp427
	.short	1
	.byte	84
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin12
	.quad	.Ltmp419
	.short	1
	.byte	81
	.quad	.Ltmp426
	.quad	.Ltmp427
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc82:
	.quad	.Ltmp420
	.quad	.Ltmp423
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Ltmp420
	.quad	.Ltmp423
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Lfunc_begin13
	.quad	.Lfunc_end13
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc85:
	.quad	.Lfunc_begin14
	.quad	.Lfunc_end14
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Lfunc_begin15
	.quad	.Ltmp430
	.short	1
	.byte	84
	.quad	.Ltmp430
	.quad	.Ltmp446
	.short	1
	.byte	86
	.quad	.Ltmp449
	.quad	.Ltmp451
	.short	1
	.byte	86
	.quad	.Ltmp466
	.quad	.Lfunc_end15
	.short	1
	.byte	86
	.quad	0
	.quad	0
.Ldebug_loc87:
	.quad	.Lfunc_begin15
	.quad	.Ltmp430
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp430
	.quad	.Ltmp431
	.short	6
	.byte	92
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp431
	.quad	.Ltmp464
	.short	7
	.byte	92
	.byte	147
	.byte	8
	.byte	119
	.byte	32
	.byte	147
	.byte	8
	.quad	.Ltmp465
	.quad	.Lfunc_end15
	.short	7
	.byte	92
	.byte	147
	.byte	8
	.byte	119
	.byte	32
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc88:
	.quad	.Ltmp430
	.quad	.Ltmp432
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	.Ltmp432
	.quad	.Ltmp437
	.short	1
	.byte	81
	.quad	.Ltmp466
	.quad	.Ltmp470
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Ltmp434
	.quad	.Ltmp441
	.short	1
	.byte	94
	.quad	.Ltmp444
	.quad	.Ltmp445
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc90:
	.quad	.Ltmp434
	.quad	.Ltmp438
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	.Ltmp438
	.quad	.Ltmp442
	.short	1
	.byte	81
	.quad	.Ltmp444
	.quad	.Ltmp447
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc91:
	.quad	.Ltmp445
	.quad	.Ltmp446
	.short	3
	.byte	94
	.byte	147
	.byte	8
	.quad	.Ltmp446
	.quad	.Ltmp449
	.short	6
	.byte	94
	.byte	147
	.byte	8
	.byte	86
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Ltmp452
	.quad	.Ltmp454
	.short	5
	.byte	147
	.byte	8
	.byte	83
	.byte	147
	.byte	8
	.quad	.Ltmp458
	.quad	.Ltmp460
	.short	5
	.byte	147
	.byte	8
	.byte	83
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Ltmp456
	.quad	.Ltmp458
	.short	1
	.byte	83
	.quad	.Ltmp460
	.quad	.Ltmp463
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc94:
	.quad	.Ltmp456
	.quad	.Ltmp458
	.short	1
	.byte	83
	.quad	.Ltmp460
	.quad	.Ltmp463
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Lfunc_begin16
	.quad	.Ltmp480
	.short	1
	.byte	84
	.quad	.Ltmp480
	.quad	.Ltmp499
	.short	1
	.byte	94
	.quad	.Ltmp500
	.quad	.Ltmp501
	.short	1
	.byte	84
	.quad	0
	.quad	0
.Ldebug_loc96:
	.quad	.Lfunc_begin16
	.quad	.Ltmp479
	.short	1
	.byte	81
	.quad	.Ltmp479
	.quad	.Ltmp498
	.short	1
	.byte	83
	.quad	.Ltmp500
	.quad	.Ltmp501
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc97:
	.quad	.Ltmp484
	.quad	.Ltmp486
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp487
	.quad	.Ltmp489
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Ltmp484
	.quad	.Ltmp489
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp492
	.quad	.Ltmp495
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc99:
	.quad	.Ltmp488
	.quad	.Ltmp489
	.short	1
	.byte	85
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Ltmp492
	.quad	.Ltmp495
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc101:
	.quad	.Lfunc_begin17
	.quad	.Ltmp507
	.short	1
	.byte	84
	.quad	.Ltmp507
	.quad	.Ltmp509
	.short	1
	.byte	94
	.quad	.Ltmp509
	.quad	.Ltmp510
	.short	1
	.byte	84
	.quad	.Ltmp512
	.quad	.Ltmp524
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Lfunc_begin17
	.quad	.Ltmp504
	.short	1
	.byte	81
	.quad	.Ltmp504
	.quad	.Ltmp515
	.short	1
	.byte	83
	.quad	.Ltmp530
	.quad	.Ltmp531
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Ltmp511
	.quad	.Ltmp512
	.short	5
	.byte	147
	.byte	8
	.byte	93
	.byte	147
	.byte	8
	.quad	.Ltmp519
	.quad	.Ltmp526
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	93
	.byte	147
	.byte	8
	.quad	.Ltmp527
	.quad	.Ltmp528
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	93
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc104:
	.quad	.Ltmp519
	.quad	.Ltmp526
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp527
	.quad	.Ltmp528
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Ltmp523
	.quad	.Ltmp529
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Ltmp523
	.quad	.Ltmp529
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin18
	.quad	.Ltmp535
	.short	1
	.byte	84
	.quad	.Ltmp535
	.quad	.Ltmp546
	.short	1
	.byte	83
	.quad	.Ltmp551
	.quad	.Ltmp553
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Lfunc_begin18
	.quad	.Ltmp534
	.short	1
	.byte	81
	.quad	.Ltmp534
	.quad	.Ltmp549
	.short	1
	.byte	92
	.quad	.Ltmp549
	.quad	.Ltmp551
	.short	2
	.byte	119
	.byte	40
	.quad	.Ltmp551
	.quad	.Ltmp555
	.short	1
	.byte	92
	.quad	.Ltmp555
	.quad	.Ltmp583
	.short	2
	.byte	119
	.byte	40
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Ltmp539
	.quad	.Ltmp543
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Ltmp539
	.quad	.Ltmp543
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	.Ltmp554
	.quad	.Ltmp555
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	83
	.byte	147
	.byte	8
	.quad	.Ltmp582
	.quad	.Ltmp584
	.short	6
	.byte	80
	.byte	147
	.byte	8
	.byte	83
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Ltmp542
	.quad	.Ltmp548
	.short	1
	.byte	94
	.quad	.Ltmp548
	.quad	.Ltmp551
	.short	2
	.byte	119
	.byte	32
	.quad	.Ltmp551
	.quad	.Ltmp552
	.short	1
	.byte	94
	.quad	.Ltmp555
	.quad	.Ltmp583
	.short	2
	.byte	119
	.byte	32
	.quad	0
	.quad	0
.Ldebug_loc112:
	.quad	.Ltmp557
	.quad	.Ltmp566
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Ltmp557
	.quad	.Ltmp566
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Ltmp568
	.quad	.Ltmp572
	.short	2
	.byte	119
	.byte	48
	.quad	.Ltmp573
	.quad	.Ltmp577
	.short	2
	.byte	119
	.byte	48
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Ltmp570
	.quad	.Ltmp573
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	.Ltmp573
	.quad	.Ltmp577
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Lfunc_begin19
	.quad	.Ltmp590
	.short	1
	.byte	84
	.quad	.Ltmp590
	.quad	.Ltmp610
	.short	1
	.byte	92
	.quad	.Ltmp611
	.quad	.Ltmp636
	.short	1
	.byte	92
	.quad	.Ltmp636
	.quad	.Ltmp637
	.short	1
	.byte	84
	.quad	.Ltmp637
	.quad	.Lfunc_end19
	.short	1
	.byte	92
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Lfunc_begin19
	.quad	.Ltmp588
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp588
	.quad	.Ltmp589
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp589
	.quad	.Ltmp609
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp611
	.quad	.Ltmp636
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp636
	.quad	.Lfunc_end19
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Ltmp586
	.quad	.Ltmp588
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	.Ltmp588
	.quad	.Ltmp589
	.short	6
	.byte	81
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp589
	.quad	.Ltmp609
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp611
	.quad	.Ltmp636
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	95
	.byte	147
	.byte	8
	.quad	.Ltmp636
	.quad	.Lfunc_end19
	.short	6
	.byte	83
	.byte	147
	.byte	8
	.byte	82
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Ltmp595
	.quad	.Ltmp598
	.short	4
	.byte	124
	.byte	24
	.byte	6
	.byte	159
	.quad	.Ltmp604
	.quad	.Ltmp605
	.short	3
	.byte	119
	.byte	208
	.byte	1
	.quad	.Ltmp605
	.quad	.Ltmp608
	.short	4
	.byte	124
	.byte	24
	.byte	6
	.byte	159
	.quad	.Ltmp617
	.quad	.Ltmp618
	.short	3
	.byte	119
	.byte	184
	.byte	1
	.quad	.Ltmp624
	.quad	.Ltmp625
	.short	3
	.byte	119
	.byte	160
	.byte	1
	.quad	.Ltmp631
	.quad	.Ltmp632
	.short	3
	.byte	119
	.byte	136
	.byte	1
	.quad	.Ltmp635
	.quad	.Ltmp636
	.short	3
	.byte	119
	.byte	240
	.byte	0
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Ltmp603
	.quad	.Ltmp605
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Ltmp616
	.quad	.Ltmp618
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Ltmp623
	.quad	.Ltmp625
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc123:
	.quad	.Ltmp630
	.quad	.Ltmp632
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Ltmp634
	.quad	.Ltmp636
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Lfunc_begin20
	.quad	.Ltmp650
	.short	1
	.byte	84
	.quad	.Ltmp650
	.quad	.Ltmp657
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Lfunc_begin20
	.quad	.Ltmp649
	.short	1
	.byte	81
	.quad	.Ltmp649
	.quad	.Ltmp659
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc127:
	.quad	.Ltmp654
	.quad	.Ltmp658
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Ltmp654
	.quad	.Ltmp658
	.short	3
	.byte	80
	.byte	147
	.byte	8
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Ltmp657
	.quad	.Ltmp666
	.short	1
	.byte	95
	.quad	.Ltmp667
	.quad	.Lfunc_end20
	.short	1
	.byte	95
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Ltmp661
	.quad	.Ltmp666
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Ltmp661
	.quad	.Ltmp666
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Lfunc_begin21
	.quad	.Ltmp671
	.short	1
	.byte	84
	.quad	.Ltmp671
	.quad	.Ltmp675
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Ltmp672
	.quad	.Ltmp689
	.short	1
	.byte	83
	.quad	.Ltmp690
	.quad	.Lfunc_end21
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc134:
	.quad	.Ltmp672
	.quad	.Ltmp689
	.short	1
	.byte	83
	.quad	.Ltmp690
	.quad	.Lfunc_end21
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp677
	.quad	.Ltmp679
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	.Ltmp679
	.quad	.Ltmp681
	.short	1
	.byte	81
	.quad	.Ltmp683
	.quad	.Ltmp684
	.short	1
	.byte	81
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Lfunc_begin22
	.quad	.Ltmp691
	.short	1
	.byte	85
	.quad	.Ltmp691
	.quad	.Ltmp692
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Ltmp691
	.quad	.Ltmp693
	.short	3
	.byte	16
	.byte	0
	.byte	159
	.quad	.Ltmp693
	.quad	.Lfunc_end22
	.short	1
	.byte	80
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Lfunc_begin23
	.quad	.Ltmp700
	.short	1
	.byte	85
	.quad	.Ltmp700
	.quad	.Ltmp705
	.short	1
	.byte	83
	.quad	.Ltmp707
	.quad	.Ltmp708
	.short	1
	.byte	85
	.quad	0
	.quad	0
.Ldebug_loc139:
	.quad	.Lfunc_begin23
	.quad	.Ltmp698
	.short	1
	.byte	84
	.quad	.Ltmp698
	.quad	.Ltmp706
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Lfunc_begin24
	.quad	.Ltmp710
	.short	1
	.byte	85
	.quad	.Ltmp710
	.quad	.Ltmp716
	.short	1
	.byte	83
	.quad	.Ltmp718
	.quad	.Lfunc_end24
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Ltmp712
	.quad	.Ltmp717
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc142:
	.quad	.Ltmp713
	.quad	.Ltmp715
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	.Ltmp715
	.quad	.Ltmp718
	.short	1
	.byte	80
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Lfunc_begin25
	.quad	.Ltmp722
	.short	1
	.byte	85
	.quad	.Ltmp724
	.quad	.Ltmp725
	.short	1
	.byte	85
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Ltmp721
	.quad	.Ltmp723
	.short	3
	.byte	119
	.byte	176
	.byte	1
	.quad	0
	.quad	0
.Ldebug_loc145:
	.quad	.Lfunc_begin26
	.quad	.Ltmp727
	.short	1
	.byte	85
	.quad	.Ltmp727
	.quad	.Ltmp733
	.short	1
	.byte	83
	.quad	.Ltmp735
	.quad	.Lfunc_end26
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Ltmp729
	.quad	.Ltmp734
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Ltmp730
	.quad	.Ltmp732
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	.Ltmp732
	.quad	.Ltmp735
	.short	1
	.byte	80
	.quad	0
	.quad	0
	.section	.debug_abbrev,"",@progbits
	.byte	1
	.byte	17
	.byte	1
	.byte	37
	.byte	14
	.byte	19
	.byte	5
	.byte	3
	.byte	14
	.byte	16
	.byte	23
	.byte	27
	.byte	14
	.ascii	"\264B"
	.byte	25
	.byte	17
	.byte	1
	.byte	85
	.byte	23
	.byte	0
	.byte	0
	.byte	2
	.byte	52
	.byte	0
	.byte	3
	.byte	14
	.byte	73
	.byte	19
	.byte	63
	.byte	25
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	110
	.byte	14
	.byte	0
	.byte	0
	.byte	3
	.byte	36
	.byte	0
	.byte	3
	.byte	14
	.byte	62
	.byte	11
	.byte	11
	.byte	11
	.byte	0
	.byte	0
	.byte	4
	.byte	52
	.byte	0
	.byte	3
	.byte	14
	.byte	73
	.byte	19
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	110
	.byte	14
	.byte	0
	.byte	0
	.byte	5
	.byte	15
	.byte	0
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	6
	.byte	19
	.byte	1
	.byte	3
	.byte	14
	.byte	11
	.byte	11
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.ascii	"\210\001"
	.byte	15
	.byte	0
	.byte	0
	.byte	7
	.byte	13
	.byte	0
	.byte	3
	.byte	14
	.byte	73
	.byte	19
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.ascii	"\210\001"
	.byte	15
	.byte	56
	.byte	11
	.byte	0
	.byte	0
	.byte	8
	.byte	21
	.byte	1
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	9
	.byte	5
	.byte	0
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	10
	.byte	19
	.byte	1
	.byte	3
	.byte	14
	.byte	11
	.byte	11
	.ascii	"\210\001"
	.byte	15
	.byte	0
	.byte	0
	.byte	11
	.byte	46
	.byte	1
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	64
	.byte	24
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	12
	.byte	5
	.byte	0
	.byte	2
	.byte	24
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	13
	.byte	52
	.byte	0
	.byte	2
	.byte	23
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	14
	.byte	11
	.byte	1
	.byte	85
	.byte	23
	.byte	0
	.byte	0
	.byte	15
	.byte	46
	.byte	0
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	64
	.byte	24
	.byte	110
	.byte	14
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	63
	.byte	25
	.byte	0
	.byte	0
	.byte	16
	.byte	46
	.byte	1
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	64
	.byte	24
	.byte	110
	.byte	14
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	63
	.byte	25
	.byte	0
	.byte	0
	.byte	17
	.byte	5
	.byte	0
	.byte	2
	.byte	23
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	18
	.byte	11
	.byte	1
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	0
	.byte	0
	.byte	19
	.byte	46
	.byte	1
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	32
	.byte	11
	.byte	0
	.byte	0
	.byte	20
	.byte	5
	.byte	0
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	21
	.byte	52
	.byte	0
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	22
	.byte	11
	.byte	1
	.byte	0
	.byte	0
	.byte	23
	.byte	29
	.byte	1
	.byte	49
	.byte	19
	.byte	85
	.byte	23
	.byte	88
	.byte	11
	.byte	89
	.byte	11
	.byte	0
	.byte	0
	.byte	24
	.byte	5
	.byte	0
	.byte	2
	.byte	23
	.byte	49
	.byte	19
	.byte	0
	.byte	0
	.byte	25
	.byte	52
	.byte	0
	.byte	2
	.byte	23
	.byte	49
	.byte	19
	.byte	0
	.byte	0
	.byte	26
	.byte	29
	.byte	1
	.byte	49
	.byte	19
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	88
	.byte	11
	.byte	89
	.byte	11
	.byte	0
	.byte	0
	.byte	27
	.byte	52
	.byte	0
	.byte	28
	.byte	15
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	8125
	.short	4
	.long	.debug_abbrev
	.byte	8
	.byte	1
	.long	.Linfo_string0
	.short	22
	.long	.Linfo_string1
	.long	.Lline_table_start0
	.long	.Linfo_string2

	.quad	0
	.long	.Ldebug_ranges34
	.byte	2
	.long	.Linfo_string3
	.long	57

	.byte	1
	.byte	1
	.long	.Linfo_string3
	.byte	3
	.long	.Linfo_string4
	.byte	7
	.byte	4
	.byte	4
	.long	.Linfo_string5
	.long	79
	.byte	2
	.byte	9
	.long	.Linfo_string5
	.byte	5
	.long	84
	.byte	6
	.long	.Linfo_string20
	.byte	48
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string6
	.long	211
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string8
	.long	218
	.byte	1
	.byte	1
	.byte	1
	.byte	8
	.byte	7
	.long	.Linfo_string10
	.long	218
	.byte	1
	.byte	1
	.byte	1
	.byte	9
	.byte	7
	.long	.Linfo_string11
	.long	225
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	7
	.long	.Linfo_string13
	.long	57
	.byte	1
	.byte	1
	.byte	4
	.byte	12
	.byte	7
	.long	.Linfo_string14
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string16
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string17
	.long	244
	.byte	1
	.byte	1
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string19
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	40
	.byte	0
	.byte	3
	.long	.Linfo_string7
	.byte	5
	.byte	8
	.byte	3
	.long	.Linfo_string9
	.byte	7
	.byte	1
	.byte	3
	.long	.Linfo_string12
	.byte	7
	.byte	2
	.byte	5
	.long	237
	.byte	3
	.long	.Linfo_string15
	.byte	0
	.byte	0
	.byte	3
	.long	.Linfo_string18
	.byte	7
	.byte	8
	.byte	2
	.long	.Linfo_string21
	.long	266

	.byte	5
	.byte	11
	.long	.Linfo_string21
	.byte	6
	.long	.Linfo_string57
	.byte	24
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string22
	.long	315
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string54
	.long	232
	.byte	3
	.byte	6
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string55
	.long	838
	.byte	3
	.byte	6
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	320
	.byte	6
	.long	.Linfo_string53
	.byte	72
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string23
	.long	244
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string24
	.long	244
	.byte	3
	.byte	6
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string25
	.long	57
	.byte	3
	.byte	6
	.byte	4
	.byte	16
	.byte	7
	.long	.Linfo_string26
	.long	218
	.byte	3
	.byte	6
	.byte	1
	.byte	20
	.byte	7
	.long	.Linfo_string27
	.long	499
	.byte	3
	.byte	6
	.byte	1
	.byte	21
	.byte	7
	.long	.Linfo_string29
	.long	218
	.byte	3
	.byte	6
	.byte	1
	.byte	22
	.byte	7
	.long	.Linfo_string30
	.long	218
	.byte	3
	.byte	6
	.byte	1
	.byte	23
	.byte	7
	.long	.Linfo_string31
	.long	506
	.byte	3
	.byte	6
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string34
	.long	555
	.byte	3
	.byte	6
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string36
	.long	611
	.byte	3
	.byte	6
	.byte	8
	.byte	40
	.byte	7
	.long	.Linfo_string37
	.long	616
	.byte	3
	.byte	6
	.byte	8
	.byte	48
	.byte	7
	.long	.Linfo_string40
	.long	657
	.byte	3
	.byte	6
	.byte	8
	.byte	56
	.byte	7
	.long	.Linfo_string52
	.long	232
	.byte	3
	.byte	6
	.byte	8
	.byte	64
	.byte	0
	.byte	3
	.long	.Linfo_string28
	.byte	5
	.byte	1
	.byte	5
	.long	511
	.byte	6
	.long	.Linfo_string33
	.byte	8
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string32
	.long	534
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	0
	.byte	5
	.long	539
	.byte	8
	.long	244
	.byte	9
	.long	232
	.byte	9
	.long	244
	.byte	0
	.byte	5
	.long	560
	.byte	6
	.long	.Linfo_string33
	.byte	8
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string32
	.long	583
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	0
	.byte	5
	.long	588
	.byte	8
	.long	604
	.byte	9
	.long	232
	.byte	9
	.long	232
	.byte	0
	.byte	3
	.long	.Linfo_string35
	.byte	7
	.byte	1
	.byte	5
	.long	218
	.byte	5
	.long	621
	.byte	6
	.long	.Linfo_string37
	.byte	16
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string38
	.long	611
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string39
	.long	211
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	662
	.byte	6
	.long	.Linfo_string51
	.byte	40
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string41
	.long	616
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string42
	.long	616
	.byte	3
	.byte	6
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string43
	.long	711
	.byte	3
	.byte	6
	.byte	8
	.byte	16
	.byte	0
	.byte	10
	.long	.Linfo_string50
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	758
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	763
	.byte	6
	.long	.Linfo_string47
	.byte	40
	.byte	3
	.byte	6
	.byte	1
	.byte	7
	.long	.Linfo_string41
	.long	616
	.byte	3
	.byte	6
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string42
	.long	616
	.byte	3
	.byte	6
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string45
	.long	232
	.byte	3
	.byte	6
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string22
	.long	232
	.byte	3
	.byte	6
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string46
	.long	232
	.byte	3
	.byte	6
	.byte	8
	.byte	32
	.byte	0
	.byte	3
	.long	.Linfo_string56
	.byte	7
	.byte	8
	.byte	2
	.long	.Linfo_string58
	.long	266

	.byte	5
	.byte	12
	.long	.Linfo_string58
	.byte	2
	.long	.Linfo_string59
	.long	266

	.byte	5
	.byte	13
	.long	.Linfo_string59
	.byte	2
	.long	.Linfo_string60
	.long	890

	.byte	5
	.byte	15
	.long	.Linfo_string60
	.byte	6
	.long	.Linfo_string69
	.byte	16
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	926
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	931
	.byte	10
	.long	.Linfo_string67
	.byte	16
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string66
	.long	1373
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	970
	.byte	6
	.long	.Linfo_string65
	.byte	72
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string23
	.long	244
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string24
	.long	244
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string25
	.long	57
	.byte	1
	.byte	1
	.byte	4
	.byte	16
	.byte	7
	.long	.Linfo_string26
	.long	218
	.byte	1
	.byte	1
	.byte	1
	.byte	20
	.byte	7
	.long	.Linfo_string27
	.long	218
	.byte	1
	.byte	1
	.byte	1
	.byte	21
	.byte	7
	.long	.Linfo_string29
	.long	218
	.byte	1
	.byte	1
	.byte	1
	.byte	22
	.byte	7
	.long	.Linfo_string31
	.long	1136
	.byte	1
	.byte	1
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string34
	.long	1164
	.byte	1
	.byte	1
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string36
	.long	611
	.byte	1
	.byte	1
	.byte	8
	.byte	40
	.byte	7
	.long	.Linfo_string37
	.long	616
	.byte	1
	.byte	1
	.byte	8
	.byte	48
	.byte	7
	.long	.Linfo_string40
	.long	1192
	.byte	1
	.byte	1
	.byte	8
	.byte	56
	.byte	7
	.long	.Linfo_string52
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	64
	.byte	0
	.byte	5
	.long	1141
	.byte	6
	.long	.Linfo_string33
	.byte	8
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string32
	.long	534
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	0
	.byte	5
	.long	1169
	.byte	6
	.long	.Linfo_string33
	.byte	8
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string32
	.long	583
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	0
	.byte	5
	.long	1197
	.byte	6
	.long	.Linfo_string40
	.byte	40
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string41
	.long	616
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string42
	.long	616
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string43
	.long	1246
	.byte	1
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	10
	.long	.Linfo_string64
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	1293
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	1298
	.byte	6
	.long	.Linfo_string63
	.byte	40
	.byte	1
	.byte	1
	.byte	1
	.byte	7
	.long	.Linfo_string41
	.long	616
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string42
	.long	616
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string45
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string22
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string46
	.long	232
	.byte	1
	.byte	1
	.byte	8
	.byte	32
	.byte	0
	.byte	5
	.long	1378
	.byte	8
	.long	621
	.byte	9
	.long	232
	.byte	0
	.byte	2
	.long	.Linfo_string70
	.long	890

	.byte	5
	.byte	16
	.long	.Linfo_string70
	.byte	2
	.long	.Linfo_string71
	.long	1419

	.byte	6
	.byte	11
	.long	.Linfo_string71
	.byte	6
	.long	.Linfo_string76
	.byte	16
	.byte	6
	.byte	7
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	1455
	.byte	6
	.byte	7
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	6
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	1460
	.byte	10
	.long	.Linfo_string75
	.byte	16
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	7
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string72
	.long	1494
	.byte	4
	.byte	7
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	1499
	.byte	8
	.long	237
	.byte	9
	.long	232
	.byte	9
	.long	621
	.byte	9
	.long	1520
	.byte	0
	.byte	10
	.long	.Linfo_string74
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	1567
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	1572
	.byte	10
	.long	.Linfo_string73
	.byte	16
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	11
	.quad	.Lfunc_begin0
	.long	.Lfunc_end0-.Lfunc_begin0
	.byte	1
	.byte	87
	.long	.Linfo_string89
	.byte	5
	.byte	42
	.long	890
	.byte	12
	.byte	3
	.byte	145
	.asciz	"\300"
	.long	.Linfo_string179
	.byte	5
	.byte	42
	.long	5995
	.byte	13
	.long	.Ldebug_loc1
	.long	.Linfo_string181
	.byte	5
	.byte	42
	.long	890
	.byte	14
	.long	.Ldebug_ranges0
	.byte	13
	.long	.Ldebug_loc0
	.long	.Linfo_string84
	.byte	5
	.byte	43
	.long	2357
	.byte	0
	.byte	0
	.byte	15
	.quad	.Lfunc_begin1
	.long	.Lfunc_end1-.Lfunc_begin1
	.byte	1
	.byte	87
	.long	.Linfo_string90
	.long	.Linfo_string91
	.byte	3
	.byte	1
	.long	237

	.byte	16
	.quad	.Lfunc_begin2
	.long	.Lfunc_end2-.Lfunc_begin2
	.byte	1
	.byte	87
	.long	.Linfo_string92
	.long	.Linfo_string93
	.byte	2
	.byte	24
	.long	237

	.byte	17
	.long	.Ldebug_loc2
	.long	.Linfo_string182
	.byte	2
	.byte	24
	.long	5363
	.byte	17
	.long	.Ldebug_loc3
	.long	.Linfo_string183
	.byte	2
	.byte	24
	.long	621
	.byte	17
	.long	.Ldebug_loc4
	.long	.Linfo_string84
	.byte	2
	.byte	24
	.long	1572
	.byte	0
	.byte	16
	.quad	.Lfunc_begin3
	.long	.Lfunc_end3-.Lfunc_begin3
	.byte	1
	.byte	87
	.long	.Linfo_string94
	.long	.Linfo_string95
	.byte	2
	.byte	28
	.long	1572

	.byte	17
	.long	.Ldebug_loc5
	.long	.Linfo_string182
	.byte	2
	.byte	28
	.long	5363
	.byte	17
	.long	.Ldebug_loc6
	.long	.Linfo_string41
	.byte	2
	.byte	28
	.long	621
	.byte	13
	.long	.Ldebug_loc8
	.long	.Linfo_string185
	.byte	2
	.byte	28
	.long	1572
	.byte	14
	.long	.Ldebug_ranges1
	.byte	13
	.long	.Ldebug_loc7
	.long	.Linfo_string184
	.byte	2
	.byte	29
	.long	604
	.byte	13
	.long	.Ldebug_loc9
	.long	.Linfo_string186
	.byte	2
	.byte	29
	.long	1572
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin4
	.long	.Lfunc_end4-.Lfunc_begin4
	.byte	1
	.byte	87
	.long	.Linfo_string96
	.long	.Linfo_string97
	.byte	2
	.byte	18
	.long	5363

	.byte	13
	.long	.Ldebug_loc10
	.long	.Linfo_string187
	.byte	2
	.byte	18
	.long	5363
	.byte	0
	.byte	16
	.quad	.Lfunc_begin5
	.long	.Lfunc_end5-.Lfunc_begin5
	.byte	1
	.byte	87
	.long	.Linfo_string100
	.long	.Linfo_string101
	.byte	5
	.byte	19
	.long	2323

	.byte	17
	.long	.Ldebug_loc11
	.long	.Linfo_string188
	.byte	5
	.byte	19
	.long	5425
	.byte	17
	.long	.Ldebug_loc12
	.long	.Linfo_string189
	.byte	5
	.byte	19
	.long	6047
	.byte	13
	.long	.Ldebug_loc17
	.long	.Linfo_string201
	.byte	5
	.byte	19
	.long	2357
	.byte	14
	.long	.Ldebug_ranges2
	.byte	13
	.long	.Ldebug_loc13
	.long	.Linfo_string193
	.byte	5
	.byte	20
	.long	6151
	.byte	0
	.byte	14
	.long	.Ldebug_ranges3
	.byte	13
	.long	.Ldebug_loc14
	.long	.Linfo_string193
	.byte	5
	.byte	20
	.long	6268
	.byte	0
	.byte	14
	.long	.Ldebug_ranges4
	.byte	13
	.long	.Ldebug_loc15
	.long	.Linfo_string193
	.byte	5
	.byte	20
	.long	6369
	.byte	0
	.byte	18
	.quad	.Ltmp65
	.long	.Ltmp72-.Ltmp65
	.byte	13
	.long	.Ldebug_loc16
	.long	.Linfo_string193
	.byte	5
	.byte	20
	.long	6047
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin6
	.long	.Lfunc_end6-.Lfunc_begin6
	.byte	1
	.byte	87
	.long	.Linfo_string102
	.long	.Linfo_string103
	.byte	7
	.byte	41
	.long	2323

	.byte	17
	.long	.Ldebug_loc18
	.long	.Linfo_string188
	.byte	7
	.byte	41
	.long	5425
	.byte	17
	.long	.Ldebug_loc19
	.long	.Linfo_string202
	.byte	7
	.byte	41
	.long	6470
	.byte	13
	.long	.Ldebug_loc22
	.long	.Linfo_string211
	.byte	7
	.byte	41
	.long	890
	.byte	18
	.quad	.Ltmp73
	.long	.Ltmp97-.Ltmp73
	.byte	13
	.long	.Ldebug_loc20
	.long	.Linfo_string210
	.byte	7
	.byte	42
	.long	2357
	.byte	13
	.long	.Ldebug_loc21
	.long	.Linfo_string86
	.byte	7
	.byte	42
	.long	890
	.byte	0
	.byte	0
	.byte	19
	.long	.Linfo_string77
	.byte	3
	.byte	10
	.long	2323
	.byte	1
	.byte	20
	.long	.Linfo_string80
	.byte	3
	.byte	10
	.long	2357
	.byte	20
	.long	.Linfo_string81
	.byte	3
	.byte	10
	.long	2357
	.byte	21
	.long	.Linfo_string82
	.byte	3
	.byte	10
	.long	890
	.byte	21
	.long	.Linfo_string83
	.byte	3
	.byte	10
	.long	2357
	.byte	22
	.byte	21
	.long	.Linfo_string84
	.byte	3
	.byte	17
	.long	604
	.byte	21
	.long	.Linfo_string85
	.byte	3
	.byte	30
	.long	2357
	.byte	22
	.byte	21
	.long	.Linfo_string86
	.byte	3
	.byte	11
	.long	890
	.byte	0
	.byte	0
	.byte	0
	.byte	10
	.long	.Linfo_string79
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string78
	.long	2357
	.byte	4
	.byte	10
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string78
	.long	890
	.byte	4
	.byte	10
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	266
	.byte	16
	.quad	.Lfunc_begin7
	.long	.Lfunc_end7-.Lfunc_begin7
	.byte	1
	.byte	87
	.long	.Linfo_string104
	.long	.Linfo_string105
	.byte	8
	.byte	110
	.long	2323

	.byte	17
	.long	.Ldebug_loc23
	.long	.Linfo_string188
	.byte	8
	.byte	110
	.long	5425
	.byte	17
	.long	.Ldebug_loc24
	.long	.Linfo_string202
	.byte	8
	.byte	110
	.long	6596
	.byte	13
	.long	.Ldebug_loc26
	.long	.Linfo_string217
	.byte	8
	.byte	110
	.long	890
	.byte	13
	.long	.Ldebug_loc29
	.long	.Linfo_string219
	.byte	8
	.byte	110
	.long	2357
	.byte	18
	.quad	.Ltmp101
	.long	.Ltmp212-.Ltmp101
	.byte	13
	.long	.Ldebug_loc25
	.long	.Linfo_string86
	.byte	8
	.byte	111
	.long	890
	.byte	13
	.long	.Ldebug_loc27
	.long	.Linfo_string218
	.byte	8
	.byte	111
	.long	2357
	.byte	14
	.long	.Ldebug_ranges6
	.byte	13
	.long	.Ldebug_loc35
	.long	.Linfo_string86
	.byte	8
	.byte	136
	.long	890
	.byte	14
	.long	.Ldebug_ranges5
	.byte	13
	.long	.Ldebug_loc36
	.long	.Linfo_string85
	.byte	8
	.byte	130
	.long	2357
	.byte	0
	.byte	0
	.byte	14
	.long	.Ldebug_ranges8
	.byte	13
	.long	.Ldebug_loc39
	.long	.Linfo_string86
	.byte	8
	.byte	150
	.long	890
	.byte	14
	.long	.Ldebug_ranges7
	.byte	13
	.long	.Ldebug_loc37
	.long	.Linfo_string85
	.byte	8
	.byte	144
	.long	2357
	.byte	0
	.byte	0
	.byte	14
	.long	.Ldebug_ranges11
	.byte	13
	.long	.Ldebug_loc30
	.long	.Linfo_string86
	.byte	8
	.byte	117
	.long	890
	.byte	13
	.long	.Ldebug_loc31
	.long	.Linfo_string220
	.byte	8
	.byte	117
	.long	2357
	.byte	23
	.long	2229
	.long	.Ldebug_ranges9
	.byte	8
	.byte	121
	.byte	24
	.long	.Ldebug_loc28
	.long	2241
	.byte	24
	.long	.Ldebug_loc32
	.long	2252
	.byte	25
	.long	.Ldebug_loc34
	.long	2263
	.byte	25
	.long	.Ldebug_loc41
	.long	2274
	.byte	14
	.long	.Ldebug_ranges10
	.byte	25
	.long	.Ldebug_loc38
	.long	2286
	.byte	25
	.long	.Ldebug_loc40
	.long	2297
	.byte	18
	.quad	.Ltmp147
	.long	.Ltmp150-.Ltmp147
	.byte	25
	.long	.Ldebug_loc33
	.long	2309
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin8
	.long	.Lfunc_end8-.Lfunc_begin8
	.byte	1
	.byte	87
	.long	.Linfo_string106
	.long	.Linfo_string107
	.byte	7
	.byte	80
	.long	2323

	.byte	17
	.long	.Ldebug_loc42
	.long	.Linfo_string188
	.byte	7
	.byte	80
	.long	5425
	.byte	17
	.long	.Ldebug_loc43
	.long	.Linfo_string202
	.byte	7
	.byte	80
	.long	6663
	.byte	13
	.long	.Ldebug_loc47
	.long	.Linfo_string227
	.byte	7
	.byte	80
	.long	890
	.byte	13
	.long	.Ldebug_loc49
	.long	.Linfo_string228
	.byte	7
	.byte	80
	.long	2357
	.byte	14
	.long	.Ldebug_ranges13
	.byte	13
	.long	.Ldebug_loc44
	.long	.Linfo_string88
	.byte	7
	.byte	82
	.long	211
	.byte	13
	.long	.Ldebug_loc45
	.long	.Linfo_string226
	.byte	7
	.byte	82
	.long	6369
	.byte	14
	.long	.Ldebug_ranges12
	.byte	13
	.long	.Ldebug_loc46
	.long	.Linfo_string86
	.byte	7
	.byte	83
	.long	890
	.byte	13
	.long	.Ldebug_loc48
	.long	.Linfo_string84
	.byte	7
	.byte	83
	.long	2357
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin9
	.long	.Lfunc_end9-.Lfunc_begin9
	.byte	1
	.byte	87
	.long	.Linfo_string108
	.long	.Linfo_string109
	.byte	8
	.byte	46
	.long	2323

	.byte	17
	.long	.Ldebug_loc50
	.long	.Linfo_string188
	.byte	8
	.byte	46
	.long	5425
	.byte	17
	.long	.Ldebug_loc51
	.long	.Linfo_string202
	.byte	8
	.byte	46
	.long	6769
	.byte	13
	.long	.Ldebug_loc53
	.long	.Linfo_string235
	.byte	8
	.byte	46
	.long	890
	.byte	13
	.long	.Ldebug_loc60
	.long	.Linfo_string239
	.byte	8
	.byte	46
	.long	2357
	.byte	18
	.quad	.Ltmp240
	.long	.Ltmp309-.Ltmp240
	.byte	13
	.long	.Ldebug_loc52
	.long	.Linfo_string86
	.byte	8
	.byte	47
	.long	890
	.byte	13
	.long	.Ldebug_loc54
	.long	.Linfo_string218
	.byte	8
	.byte	47
	.long	2357
	.byte	13
	.long	.Ldebug_loc59
	.long	.Linfo_string237
	.byte	8
	.byte	64
	.long	6849
	.byte	14
	.long	.Ldebug_ranges15
	.byte	13
	.long	.Ldebug_loc55
	.long	.Linfo_string236
	.byte	8
	.byte	53
	.long	6268
	.byte	14
	.long	.Ldebug_ranges14
	.byte	13
	.long	.Ldebug_loc56
	.long	.Linfo_string86
	.byte	8
	.byte	54
	.long	890
	.byte	13
	.long	.Ldebug_loc57
	.long	.Linfo_string84
	.byte	8
	.byte	54
	.long	2357
	.byte	0
	.byte	0
	.byte	18
	.quad	.Ltmp283
	.long	.Ltmp287-.Ltmp283
	.byte	13
	.long	.Ldebug_loc58
	.long	.Linfo_string86
	.byte	8
	.byte	60
	.long	890
	.byte	0
	.byte	18
	.quad	.Ltmp297
	.long	.Ltmp304-.Ltmp297
	.byte	13
	.long	.Ldebug_loc61
	.long	.Linfo_string85
	.byte	8
	.byte	66
	.long	2357
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin10
	.long	.Lfunc_end10-.Lfunc_begin10
	.byte	1
	.byte	87
	.long	.Linfo_string110
	.long	.Linfo_string111
	.byte	9
	.byte	9
	.long	2323

	.byte	17
	.long	.Ldebug_loc62
	.long	.Linfo_string188
	.byte	9
	.byte	9
	.long	5425
	.byte	17
	.long	.Ldebug_loc63
	.long	.Linfo_string240
	.byte	9
	.byte	9
	.long	6151
	.byte	21
	.long	.Linfo_string279
	.byte	9
	.byte	9
	.long	2357
	.byte	14
	.long	.Ldebug_ranges16
	.byte	13
	.long	.Ldebug_loc65
	.long	.Linfo_string241
	.byte	9
	.byte	10
	.long	6896
	.byte	0
	.byte	14
	.long	.Ldebug_ranges17
	.byte	13
	.long	.Ldebug_loc66
	.long	.Linfo_string241
	.byte	9
	.byte	10
	.long	7584
	.byte	0
	.byte	18
	.quad	.Ltmp328
	.long	.Ltmp335-.Ltmp328
	.byte	13
	.long	.Ldebug_loc64
	.long	.Linfo_string241
	.byte	9
	.byte	10
	.long	6151
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin11
	.long	.Lfunc_end11-.Lfunc_begin11
	.byte	1
	.byte	87
	.long	.Linfo_string112
	.long	.Linfo_string113
	.byte	8
	.byte	11
	.long	2323

	.byte	17
	.long	.Ldebug_loc67
	.long	.Linfo_string188
	.byte	8
	.byte	11
	.long	5425
	.byte	17
	.long	.Ldebug_loc68
	.long	.Linfo_string280
	.byte	8
	.byte	11
	.long	6268
	.byte	13
	.long	.Ldebug_loc73
	.long	.Linfo_string281
	.byte	8
	.byte	11
	.long	2357
	.byte	14
	.long	.Ldebug_ranges18
	.byte	13
	.long	.Ldebug_loc72
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	6596
	.byte	0
	.byte	14
	.long	.Ldebug_ranges19
	.byte	13
	.long	.Ldebug_loc74
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	7830
	.byte	0
	.byte	14
	.long	.Ldebug_ranges20
	.byte	13
	.long	.Ldebug_loc75
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	6769
	.byte	0
	.byte	14
	.long	.Ldebug_ranges21
	.byte	13
	.long	.Ldebug_loc76
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	7884
	.byte	0
	.byte	14
	.long	.Ldebug_ranges22
	.byte	13
	.long	.Ldebug_loc69
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	7335
	.byte	0
	.byte	14
	.long	.Ldebug_ranges25
	.byte	13
	.long	.Ldebug_loc70
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	7476
	.byte	14
	.long	.Ldebug_ranges23
	.byte	13
	.long	.Ldebug_loc77
	.long	.Linfo_string84
	.byte	8
	.byte	26
	.long	2357
	.byte	0
	.byte	14
	.long	.Ldebug_ranges24
	.byte	13
	.long	.Ldebug_loc78
	.long	.Linfo_string86
	.byte	8
	.byte	32
	.long	890
	.byte	13
	.long	.Ldebug_loc79
	.long	.Linfo_string84
	.byte	8
	.byte	36
	.long	2357
	.byte	0
	.byte	0
	.byte	18
	.quad	.Ltmp405
	.long	.Ltmp412-.Ltmp405
	.byte	13
	.long	.Ldebug_loc71
	.long	.Linfo_string202
	.byte	8
	.byte	12
	.long	6268
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin12
	.long	.Lfunc_end12-.Lfunc_begin12
	.byte	1
	.byte	87
	.long	.Linfo_string114
	.long	.Linfo_string115
	.byte	7
	.byte	33
	.long	2323

	.byte	17
	.long	.Ldebug_loc80
	.long	.Linfo_string188
	.byte	7
	.byte	33
	.long	5425
	.byte	17
	.long	.Ldebug_loc81
	.long	.Linfo_string202
	.byte	7
	.byte	33
	.long	7925
	.byte	13
	.long	.Ldebug_loc83
	.long	.Linfo_string286
	.byte	7
	.byte	33
	.long	890
	.byte	18
	.quad	.Ltmp413
	.long	.Ltmp427-.Ltmp413
	.byte	13
	.long	.Ldebug_loc82
	.long	.Linfo_string86
	.byte	7
	.byte	34
	.long	890
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin13
	.long	.Lfunc_end13-.Lfunc_begin13
	.byte	1
	.byte	87
	.long	.Linfo_string116
	.long	.Linfo_string117
	.byte	9
	.byte	20
	.long	2323

	.byte	12
	.byte	1
	.byte	84
	.long	.Linfo_string188
	.byte	9
	.byte	20
	.long	5425
	.byte	17
	.long	.Ldebug_loc84
	.long	.Linfo_string240
	.byte	9
	.byte	20
	.long	6151
	.byte	0
	.byte	16
	.quad	.Lfunc_begin14
	.long	.Lfunc_end14-.Lfunc_begin14
	.byte	1
	.byte	87
	.long	.Linfo_string118
	.long	.Linfo_string119
	.byte	9
	.byte	24
	.long	2323

	.byte	12
	.byte	1
	.byte	84
	.long	.Linfo_string188
	.byte	9
	.byte	24
	.long	5425
	.byte	17
	.long	.Ldebug_loc85
	.long	.Linfo_string240
	.byte	9
	.byte	24
	.long	6151
	.byte	0
	.byte	16
	.quad	.Lfunc_begin15
	.long	.Lfunc_end15-.Lfunc_begin15
	.byte	1
	.byte	87
	.long	.Linfo_string120
	.long	.Linfo_string121
	.byte	8
	.byte	73
	.long	2323

	.byte	17
	.long	.Ldebug_loc86
	.long	.Linfo_string188
	.byte	8
	.byte	73
	.long	5425
	.byte	17
	.long	.Ldebug_loc87
	.long	.Linfo_string202
	.byte	8
	.byte	73
	.long	6268
	.byte	13
	.long	.Ldebug_loc92
	.long	.Linfo_string287
	.byte	8
	.byte	73
	.long	890
	.byte	13
	.long	.Ldebug_loc94
	.long	.Linfo_string288
	.byte	8
	.byte	73
	.long	2357
	.byte	18
	.quad	.Ltmp430
	.long	.Ltmp476-.Ltmp430
	.byte	13
	.long	.Ldebug_loc88
	.long	.Linfo_string184
	.byte	8
	.byte	74
	.long	604
	.byte	13
	.long	.Ldebug_loc89
	.long	.Linfo_string183
	.byte	8
	.byte	74
	.long	7335
	.byte	14
	.long	.Ldebug_ranges27
	.byte	13
	.long	.Ldebug_loc90
	.long	.Linfo_string184
	.byte	8
	.byte	78
	.long	604
	.byte	13
	.long	.Ldebug_loc91
	.long	.Linfo_string186
	.byte	8
	.byte	78
	.long	1572
	.byte	14
	.long	.Ldebug_ranges26
	.byte	13
	.long	.Ldebug_loc93
	.long	.Linfo_string84
	.byte	8
	.byte	80
	.long	2357
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin16
	.long	.Lfunc_end16-.Lfunc_begin16
	.byte	1
	.byte	87
	.long	.Linfo_string122
	.long	.Linfo_string123
	.byte	7
	.byte	65
	.long	2323

	.byte	17
	.long	.Ldebug_loc95
	.long	.Linfo_string188
	.byte	7
	.byte	65
	.long	5425
	.byte	17
	.long	.Ldebug_loc96
	.long	.Linfo_string202
	.byte	7
	.byte	65
	.long	7953
	.byte	13
	.long	.Ldebug_loc98
	.long	.Linfo_string294
	.byte	7
	.byte	65
	.long	890
	.byte	18
	.quad	.Ltmp477
	.long	.Ltmp501-.Ltmp477
	.byte	13
	.long	.Ldebug_loc97
	.long	.Linfo_string86
	.byte	7
	.byte	66
	.long	890
	.byte	13
	.long	.Ldebug_loc99
	.long	.Linfo_string295
	.byte	7
	.byte	66
	.long	2357
	.byte	18
	.quad	.Ltmp491
	.long	.Ltmp496-.Ltmp491
	.byte	13
	.long	.Ldebug_loc100
	.long	.Linfo_string86
	.byte	7
	.byte	71
	.long	890
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin17
	.long	.Lfunc_end17-.Lfunc_begin17
	.byte	1
	.byte	87
	.long	.Linfo_string124
	.long	.Linfo_string125
	.byte	7
	.byte	51
	.long	2323

	.byte	17
	.long	.Ldebug_loc101
	.long	.Linfo_string188
	.byte	7
	.byte	51
	.long	5425
	.byte	17
	.long	.Ldebug_loc102
	.long	.Linfo_string202
	.byte	7
	.byte	51
	.long	8033
	.byte	13
	.long	.Ldebug_loc103
	.long	.Linfo_string298
	.byte	7
	.byte	51
	.long	890
	.byte	13
	.long	.Ldebug_loc106
	.long	.Linfo_string300
	.byte	7
	.byte	51
	.long	2357
	.byte	18
	.quad	.Ltmp502
	.long	.Ltmp529-.Ltmp502
	.byte	13
	.long	.Ldebug_loc104
	.long	.Linfo_string86
	.byte	7
	.byte	56
	.long	890
	.byte	13
	.long	.Ldebug_loc105
	.long	.Linfo_string299
	.byte	7
	.byte	56
	.long	2357
	.byte	0
	.byte	0
	.byte	19
	.long	.Linfo_string87
	.byte	10
	.byte	18
	.long	237
	.byte	1
	.byte	20
	.long	.Linfo_string84
	.byte	10
	.byte	18
	.long	266
	.byte	22
	.byte	21
	.long	.Linfo_string88
	.byte	10
	.byte	23
	.long	211
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin18
	.long	.Lfunc_end18-.Lfunc_begin18
	.byte	1
	.byte	87
	.long	.Linfo_string126
	.long	.Linfo_string127
	.byte	8
	.byte	88
	.long	2323

	.byte	17
	.long	.Ldebug_loc107
	.long	.Linfo_string188
	.byte	8
	.byte	88
	.long	5425
	.byte	17
	.long	.Ldebug_loc108
	.long	.Linfo_string202
	.byte	8
	.byte	88
	.long	7884
	.byte	13
	.long	.Ldebug_loc110
	.long	.Linfo_string301
	.byte	8
	.byte	88
	.long	890
	.byte	13
	.long	.Ldebug_loc113
	.long	.Linfo_string302
	.byte	8
	.byte	88
	.long	2357
	.byte	18
	.quad	.Ltmp532
	.long	.Ltmp583-.Ltmp532
	.byte	13
	.long	.Ldebug_loc109
	.long	.Linfo_string86
	.byte	8
	.byte	89
	.long	890
	.byte	13
	.long	.Ldebug_loc111
	.long	.Linfo_string186
	.byte	8
	.byte	89
	.long	2357
	.byte	13
	.long	.Ldebug_loc112
	.long	.Linfo_string84
	.byte	8
	.byte	101
	.long	2357
	.byte	26
	.long	4259
	.quad	.Ltmp568
	.long	.Ltmp577-.Ltmp568
	.byte	8
	.byte	104
	.byte	24
	.long	.Ldebug_loc114
	.long	4271
	.byte	18
	.quad	.Ltmp571
	.long	.Ltmp577-.Ltmp571
	.byte	25
	.long	.Ldebug_loc115
	.long	4283
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin19
	.long	.Lfunc_end19-.Lfunc_begin19
	.byte	1
	.byte	87
	.long	.Linfo_string128
	.long	.Linfo_string129
	.byte	7
	.byte	9
	.long	2323

	.byte	17
	.long	.Ldebug_loc116
	.long	.Linfo_string188
	.byte	7
	.byte	9
	.long	5425
	.byte	17
	.long	.Ldebug_loc117
	.long	.Linfo_string226
	.byte	7
	.byte	9
	.long	6369
	.byte	13
	.long	.Ldebug_loc119
	.long	.Linfo_string303
	.byte	7
	.byte	9
	.long	2357
	.byte	14
	.long	.Ldebug_ranges28
	.byte	13
	.long	.Ldebug_loc120
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	6663
	.byte	0
	.byte	14
	.long	.Ldebug_ranges29
	.byte	13
	.long	.Ldebug_loc121
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	7953
	.byte	0
	.byte	14
	.long	.Ldebug_ranges30
	.byte	13
	.long	.Ldebug_loc122
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	8033
	.byte	0
	.byte	14
	.long	.Ldebug_ranges31
	.byte	13
	.long	.Ldebug_loc123
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	6470
	.byte	0
	.byte	14
	.long	.Ldebug_ranges32
	.byte	13
	.long	.Ldebug_loc124
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	7925
	.byte	0
	.byte	18
	.quad	.Ltmp639
	.long	.Ltmp646-.Ltmp639
	.byte	13
	.long	.Ldebug_loc118
	.long	.Linfo_string182
	.byte	7
	.byte	17
	.long	6369
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin20
	.long	.Lfunc_end20-.Lfunc_begin20
	.byte	1
	.byte	87
	.long	.Linfo_string130
	.long	.Linfo_string131
	.byte	8
	.byte	160
	.long	2323

	.byte	17
	.long	.Ldebug_loc125
	.long	.Linfo_string188
	.byte	8
	.byte	160
	.long	5425
	.byte	17
	.long	.Ldebug_loc126
	.long	.Linfo_string202
	.byte	8
	.byte	160
	.long	7830
	.byte	13
	.long	.Ldebug_loc128
	.long	.Linfo_string304
	.byte	8
	.byte	160
	.long	890
	.byte	13
	.long	.Ldebug_loc131
	.long	.Linfo_string305
	.byte	8
	.byte	160
	.long	2357
	.byte	18
	.quad	.Ltmp647
	.long	.Ltmp670-.Ltmp647
	.byte	13
	.long	.Ldebug_loc127
	.long	.Linfo_string86
	.byte	8
	.byte	161
	.long	890
	.byte	13
	.long	.Ldebug_loc129
	.long	.Linfo_string218
	.byte	8
	.byte	161
	.long	2357
	.byte	18
	.quad	.Ltmp660
	.long	.Ltmp666-.Ltmp660
	.byte	13
	.long	.Ldebug_loc130
	.long	.Linfo_string85
	.byte	8
	.byte	168
	.long	2357
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin21
	.long	.Lfunc_end21-.Lfunc_begin21
	.byte	1
	.byte	87
	.long	.Linfo_string132
	.long	.Linfo_string133
	.byte	2
	.byte	42
	.long	5391

	.byte	17
	.long	.Ldebug_loc132
	.long	.Linfo_string161
	.byte	2
	.byte	42
	.long	79
	.byte	13
	.long	.Ldebug_loc134
	.long	.Linfo_string306
	.byte	2
	.byte	42
	.long	5425
	.byte	18
	.quad	.Ltmp671
	.long	.Ltmp690-.Ltmp671
	.byte	13
	.long	.Ldebug_loc133
	.long	.Linfo_string188
	.byte	2
	.byte	43
	.long	5425
	.byte	14
	.long	.Ldebug_ranges33
	.byte	13
	.long	.Ldebug_loc135
	.long	.Linfo_string184
	.byte	2
	.byte	48
	.long	604
	.byte	0
	.byte	0
	.byte	0
	.byte	16
	.quad	.Lfunc_begin22
	.long	.Lfunc_end22-.Lfunc_begin22
	.byte	1
	.byte	87
	.long	.Linfo_string166
	.long	.Linfo_string167
	.byte	1
	.byte	1
	.long	244

	.byte	17
	.long	.Ldebug_loc136
	.long	.Linfo_string307
	.byte	1
	.byte	1
	.long	232
	.byte	12
	.byte	1
	.byte	84
	.long	.Linfo_string308
	.byte	1
	.byte	1
	.long	244
	.byte	13
	.long	.Ldebug_loc137
	.long	.Linfo_string309
	.byte	1
	.byte	1
	.long	244
	.byte	0
	.byte	16
	.quad	.Lfunc_begin23
	.long	.Lfunc_end23-.Lfunc_begin23
	.byte	1
	.byte	87
	.long	.Linfo_string168
	.long	.Linfo_string169
	.byte	1
	.byte	1
	.long	604

	.byte	17
	.long	.Ldebug_loc138
	.long	.Linfo_string310
	.byte	1
	.byte	1
	.long	232
	.byte	17
	.long	.Ldebug_loc139
	.long	.Linfo_string311
	.byte	1
	.byte	1
	.long	232
	.byte	27
	.byte	0
	.long	.Linfo_string312
	.byte	1
	.byte	1
	.long	604
	.byte	0
	.byte	16
	.quad	.Lfunc_begin24
	.long	.Lfunc_end24-.Lfunc_begin24
	.byte	1
	.byte	87
	.long	.Linfo_string170
	.long	.Linfo_string171
	.byte	9
	.byte	5
	.long	5988

	.byte	17
	.long	.Ldebug_loc140
	.long	.Linfo_string313
	.byte	9
	.byte	5
	.long	8074
	.byte	13
	.long	.Ldebug_loc141
	.long	.Linfo_string316
	.byte	9
	.byte	5
	.long	8074
	.byte	13
	.long	.Ldebug_loc142
	.long	.Linfo_string317
	.byte	9
	.byte	5
	.long	5988
	.byte	0
	.byte	16
	.quad	.Lfunc_begin25
	.long	.Lfunc_end25-.Lfunc_begin25
	.byte	1
	.byte	87
	.long	.Linfo_string173
	.long	.Linfo_string174
	.byte	5
	.byte	38
	.long	621

	.byte	17
	.long	.Ldebug_loc143
	.long	.Linfo_string318
	.byte	5
	.byte	38
	.long	8074
	.byte	13
	.long	.Ldebug_loc144
	.long	.Linfo_string202
	.byte	5
	.byte	38
	.long	8079
	.byte	0
	.byte	16
	.quad	.Lfunc_begin26
	.long	.Lfunc_end26-.Lfunc_begin26
	.byte	1
	.byte	87
	.long	.Linfo_string175
	.long	.Linfo_string176
	.byte	9
	.byte	5
	.long	5988

	.byte	17
	.long	.Ldebug_loc145
	.long	.Linfo_string319
	.byte	9
	.byte	5
	.long	8074
	.byte	13
	.long	.Ldebug_loc146
	.long	.Linfo_string320
	.byte	9
	.byte	5
	.long	8074
	.byte	13
	.long	.Ldebug_loc147
	.long	.Linfo_string321
	.byte	9
	.byte	5
	.long	5988
	.byte	0
	.byte	15
	.quad	.Lfunc_begin27
	.long	.Lfunc_end27-.Lfunc_begin27
	.byte	1
	.byte	87
	.long	.Linfo_string177
	.long	.Linfo_string178
	.byte	6
	.byte	13
	.long	237

	.byte	5
	.long	5368
	.byte	6
	.long	.Linfo_string99
	.byte	8
	.byte	2
	.byte	14
	.byte	1
	.byte	7
	.long	.Linfo_string98
	.long	79
	.byte	2
	.byte	15
	.byte	8
	.byte	0
	.byte	0
	.byte	10
	.long	.Linfo_string165
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string78
	.long	5425
	.byte	4
	.byte	42
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string78
	.long	890
	.byte	4
	.byte	42
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	5430
	.byte	6
	.long	.Linfo_string164
	.byte	32
	.byte	2
	.byte	35
	.byte	1
	.byte	7
	.long	.Linfo_string134
	.long	5492
	.byte	2
	.byte	36
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string161
	.long	79
	.byte	2
	.byte	37
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string162
	.long	604
	.byte	2
	.byte	38
	.byte	1
	.byte	16
	.byte	7
	.long	.Linfo_string163
	.long	2357
	.byte	2
	.byte	39
	.byte	8
	.byte	24
	.byte	0
	.byte	5
	.long	5497
	.byte	6
	.long	.Linfo_string160
	.byte	64
	.byte	2
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string135
	.long	5559
	.byte	2
	.byte	5
	.byte	4
	.byte	0
	.byte	7
	.long	.Linfo_string146
	.long	211
	.byte	2
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string147
	.long	5677
	.byte	2
	.byte	5
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string159
	.long	5729
	.byte	2
	.byte	5
	.byte	8
	.byte	56
	.byte	0
	.byte	6
	.long	.Linfo_string145
	.byte	24
	.byte	2
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string136
	.long	5634
	.byte	2
	.byte	5
	.byte	4
	.byte	0
	.byte	7
	.long	.Linfo_string141
	.long	57
	.byte	2
	.byte	5
	.byte	4
	.byte	8
	.byte	7
	.long	.Linfo_string142
	.long	57
	.byte	2
	.byte	5
	.byte	4
	.byte	12
	.byte	7
	.long	.Linfo_string143
	.long	5670
	.byte	2
	.byte	5
	.byte	4
	.byte	16
	.byte	7
	.long	.Linfo_string144
	.long	5670
	.byte	2
	.byte	5
	.byte	4
	.byte	20
	.byte	0
	.byte	6
	.long	.Linfo_string140
	.byte	8
	.byte	2
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string137
	.long	5670
	.byte	2
	.byte	5
	.byte	4
	.byte	0
	.byte	7
	.long	.Linfo_string139
	.long	57
	.byte	2
	.byte	5
	.byte	4
	.byte	4
	.byte	0
	.byte	3
	.long	.Linfo_string138
	.byte	5
	.byte	4
	.byte	10
	.long	.Linfo_string158
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	5724
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	5729
	.byte	5
	.long	5734
	.byte	6
	.long	.Linfo_string157
	.byte	96
	.byte	2
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string148
	.long	232
	.byte	2
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string41
	.long	621
	.byte	2
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string146
	.long	211
	.byte	2
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string23
	.long	211
	.byte	2
	.byte	5
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string135
	.long	5634
	.byte	2
	.byte	5
	.byte	4
	.byte	40
	.byte	7
	.long	.Linfo_string149
	.long	5835
	.byte	2
	.byte	5
	.byte	8
	.byte	48
	.byte	7
	.long	.Linfo_string151
	.long	5887
	.byte	2
	.byte	5
	.byte	8
	.byte	72
	.byte	0
	.byte	10
	.long	.Linfo_string150
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	5882
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	211
	.byte	10
	.long	.Linfo_string156
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	5934
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	5939
	.byte	6
	.long	.Linfo_string155
	.byte	32
	.byte	2
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string152
	.long	211
	.byte	2
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string153
	.long	621
	.byte	2
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string154
	.long	211
	.byte	2
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	3
	.long	.Linfo_string172
	.byte	5
	.byte	8
	.byte	10
	.long	.Linfo_string180
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	6042
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	2357
	.byte	6
	.long	.Linfo_string192
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	6083
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	9
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	6088
	.byte	10
	.long	.Linfo_string191
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string190
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string172
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	6140
	.byte	8
	.long	5988
	.byte	9
	.long	232
	.byte	0
	.byte	6
	.long	.Linfo_string196
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	6187
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	9
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	6192
	.byte	10
	.long	.Linfo_string195
	.byte	32
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string190
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string172
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string194
	.long	6252
	.byte	4
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	5
	.long	6257
	.byte	8
	.long	237
	.byte	9
	.long	232
	.byte	0
	.byte	6
	.long	.Linfo_string198
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	6304
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	9
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	6309
	.byte	10
	.long	.Linfo_string195
	.byte	32
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string190
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string172
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string197
	.long	6252
	.byte	4
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	6
	.long	.Linfo_string200
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	6405
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	9
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	6410
	.byte	10
	.long	.Linfo_string195
	.byte	32
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string190
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string172
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string199
	.long	6252
	.byte	4
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	5
	.long	6475
	.byte	6
	.long	.Linfo_string209
	.byte	64
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string203
	.long	6537
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string205
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string206
	.long	6589
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string208
	.long	6537
	.byte	9
	.byte	5
	.byte	8
	.byte	40
	.byte	0
	.byte	10
	.long	.Linfo_string204
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	6584
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	6268
	.byte	3
	.long	.Linfo_string207
	.byte	5
	.byte	8
	.byte	5
	.long	6601
	.byte	6
	.long	.Linfo_string216
	.byte	48
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string212
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string213
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string214
	.long	6589
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string215
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	0
	.byte	5
	.long	6668
	.byte	6
	.long	.Linfo_string225
	.byte	40
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string221
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string222
	.long	6717
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string224
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	0
	.byte	10
	.long	.Linfo_string223
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	6764
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	6369
	.byte	5
	.long	6774
	.byte	6
	.long	.Linfo_string234
	.byte	64
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string229
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string230
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string231
	.long	6537
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string232
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	48
	.byte	7
	.long	.Linfo_string233
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	56
	.byte	0
	.byte	10
	.long	.Linfo_string238
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	2357
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	6901
	.byte	6
	.long	.Linfo_string273
	.byte	40
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string242
	.long	6976
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string248
	.long	7097
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string252
	.long	7335
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string257
	.long	7530
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string272
	.long	6663
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	0
	.byte	5
	.long	6981
	.byte	6
	.long	.Linfo_string247
	.byte	24
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string222
	.long	7004
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	0
	.byte	10
	.long	.Linfo_string246
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	7051
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7056
	.byte	5
	.long	7061
	.byte	6
	.long	.Linfo_string245
	.byte	24
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string243
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string244
	.long	621
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	7102
	.byte	6
	.long	.Linfo_string267
	.byte	40
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string249
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string222
	.long	7151
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string266
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	0
	.byte	10
	.long	.Linfo_string265
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	7198
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7203
	.byte	5
	.long	7208
	.byte	6
	.long	.Linfo_string264
	.byte	64
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string242
	.long	6976
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string250
	.long	7283
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string257
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string261
	.long	7476
	.byte	9
	.byte	5
	.byte	8
	.byte	48
	.byte	7
	.long	.Linfo_string245
	.long	6976
	.byte	9
	.byte	5
	.byte	8
	.byte	56
	.byte	0
	.byte	10
	.long	.Linfo_string260
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	7330
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7335
	.byte	5
	.long	7340
	.byte	6
	.long	.Linfo_string259
	.byte	32
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string251
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string252
	.long	621
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string253
	.long	7389
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	5
	.long	7394
	.byte	6
	.long	.Linfo_string258
	.byte	72
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string254
	.long	7469
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string252
	.long	621
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string196
	.long	1572
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string256
	.long	1572
	.byte	9
	.byte	5
	.byte	8
	.byte	40
	.byte	7
	.long	.Linfo_string257
	.long	1572
	.byte	9
	.byte	5
	.byte	8
	.byte	56
	.byte	0
	.byte	3
	.long	.Linfo_string255
	.byte	5
	.byte	8
	.byte	5
	.long	7481
	.byte	6
	.long	.Linfo_string263
	.byte	32
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string262
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string254
	.long	6589
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string57
	.long	621
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7535
	.byte	6
	.long	.Linfo_string271
	.byte	24
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string268
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string269
	.long	7097
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string270
	.long	7097
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7589
	.byte	6
	.long	.Linfo_string278
	.byte	64
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string242
	.long	6976
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string205
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string206
	.long	6589
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string230
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string274
	.long	7677
	.byte	9
	.byte	5
	.byte	8
	.byte	32
	.byte	7
	.long	.Linfo_string233
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	56
	.byte	0
	.byte	10
	.long	.Linfo_string277
	.byte	24
	.byte	1
	.byte	7
	.long	.Linfo_string44
	.long	7724
	.byte	4
	.byte	1
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string48
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string49
	.long	211
	.byte	4
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7729
	.byte	6
	.long	.Linfo_string276
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string61
	.long	7765
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string68
	.long	232
	.byte	9
	.byte	1
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	7770
	.byte	10
	.long	.Linfo_string195
	.byte	32
	.byte	1
	.byte	7
	.long	.Linfo_string62
	.long	965
	.byte	4
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string190
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string172
	.long	6135
	.byte	4
	.byte	5
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string275
	.long	6252
	.byte	4
	.byte	5
	.byte	8
	.byte	24
	.byte	0
	.byte	5
	.long	7835
	.byte	6
	.long	.Linfo_string282
	.byte	32
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string213
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string214
	.long	6589
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string212
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7889
	.byte	6
	.long	.Linfo_string284
	.byte	24
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string212
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string283
	.long	7335
	.byte	9
	.byte	5
	.byte	8
	.byte	16
	.byte	0
	.byte	5
	.long	7930
	.byte	6
	.long	.Linfo_string285
	.byte	16
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string212
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	0
	.byte	5
	.long	7958
	.byte	6
	.long	.Linfo_string293
	.byte	64
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string289
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string290
	.long	6369
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	7
	.long	.Linfo_string291
	.long	6268
	.byte	9
	.byte	5
	.byte	8
	.byte	24
	.byte	7
	.long	.Linfo_string272
	.long	6663
	.byte	9
	.byte	5
	.byte	8
	.byte	40
	.byte	7
	.long	.Linfo_string292
	.long	6369
	.byte	9
	.byte	5
	.byte	8
	.byte	48
	.byte	0
	.byte	5
	.long	8038
	.byte	6
	.long	.Linfo_string297
	.byte	32
	.byte	9
	.byte	5
	.byte	1
	.byte	7
	.long	.Linfo_string296
	.long	5988
	.byte	9
	.byte	5
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string270
	.long	6537
	.byte	9
	.byte	5
	.byte	8
	.byte	8
	.byte	0
	.byte	5
	.long	8079
	.byte	6
	.long	.Linfo_string315
	.byte	48
	.byte	5
	.byte	32
	.byte	1
	.byte	7
	.long	.Linfo_string192
	.long	6047
	.byte	5
	.byte	33
	.byte	8
	.byte	0
	.byte	7
	.long	.Linfo_string257
	.long	621
	.byte	5
	.byte	34
	.byte	8
	.byte	16
	.byte	7
	.long	.Linfo_string314
	.long	621
	.byte	5
	.byte	35
	.byte	8
	.byte	32
	.byte	0
	.byte	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.Ltmp0
	.quad	.Ltmp6
	.quad	.Ltmp7
	.quad	.Ltmp8
	.quad	0
	.quad	0
.Ldebug_ranges1:
	.quad	.Ltmp17
	.quad	.Ltmp22
	.quad	.Ltmp24
	.quad	.Ltmp29
	.quad	0
	.quad	0
.Ldebug_ranges2:
	.quad	.Ltmp36
	.quad	.Ltmp38
	.quad	.Ltmp42
	.quad	.Ltmp46
	.quad	0
	.quad	0
.Ldebug_ranges3:
	.quad	.Ltmp39
	.quad	.Ltmp41
	.quad	.Ltmp50
	.quad	.Ltmp54
	.quad	0
	.quad	0
.Ldebug_ranges4:
	.quad	.Ltmp47
	.quad	.Ltmp49
	.quad	.Ltmp55
	.quad	.Ltmp64
	.quad	0
	.quad	0
.Ldebug_ranges5:
	.quad	.Ltmp133
	.quad	.Ltmp137
	.quad	.Ltmp158
	.quad	.Ltmp163
	.quad	0
	.quad	0
.Ldebug_ranges6:
	.quad	.Ltmp115
	.quad	.Ltmp121
	.quad	.Ltmp133
	.quad	.Ltmp137
	.quad	.Ltmp152
	.quad	.Ltmp163
	.quad	0
	.quad	0
.Ldebug_ranges7:
	.quad	.Ltmp138
	.quad	.Ltmp142
	.quad	.Ltmp164
	.quad	.Ltmp170
	.quad	0
	.quad	0
.Ldebug_ranges8:
	.quad	.Ltmp121
	.quad	.Ltmp127
	.quad	.Ltmp138
	.quad	.Ltmp142
	.quad	.Ltmp164
	.quad	.Ltmp170
	.quad	.Ltmp178
	.quad	.Ltmp183
	.quad	0
	.quad	0
.Ldebug_ranges9:
	.quad	.Ltmp147
	.quad	.Ltmp150
	.quad	.Ltmp173
	.quad	.Ltmp177
	.quad	.Ltmp183
	.quad	.Ltmp191
	.quad	.Ltmp200
	.quad	.Ltmp212
	.quad	0
	.quad	0
.Ldebug_ranges10:
	.quad	.Ltmp147
	.quad	.Ltmp150
	.quad	.Ltmp173
	.quad	.Ltmp177
	.quad	.Ltmp183
	.quad	.Ltmp191
	.quad	.Ltmp200
	.quad	.Ltmp212
	.quad	0
	.quad	0
.Ldebug_ranges11:
	.quad	.Ltmp129
	.quad	.Ltmp131
	.quad	.Ltmp143
	.quad	.Ltmp151
	.quad	.Ltmp173
	.quad	.Ltmp177
	.quad	.Ltmp183
	.quad	.Ltmp192
	.quad	.Ltmp200
	.quad	.Ltmp212
	.quad	0
	.quad	0
.Ldebug_ranges12:
	.quad	.Ltmp220
	.quad	.Ltmp231
	.quad	.Ltmp234
	.quad	.Ltmp239
	.quad	0
	.quad	0
.Ldebug_ranges13:
	.quad	.Ltmp214
	.quad	.Ltmp233
	.quad	.Ltmp234
	.quad	.Ltmp239
	.quad	0
	.quad	0
.Ldebug_ranges14:
	.quad	.Ltmp260
	.quad	.Ltmp281
	.quad	.Ltmp287
	.quad	.Ltmp289
	.quad	.Ltmp308
	.quad	.Ltmp309
	.quad	0
	.quad	0
.Ldebug_ranges15:
	.quad	.Ltmp255
	.quad	.Ltmp282
	.quad	.Ltmp287
	.quad	.Ltmp289
	.quad	.Ltmp308
	.quad	.Ltmp309
	.quad	0
	.quad	0
.Ldebug_ranges16:
	.quad	.Ltmp313
	.quad	.Ltmp315
	.quad	.Ltmp319
	.quad	.Ltmp320
	.quad	0
	.quad	0
.Ldebug_ranges17:
	.quad	.Ltmp316
	.quad	.Ltmp318
	.quad	.Ltmp325
	.quad	.Ltmp327
	.quad	0
	.quad	0
.Ldebug_ranges18:
	.quad	.Ltmp338
	.quad	.Ltmp340
	.quad	.Ltmp344
	.quad	.Ltmp347
	.quad	0
	.quad	0
.Ldebug_ranges19:
	.quad	.Ltmp341
	.quad	.Ltmp343
	.quad	.Ltmp351
	.quad	.Ltmp354
	.quad	0
	.quad	0
.Ldebug_ranges20:
	.quad	.Ltmp348
	.quad	.Ltmp350
	.quad	.Ltmp358
	.quad	.Ltmp361
	.quad	0
	.quad	0
.Ldebug_ranges21:
	.quad	.Ltmp355
	.quad	.Ltmp357
	.quad	.Ltmp365
	.quad	.Ltmp368
	.quad	0
	.quad	0
.Ldebug_ranges22:
	.quad	.Ltmp362
	.quad	.Ltmp364
	.quad	.Ltmp372
	.quad	.Ltmp374
	.quad	0
	.quad	0
.Ldebug_ranges23:
	.quad	.Ltmp378
	.quad	.Ltmp380
	.quad	.Ltmp390
	.quad	.Ltmp392
	.quad	0
	.quad	0
.Ldebug_ranges24:
	.quad	.Ltmp381
	.quad	.Ltmp388
	.quad	.Ltmp392
	.quad	.Ltmp394
	.quad	.Ltmp404
	.quad	.Ltmp405
	.quad	0
	.quad	0
.Ldebug_ranges25:
	.quad	.Ltmp369
	.quad	.Ltmp371
	.quad	.Ltmp375
	.quad	.Ltmp405
	.quad	0
	.quad	0
.Ldebug_ranges26:
	.quad	.Ltmp438
	.quad	.Ltmp439
	.quad	.Ltmp446
	.quad	.Ltmp449
	.quad	.Ltmp455
	.quad	.Ltmp458
	.quad	.Ltmp460
	.quad	.Ltmp463
	.quad	0
	.quad	0
.Ldebug_ranges27:
	.quad	.Ltmp434
	.quad	.Ltmp440
	.quad	.Ltmp446
	.quad	.Ltmp449
	.quad	.Ltmp455
	.quad	.Ltmp458
	.quad	.Ltmp460
	.quad	.Ltmp463
	.quad	0
	.quad	0
.Ldebug_ranges28:
	.quad	.Ltmp592
	.quad	.Ltmp594
	.quad	.Ltmp602
	.quad	.Ltmp605
	.quad	0
	.quad	0
.Ldebug_ranges29:
	.quad	.Ltmp599
	.quad	.Ltmp601
	.quad	.Ltmp615
	.quad	.Ltmp618
	.quad	0
	.quad	0
.Ldebug_ranges30:
	.quad	.Ltmp612
	.quad	.Ltmp614
	.quad	.Ltmp622
	.quad	.Ltmp625
	.quad	0
	.quad	0
.Ldebug_ranges31:
	.quad	.Ltmp619
	.quad	.Ltmp621
	.quad	.Ltmp629
	.quad	.Ltmp632
	.quad	0
	.quad	0
.Ldebug_ranges32:
	.quad	.Ltmp626
	.quad	.Ltmp628
	.quad	.Ltmp633
	.quad	.Ltmp636
	.quad	.Ltmp637
	.quad	.Ltmp638
	.quad	0
	.quad	0
.Ldebug_ranges33:
	.quad	.Ltmp678
	.quad	.Ltmp680
	.quad	.Ltmp683
	.quad	.Ltmp685
	.quad	0
	.quad	0
.Ldebug_ranges34:
	.quad	.Lfunc_begin0
	.quad	.Lfunc_end0
	.quad	.Lfunc_begin1
	.quad	.Lfunc_end1
	.quad	.Lfunc_begin2
	.quad	.Lfunc_end2
	.quad	.Lfunc_begin3
	.quad	.Lfunc_end3
	.quad	.Lfunc_begin4
	.quad	.Lfunc_end4
	.quad	.Lfunc_begin5
	.quad	.Lfunc_end5
	.quad	.Lfunc_begin6
	.quad	.Lfunc_end6
	.quad	.Lfunc_begin7
	.quad	.Lfunc_end7
	.quad	.Lfunc_begin8
	.quad	.Lfunc_end8
	.quad	.Lfunc_begin9
	.quad	.Lfunc_end9
	.quad	.Lfunc_begin10
	.quad	.Lfunc_end10
	.quad	.Lfunc_begin11
	.quad	.Lfunc_end11
	.quad	.Lfunc_begin12
	.quad	.Lfunc_end12
	.quad	.Lfunc_begin13
	.quad	.Lfunc_end13
	.quad	.Lfunc_begin14
	.quad	.Lfunc_end14
	.quad	.Lfunc_begin15
	.quad	.Lfunc_end15
	.quad	.Lfunc_begin16
	.quad	.Lfunc_end16
	.quad	.Lfunc_begin17
	.quad	.Lfunc_end17
	.quad	.Lfunc_begin18
	.quad	.Lfunc_end18
	.quad	.Lfunc_begin19
	.quad	.Lfunc_end19
	.quad	.Lfunc_begin20
	.quad	.Lfunc_end20
	.quad	.Lfunc_begin21
	.quad	.Lfunc_end21
	.quad	.Lfunc_begin22
	.quad	.Lfunc_end22
	.quad	.Lfunc_begin23
	.quad	.Lfunc_end23
	.quad	.Lfunc_begin24
	.quad	.Lfunc_end24
	.quad	.Lfunc_begin25
	.quad	.Lfunc_end25
	.quad	.Lfunc_begin26
	.quad	.Lfunc_end26
	.quad	.Lfunc_begin27
	.quad	.Lfunc_end27
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
	.byte	0
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_begin0
.LpubNames_begin0:
	.short	2
	.long	.Lcu_begin0
	.long	8129
	.long	1787
	.asciz	"eval.Lookup..1command_line_arguments.Scope"
	.long	4125
	.asciz	"eval.evalReturnStmt..1command_line_arguments.Context"
	.long	4497
	.asciz	"eval.evalStmt..1command_line_arguments.Context"
	.long	42
	.asciz	"runtime.writeBarrier"
	.long	1606
	.asciz	"eval.checkValues"
	.long	1683
	.asciz	"eval.command_line_arguments..import"
	.long	860
	.asciz	"command_line_arguments.Nil"
	.long	3786
	.asciz	"eval.evalIdent..1command_line_arguments.Context"
	.long	5124
	.asciz	"eval.End..stub.command_line_arguments.EvalError"
	.long	5334
	.asciz	"eval.command_line_arguments..init0"
	.long	2873
	.asciz	"eval.evalCallExpr..1command_line_arguments.Context"
	.long	875
	.asciz	"command_line_arguments.ErrInvalidValue"
	.long	4259
	.asciz	"eval.printMethods"
	.long	1712
	.asciz	"eval.Insert..1command_line_arguments.Scope"
	.long	2229
	.asciz	"eval.compare"
	.long	3566
	.asciz	"eval.evalExprStmt..1command_line_arguments.Context"
	.long	5052
	.asciz	"eval.command_line_arguments.EvalError..eq"
	.long	4869
	.asciz	"eval.NewContext"
	.long	2110
	.asciz	"eval.evalAssignStmt..1command_line_arguments.Context"
	.long	4706
	.asciz	"eval.evalUnaryExpr..1command_line_arguments.Context"
	.long	845
	.asciz	"command_line_arguments.True"
	.long	5199
	.asciz	"eval.Error.command_line_arguments.EvalError"
	.long	1404
	.asciz	"command_line_arguments.PkgLogger"
	.long	2711
	.asciz	"eval.evalBlockStmt..1command_line_arguments.Context"
	.long	3728
	.asciz	"eval.evalGenDecl..1command_line_arguments.Context"
	.long	1389
	.asciz	"command_line_arguments.ErrReturnValue"
	.long	3977
	.asciz	"eval.evalIfStmt..1command_line_arguments.Context"
	.long	3137
	.asciz	"eval.evalDecl..1command_line_arguments.Context"
	.long	4979
	.asciz	"eval.command_line_arguments.EvalError..hash"
	.long	251
	.asciz	"command_line_arguments.False"
	.long	5259
	.asciz	"eval.Pos..stub.command_line_arguments.EvalError"
	.long	3279
	.asciz	"eval.evalExpr..1command_line_arguments.Context"
	.long	1943
	.asciz	"eval.Eval..1command_line_arguments.Context"
	.long	1898
	.asciz	"eval.NewScope"
	.long	4296
	.asciz	"eval.evalSelectorExpr..1command_line_arguments.Context"
	.long	2362
	.asciz	"eval.evalBinaryExpr..1command_line_arguments.Context"
	.long	3670
	.asciz	"eval.evalFuncDecl..1command_line_arguments.Context"
	.long	64
	.asciz	"command_line_arguments.types"
	.long	0
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_begin0
.LpubTypes_begin0:
	.short	2
	.long	.Lcu_begin0
	.long	8129
	.long	5734
	.asciz	"File"
	.long	1298
	.asciz	"method"
	.long	5391
	.asciz	"struct{*Context,error}"
	.long	5835
	.asciz	"struct{*int,int,int}"
	.long	6589
	.asciz	"Token"
	.long	7208
	.asciz	"Field"
	.long	6047
	.asciz	"Node"
	.long	604
	.asciz	"bool"
	.long	5497
	.asciz	"FileSet"
	.long	1197
	.asciz	"uncommonType"
	.long	1572
	.asciz	"struct{*_type,*void}"
	.long	5988
	.asciz	"Pos"
	.long	5634
	.asciz	"Mutex"
	.long	7589
	.asciz	"GenDecl"
	.long	5939
	.asciz	".go/token.lineInfo"
	.long	7394
	.asciz	"Object"
	.long	6151
	.asciz	"Decl"
	.long	838
	.asciz	".reflect.flag"
	.long	5559
	.asciz	"RWMutex"
	.long	7889
	.asciz	"SelectorExpr"
	.long	1520
	.asciz	"struct{*struct{*_type,*void},int,int}"
	.long	225
	.asciz	"uint16"
	.long	8038
	.asciz	"ReturnStmt"
	.long	7481
	.asciz	"BasicLit"
	.long	6475
	.asciz	"AssignStmt"
	.long	7535
	.asciz	"FuncType"
	.long	662
	.asciz	".reflect.uncommonType"
	.long	1169
	.asciz	"__go_descriptor"
	.long	7283
	.asciz	"struct{**Ident,int,int}"
	.long	320
	.asciz	".reflect.rtype"
	.long	1246
	.asciz	"struct{*method,int,int}"
	.long	621
	.asciz	"string"
	.long	84
	.asciz	"runtime.hmap"
	.long	2323
	.asciz	"struct{*Value,error}"
	.long	8079
	.asciz	"EvalError"
	.long	7958
	.asciz	"IfStmt"
	.long	5677
	.asciz	"struct{**File,int,int}"
	.long	7102
	.asciz	"FieldList"
	.long	7469
	.asciz	"ObjKind"
	.long	7151
	.asciz	"struct{**Field,int,int}"
	.long	5430
	.asciz	"Context"
	.long	7677
	.asciz	"struct{*Spec,int,int}"
	.long	890
	.asciz	"error"
	.long	211
	.asciz	"int"
	.long	7770
	.asciz	"struct{*_type,*func(*void)Pos,*func(*void)Pos,*func(*void)void}"
	.long	931
	.asciz	"struct{*_type,*func(*void)string}"
	.long	7835
	.asciz	"UnaryExpr"
	.long	5670
	.asciz	"int32"
	.long	7729
	.asciz	"Spec"
	.long	237
	.asciz	"void"
	.long	7061
	.asciz	"Comment"
	.long	218
	.asciz	"uint8"
	.long	5368
	.asciz	"Scope"
	.long	6774
	.asciz	"CallExpr"
	.long	5995
	.asciz	"struct{**Value,int,int}"
	.long	1460
	.asciz	"struct{*_type,*func(*void,string,struct{*struct{*_type,*void},int,int})void}"
	.long	6981
	.asciz	"CommentGroup"
	.long	970
	.asciz	"_type"
	.long	763
	.asciz	".reflect.method"
	.long	499
	.asciz	"int8"
	.long	6601
	.asciz	"BinaryExpr"
	.long	57
	.asciz	"uint32"
	.long	6901
	.asciz	"FuncDecl"
	.long	6369
	.asciz	"Stmt"
	.long	6088
	.asciz	"struct{*_type,*func(*void)Pos,*func(*void)Pos}"
	.long	5887
	.asciz	"struct{*.go/token.lineInfo,int,int}"
	.long	7930
	.asciz	"ExprStmt"
	.long	6849
	.asciz	"struct{*Value,int,int}"
	.long	1419
	.asciz	".command-line-arguments.logger"
	.long	6537
	.asciz	"struct{*Expr,int,int}"
	.long	7004
	.asciz	"struct{**Comment,int,int}"
	.long	244
	.asciz	"uintptr"
	.long	711
	.asciz	"struct{*.reflect.method,int,int}"
	.long	6668
	.asciz	"BlockStmt"
	.long	7340
	.asciz	"Ident"
	.long	266
	.asciz	"Value"
	.long	6717
	.asciz	"struct{*Stmt,int,int}"
	.long	6268
	.asciz	"Expr"
	.long	0
.LpubTypes_end0:

	.section	".note.GNU-split-stack","",@progbits
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
