; ModuleID = 'gomodule'
source_filename = "gomodule"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22.go_export\22,\22e\22,@progbits"
module asm "\09.ascii \22v2;\5Cn\22"
module asm "\09.ascii \22package \22"
module asm "\09.ascii \22mathext\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22pkgpath \22"
module asm "\09.ascii \22command-line-arguments\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22big\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math/big\22"
module asm "\09.ascii \22 \5C\22\22"
module asm "\09.ascii \22math/big\22"
module asm "\09.ascii \22\5C\22;\5Cn\22"
module asm "\09.ascii \22init\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22binary\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_binary..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22poll\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_poll..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22testlog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_testlog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22big\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math_big..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math_rand..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sys\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime_internal_sys..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode..import\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22init_graph\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MaxBigInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 2 \22"
module asm "\09.ascii \22\5C\22math/big.Int\5C\22 \22"
module asm "\09.ascii \22<type 3 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.math/big.neg\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/big.abs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4 \22"
module asm "\09.ascii \22\5C\22.math/big.nat\5C\22 \22"
module asm "\09.ascii \22<type 5 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 6 \22"
module asm "\09.ascii \22\5C\22math/big.Word\5C\22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.probablyPrimeLucas\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.probablyPrimeMillerRabin\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22reps\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22force2\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.expNNWindowed\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.expNN\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.xor\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.sqrt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.andNot\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.and\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.bytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 7 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.sticky\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.or\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.bit\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.mulAddWW\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.setUint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.expWW\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.utoa\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 8 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.cmp\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.setBytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 9 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.clear\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.set\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.shr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.sub\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.add\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.sqr\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.itoa\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22neg\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 10 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.expNNMontgomery\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.norm\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.bitLen\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.setWord\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22q\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.convertWords\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ndigits\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22bb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22table\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 12 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 13 \22"
module asm "\09.ascii \22\5C\22.math/big.divisor\5C\22 \22"
module asm "\09.ascii \22<type 14 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.math/big.bbb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/big.nbits\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/big.ndigits\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.scan\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15 \22"
module asm "\09.ascii \22\5C\22io.ByteScanner\5C\22 \22"
module asm "\09.ascii \22\5C\22\22"
module asm "\09.ascii \22io\22"
module asm "\09.ascii \22\5C\22 \22"
module asm "\09.ascii \22<type 16 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 17 \22"
module asm "\09.ascii \22\5C\22io.ByteReader\5C\22 \22"
module asm "\09.ascii \22<type 18 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22ReadByte\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22UnreadByte\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22fracOk\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22res\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22count\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.div\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22z2\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x82>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22q\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.make\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.montgomery\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22k\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.random\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22rand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 19 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 20 \22"
module asm "\09.ascii \22\5C\22math/rand.Rand\5C\22 \22"
module asm "\09.ascii \22\5C\22\22"
module asm "\09.ascii \22rand\22"
module asm "\09.ascii \22\5C\22 \22"
module asm "\09.ascii \22<type 21 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.math/rand.src\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 22 \22"
module asm "\09.ascii \22\5C\22math/rand.Source\5C\22 \22"
module asm "\09.ascii \22<type 23 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Int63\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Seed\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22seed\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/rand.s64\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 24 \22"
module asm "\09.ascii \22\5C\22math/rand.Source64\5C\22 \22"
module asm "\09.ascii \22<type 25 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22? \22"
module asm "\09.ascii \22<type 22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Uint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/rand.readVal\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/rand.readPos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -1>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int63n\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22NormFloat64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/rand.int31n\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Intn\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Uint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Uint32\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -7>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Float32\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -9>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int63\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Float64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Perm\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 27 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Seed\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22seed\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int31\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Read\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 28 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int31n\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Shuffle\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22swap\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 29 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22j\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 26>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ExpFloat64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22limit\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.mul\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.mulRange\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.modW\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22d\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.setBit\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.divLarge\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22u\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x82>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22uIn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22v\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22q\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.divW\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22q\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.trailingZeroBits\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.shl\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 2>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ProbablyPrime\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MarshalJSON\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 31 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22UnmarshalText\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 32 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MarshalText\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 33 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22GobDecode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 34 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22GobEncode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 35 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Scan\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 36 \22"
module asm "\09.ascii \22\5C\22fmt.ScanState\5C\22 \22"
module asm "\09.ascii \22\5C\22\22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22\5C\22 \22"
module asm "\09.ascii \22<type 37 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22ReadRune\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22size\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22UnreadRune\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22SkipSpace\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Token\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22skipSpace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 38 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22token\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 39 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Width\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22wid\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Read\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 40 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Append\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 41 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 42 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Text\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Not\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22CmpAbs\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Format\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 43 \22"
module asm "\09.ascii \22\5C\22fmt.State\5C\22 \22"
module asm "\09.ascii \22<type 44 \22"
module asm "\09.ascii \22interface { \22"
module asm "\09.ascii \22Write\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 45 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Width\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22wid\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Precision\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22prec\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ok\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22Flag\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22c\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Div\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Quo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x22>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bits\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 46 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.modSqrtTonelliShanks\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Binomial\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22k\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MulRange\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Mul\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Set\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22QuoRem\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x8a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Abs\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Mod\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ModSqrt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bit\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Neg\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetBytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 47 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22UnmarshalJSON\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 48 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Int64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22DivMod\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x8a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22ModInverse\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22g\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Rsh\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Rem\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22BitLen\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetBits\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22abs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 49 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type 6>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Add\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetInt64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.modSqrt3Mod4Prime\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22p\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Sub\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Cmp\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Uint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.scan\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Sqrt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.setFromScanner\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22r\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 15>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsInt64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsUint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Rand\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22rnd\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 19>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Bytes\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 50 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22GCD\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Xor\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22And\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.lehmerGCD\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Lsh\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22n\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetUint64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetBit\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -12>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Sign\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22AndNot\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Exp\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22m\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Or\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 30>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MaxBigRat\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 52 \22"
module asm "\09.ascii \22\5C\22math/big.Rat\5C\22 \22"
module asm "\09.ascii \22<type 53 \22"
module asm "\09.ascii \22struct { \22"
module asm "\09.ascii \22.math/big.a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 2>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22.math/big.b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 2>\22"
module asm "\09.ascii \22; \22"
module asm "\09.ascii \22}\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54 \22"
module asm "\09.ascii \22*\22"
module asm "\09.ascii \22<type 52>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22UnmarshalText\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 55 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22MarshalText\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 56 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22err\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22GobDecode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22buf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 57 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22GobEncode\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 58 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22FloatString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22prec\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22RatString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Abs\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.marshal\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 59 \22"
module asm "\09.ascii \22[\22"
module asm "\09.ascii \22] \22"
module asm "\09.ascii \22<type -20>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Num\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetInt64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Sub\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Float32\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -9>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22exact\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetFrac64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -4>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22IsInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Float64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22exact\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetFloat64\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22f\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -10>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetFrac\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Quo\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Sign\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Neg\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Cmp\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22String\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22SetString\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22?\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -15>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x9>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Scan\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22s\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 36>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22ch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -21>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Denom\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Inv\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Add\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Set\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22.math/big.norm\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22(\22"
module asm "\09.ascii \22z\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1a>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22) \22"
module asm "\09.ascii \22Mul\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 54>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MaxInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MinBigInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 1>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MinBigRat\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 51>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22MinInt\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22x\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22y\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -11>\22"
module asm "\09.ascii \22;\5Cn\22"
module asm "\09.ascii \22checksum EFDC5E5F656A4A14826FE62C21F97495F631E4C6;\5Cn\22"
module asm "\09.text"

%functionDescriptor.0 = type { i64 }
%Int.0 = type { i8, %".math/big.nat.0" }
%".math/big.nat.0" = type { i64*, i64, i64 }
%Rat.0 = type { %Int.0, %Int.0 }

@command_line_arguments.MaxInt..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (i64 (i8*, i64, i64)* @command_line_arguments.MaxInt to i64) }
@command_line_arguments.MaxBigInt..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (%Int.0* (i8*, %Int.0*, %Int.0*)* @command_line_arguments.MaxBigInt to i64) }
@command_line_arguments.MaxBigRat..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (%Rat.0* (i8*, %Rat.0*, %Rat.0*)* @command_line_arguments.MaxBigRat to i64) }
@command_line_arguments.MinInt..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (i64 (i8*, i64, i64)* @command_line_arguments.MinInt to i64) }
@command_line_arguments.MinBigInt..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (%Int.0* (i8*, %Int.0*, %Int.0*)* @command_line_arguments.MinBigInt to i64) }
@command_line_arguments.MinBigRat..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (%Rat.0* (i8*, %Rat.0*, %Rat.0*)* @command_line_arguments.MinBigRat to i64) }

; Function Attrs: nounwind readnone
define i64 @command_line_arguments.MaxInt(i8* nest nocapture readnone %nest.0, i64 %x, i64 %y) #0 !dbg !4 {
entry:
  call void @llvm.dbg.value(metadata i64 %x, metadata !9, metadata !DIExpression()), !dbg !10
  call void @llvm.dbg.value(metadata i64 %y, metadata !11, metadata !DIExpression()), !dbg !12
  call void @llvm.dbg.value(metadata i64 0, metadata !13, metadata !DIExpression()), !dbg !14
  %icmp.0 = icmp sgt i64 %x, %y, !dbg !15
  %spec.select = select i1 %icmp.0, i64 %x, i64 %y
  call void @llvm.dbg.value(metadata i64 %x, metadata !13, metadata !DIExpression()), !dbg !14
  ret i64 %spec.select, !dbg !16
}

define %Int.0* @command_line_arguments.MaxBigInt(i8* nest nocapture readnone %nest.1, %Int.0* %x, %Int.0* %y) #1 !dbg !17 {
entry:
  call void @llvm.dbg.value(metadata %Int.0* %x, metadata !33, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata %Int.0* %y, metadata !35, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata %Int.0* null, metadata !37, metadata !DIExpression()), !dbg !38
  %call.0 = call i64 @math_big.Int.Cmp(i8* nest undef, %Int.0* %x, %Int.0* %y), !dbg !39
  %icmp.1 = icmp sgt i64 %call.0, 0, !dbg !40
  %spec.select = select i1 %icmp.1, %Int.0* %x, %Int.0* %y
  call void @llvm.dbg.value(metadata %Int.0* %x, metadata !37, metadata !DIExpression()), !dbg !38
  ret %Int.0* %spec.select, !dbg !41
}

declare i64 @math_big.Int.Cmp(i8*, %Int.0*, %Int.0*) local_unnamed_addr #1

define %Rat.0* @command_line_arguments.MaxBigRat(i8* nest nocapture readnone %nest.2, %Rat.0* %x, %Rat.0* %y) #1 !dbg !42 {
entry:
  call void @llvm.dbg.value(metadata %Rat.0* %x, metadata !50, metadata !DIExpression()), !dbg !51
  call void @llvm.dbg.value(metadata %Rat.0* %y, metadata !52, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata %Rat.0* null, metadata !54, metadata !DIExpression()), !dbg !55
  %call.1 = call i64 @math_big.Rat.Cmp(i8* nest undef, %Rat.0* %x, %Rat.0* %y), !dbg !56
  %icmp.2 = icmp sgt i64 %call.1, 0, !dbg !57
  %spec.select = select i1 %icmp.2, %Rat.0* %x, %Rat.0* %y
  call void @llvm.dbg.value(metadata %Rat.0* %x, metadata !54, metadata !DIExpression()), !dbg !55
  ret %Rat.0* %spec.select, !dbg !58
}

declare i64 @math_big.Rat.Cmp(i8*, %Rat.0*, %Rat.0*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
define i64 @command_line_arguments.MinInt(i8* nest nocapture readnone %nest.3, i64 %x, i64 %y) #0 !dbg !59 {
entry:
  call void @llvm.dbg.value(metadata i64 %x, metadata !60, metadata !DIExpression()), !dbg !61
  call void @llvm.dbg.value(metadata i64 %y, metadata !62, metadata !DIExpression()), !dbg !63
  call void @llvm.dbg.value(metadata i64 0, metadata !64, metadata !DIExpression()), !dbg !65
  %icmp.3 = icmp slt i64 %x, %y, !dbg !66
  %spec.select = select i1 %icmp.3, i64 %x, i64 %y
  call void @llvm.dbg.value(metadata i64 %x, metadata !64, metadata !DIExpression()), !dbg !65
  ret i64 %spec.select, !dbg !67
}

define %Int.0* @command_line_arguments.MinBigInt(i8* nest nocapture readnone %nest.4, %Int.0* %x, %Int.0* %y) #1 !dbg !68 {
entry:
  call void @llvm.dbg.value(metadata %Int.0* %x, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.value(metadata %Int.0* %y, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.value(metadata %Int.0* null, metadata !73, metadata !DIExpression()), !dbg !74
  %call.2 = call i64 @math_big.Int.Cmp(i8* nest undef, %Int.0* %x, %Int.0* %y), !dbg !75
  %icmp.4 = icmp slt i64 %call.2, 0, !dbg !76
  %spec.select = select i1 %icmp.4, %Int.0* %x, %Int.0* %y
  call void @llvm.dbg.value(metadata %Int.0* %x, metadata !73, metadata !DIExpression()), !dbg !74
  ret %Int.0* %spec.select, !dbg !77
}

define %Rat.0* @command_line_arguments.MinBigRat(i8* nest nocapture readnone %nest.5, %Rat.0* %x, %Rat.0* %y) #1 !dbg !78 {
entry:
  call void @llvm.dbg.value(metadata %Rat.0* %x, metadata !79, metadata !DIExpression()), !dbg !80
  call void @llvm.dbg.value(metadata %Rat.0* %y, metadata !81, metadata !DIExpression()), !dbg !82
  call void @llvm.dbg.value(metadata %Rat.0* null, metadata !83, metadata !DIExpression()), !dbg !84
  %call.3 = call i64 @math_big.Rat.Cmp(i8* nest undef, %Rat.0* %x, %Rat.0* %y), !dbg !85
  %icmp.5 = icmp slt i64 %call.3, 0, !dbg !86
  %spec.select = select i1 %icmp.5, %Rat.0* %x, %Rat.0* %y
  call void @llvm.dbg.value(metadata %Rat.0* %x, metadata !83, metadata !DIExpression()), !dbg !84
  ret %Rat.0* %spec.select, !dbg !87
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nounwind readnone "disable-tail-calls"="true" "no-frame-pointer-elim"="false" "split-stack" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { "disable-tail-calls"="true" "no-frame-pointer-elim"="false" "split-stack" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #2 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 7, !"PIC Level", i32 0}
!1 = distinct !DICompileUnit(language: DW_LANG_Go, file: !2, producer: "llvm-goc", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "./math.go", directory: "/home/wangcong/go_path/src/github.com/project-iris/iris/ext/mathext")
!3 = !{}
!4 = distinct !DISubprogram(name: "mathext.MaxInt", linkageName: "command_line_arguments.MaxInt", scope: null, file: !5, line: 27, type: !6, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !1, retainedNodes: !3)
!5 = !DIFile(filename: "math.go", directory: ".")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !8}
!8 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!9 = !DILocalVariable(name: "x", arg: 1, scope: !4, file: !5, line: 27, type: !8)
!10 = !DILocation(line: 27, column: 13, scope: !4)
!11 = !DILocalVariable(name: "y", arg: 2, scope: !4, file: !5, line: 27, type: !8)
!12 = !DILocation(line: 27, column: 16, scope: !4)
!13 = !DILocalVariable(name: "$ret0", scope: !4, file: !5, line: 27, type: !8)
!14 = !DILocation(line: 27, column: 23, scope: !4)
!15 = !DILocation(line: 28, column: 7, scope: !4)
!16 = !DILocation(line: 29, column: 3, scope: !4)
!17 = distinct !DISubprogram(name: "mathext.MaxBigInt", linkageName: "command_line_arguments.MaxBigInt", scope: null, file: !5, line: 35, type: !18, isLocal: false, isDefinition: true, scopeLine: 35, isOptimized: false, unit: !1, retainedNodes: !3)
!18 = !DISubroutineType(types: !19)
!19 = !{!20, !20, !20}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DICompositeType(tag: DW_TAG_structure_type, name: "Int", file: !5, line: 23, size: 256, align: 8, elements: !22)
!22 = !{!23, !25}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "neg", file: !5, line: 23, baseType: !24, size: 8, align: 8)
!24 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_unsigned)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "abs", file: !5, line: 23, baseType: !26, size: 192, align: 64, offset: 64)
!26 = !DICompositeType(tag: DW_TAG_structure_type, name: ".math/big.nat", file: !5, line: 23, size: 192, align: 8, elements: !27)
!27 = !{!28, !31, !32}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !5, line: 1, baseType: !29, size: 64, align: 64)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIBasicType(name: "Word", size: 64, encoding: DW_ATE_unsigned)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "__count", file: !5, line: 1, baseType: !8, size: 64, align: 64, offset: 64)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "__capacity", file: !5, line: 1, baseType: !8, size: 64, align: 64, offset: 128)
!33 = !DILocalVariable(name: "x", arg: 1, scope: !17, file: !5, line: 35, type: !20)
!34 = !DILocation(line: 35, column: 16, scope: !17)
!35 = !DILocalVariable(name: "y", arg: 2, scope: !17, file: !5, line: 35, type: !20)
!36 = !DILocation(line: 35, column: 19, scope: !17)
!37 = !DILocalVariable(name: "$ret1", scope: !17, file: !5, line: 35, type: !20)
!38 = !DILocation(line: 35, column: 31, scope: !17)
!39 = !DILocation(line: 36, column: 6, scope: !17)
!40 = !DILocation(line: 36, column: 14, scope: !17)
!41 = !DILocation(line: 37, column: 3, scope: !17)
!42 = distinct !DISubprogram(name: "mathext.MaxBigRat", linkageName: "command_line_arguments.MaxBigRat", scope: null, file: !5, line: 43, type: !43, isLocal: false, isDefinition: true, scopeLine: 43, isOptimized: false, unit: !1, retainedNodes: !3)
!43 = !DISubroutineType(types: !44)
!44 = !{!45, !45, !45}
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DICompositeType(tag: DW_TAG_structure_type, name: "Rat", file: !5, line: 23, size: 512, align: 8, elements: !47)
!47 = !{!48, !49}
!48 = !DIDerivedType(tag: DW_TAG_member, name: "a", file: !5, line: 23, baseType: !21, size: 256, align: 64)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "b", file: !5, line: 23, baseType: !21, size: 256, align: 64, offset: 256)
!50 = !DILocalVariable(name: "x", arg: 1, scope: !42, file: !5, line: 43, type: !45)
!51 = !DILocation(line: 43, column: 16, scope: !42)
!52 = !DILocalVariable(name: "y", arg: 2, scope: !42, file: !5, line: 43, type: !45)
!53 = !DILocation(line: 43, column: 19, scope: !42)
!54 = !DILocalVariable(name: "$ret2", scope: !42, file: !5, line: 43, type: !45)
!55 = !DILocation(line: 43, column: 31, scope: !42)
!56 = !DILocation(line: 44, column: 6, scope: !42)
!57 = !DILocation(line: 44, column: 14, scope: !42)
!58 = !DILocation(line: 45, column: 3, scope: !42)
!59 = distinct !DISubprogram(name: "mathext.MinInt", linkageName: "command_line_arguments.MinInt", scope: null, file: !5, line: 51, type: !6, isLocal: false, isDefinition: true, scopeLine: 51, isOptimized: false, unit: !1, retainedNodes: !3)
!60 = !DILocalVariable(name: "x", arg: 1, scope: !59, file: !5, line: 51, type: !8)
!61 = !DILocation(line: 51, column: 13, scope: !59)
!62 = !DILocalVariable(name: "y", arg: 2, scope: !59, file: !5, line: 51, type: !8)
!63 = !DILocation(line: 51, column: 16, scope: !59)
!64 = !DILocalVariable(name: "$ret3", scope: !59, file: !5, line: 51, type: !8)
!65 = !DILocation(line: 51, column: 23, scope: !59)
!66 = !DILocation(line: 52, column: 7, scope: !59)
!67 = !DILocation(line: 53, column: 3, scope: !59)
!68 = distinct !DISubprogram(name: "mathext.MinBigInt", linkageName: "command_line_arguments.MinBigInt", scope: null, file: !5, line: 59, type: !18, isLocal: false, isDefinition: true, scopeLine: 59, isOptimized: false, unit: !1, retainedNodes: !3)
!69 = !DILocalVariable(name: "x", arg: 1, scope: !68, file: !5, line: 59, type: !20)
!70 = !DILocation(line: 59, column: 16, scope: !68)
!71 = !DILocalVariable(name: "y", arg: 2, scope: !68, file: !5, line: 59, type: !20)
!72 = !DILocation(line: 59, column: 19, scope: !68)
!73 = !DILocalVariable(name: "$ret4", scope: !68, file: !5, line: 59, type: !20)
!74 = !DILocation(line: 59, column: 31, scope: !68)
!75 = !DILocation(line: 60, column: 6, scope: !68)
!76 = !DILocation(line: 60, column: 14, scope: !68)
!77 = !DILocation(line: 61, column: 3, scope: !68)
!78 = distinct !DISubprogram(name: "mathext.MinBigRat", linkageName: "command_line_arguments.MinBigRat", scope: null, file: !5, line: 67, type: !43, isLocal: false, isDefinition: true, scopeLine: 67, isOptimized: false, unit: !1, retainedNodes: !3)
!79 = !DILocalVariable(name: "x", arg: 1, scope: !78, file: !5, line: 67, type: !45)
!80 = !DILocation(line: 67, column: 16, scope: !78)
!81 = !DILocalVariable(name: "y", arg: 2, scope: !78, file: !5, line: 67, type: !45)
!82 = !DILocation(line: 67, column: 19, scope: !78)
!83 = !DILocalVariable(name: "$ret5", scope: !78, file: !5, line: 67, type: !45)
!84 = !DILocation(line: 67, column: 31, scope: !78)
!85 = !DILocation(line: 68, column: 6, scope: !78)
!86 = !DILocation(line: 68, column: 14, scope: !78)
!87 = !DILocation(line: 69, column: 3, scope: !78)
	.text
	.file	"gomodule"

	.section ".go_export","e",@progbits
	.ascii "v2;\n"
	.ascii "package "
	.ascii "mathext"
	.ascii ";\n"
	.ascii "pkgpath "
	.ascii "command-line-arguments"
	.ascii ";\n"
	.ascii "import "
	.ascii "big"
	.ascii " "
	.ascii "math/big"
	.ascii " \""
	.ascii "math/big"
	.ascii "\";\n"
	.ascii "init"
	.ascii " "
	.ascii "bytes"
	.ascii " "
	.ascii "bytes..import"
	.ascii " "
	.ascii "binary"
	.ascii " "
	.ascii "encoding_binary..import"
	.ascii " "
	.ascii "fmt"
	.ascii " "
	.ascii "fmt..import"
	.ascii " "
	.ascii "poll"
	.ascii " "
	.ascii "internal_poll..import"
	.ascii " "
	.ascii "testlog"
	.ascii " "
	.ascii "internal_testlog..import"
	.ascii " "
	.ascii "io"
	.ascii " "
	.ascii "io..import"
	.ascii " "
	.ascii "big"
	.ascii " "
	.ascii "math_big..import"
	.ascii " "
	.ascii "rand"
	.ascii " "
	.ascii "math_rand..import"
	.ascii " "
	.ascii "os"
	.ascii " "
	.ascii "os..import"
	.ascii " "
	.ascii "reflect"
	.ascii " "
	.ascii "reflect..import"
	.ascii " "
	.ascii "runtime"
	.ascii " "
	.ascii "runtime..import"
	.ascii " "
	.ascii "sys"
	.ascii " "
	.ascii "runtime_internal_sys..import"
	.ascii " "
	.ascii "strconv"
	.ascii " "
	.ascii "strconv..import"
	.ascii " "
	.ascii "sync"
	.ascii " "
	.ascii "sync..import"
	.ascii " "
	.ascii "syscall"
	.ascii " "
	.ascii "syscall..import"
	.ascii " "
	.ascii "time"
	.ascii " "
	.ascii "time..import"
	.ascii " "
	.ascii "unicode"
	.ascii " "
	.ascii "unicode..import"
	.ascii ";\n"
	.ascii "init_graph"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "0"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "1"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "2"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "6"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "7"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "3"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "4"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "5"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "8"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "9"
	.ascii " "
	.ascii "16"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "12"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "14"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "10"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "11"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "13"
	.ascii " "
	.ascii "15"
	.ascii " "
	.ascii "14"
	.ascii ";\n"
	.ascii "func "
	.ascii "MaxBigInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 1 "
	.ascii "*"
	.ascii "<type 2 "
	.ascii "\"math/big.Int\" "
	.ascii "<type 3 "
	.ascii "struct { "
	.ascii ".math/big.neg"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii ".math/big.abs"
	.ascii " "
	.ascii "<type 4 "
	.ascii "\".math/big.nat\" "
	.ascii "<type 5 "
	.ascii "["
	.ascii "] "
	.ascii "<type 6 "
	.ascii "\"math/big.Word\" "
	.ascii "<type -12>"
	.ascii ">"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "n"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.probablyPrimeLucas"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "n"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.probablyPrimeMillerRabin"
	.ascii " ("
	.ascii "reps"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "force2"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.expNNWindowed"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.expNN"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.xor"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.sqrt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.andNot"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.and"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.bytes"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 7 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.sticky"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type -12>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.or"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.bit"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type -12>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.mulAddWW"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<type 6>"
	.ascii ", "
	.ascii "r"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.setUint64"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -8>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.expWW"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 6>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.utoa"
	.ascii " ("
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 8 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.cmp"
	.ascii " ("
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.setBytes"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 9 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.clear"
	.ascii " ("
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.set"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.shr"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "s"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.sub"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.add"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.sqr"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.itoa"
	.ascii " ("
	.ascii "neg"
	.ascii " "
	.ascii "<type -15>"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 10 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.expNNMontgomery"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.norm"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.bitLen"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.setWord"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "q"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.convertWords"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 11 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type 6>"
	.ascii ", "
	.ascii "ndigits"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "bb"
	.ascii " "
	.ascii "<type 6>"
	.ascii ", "
	.ascii "table"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 12 "
	.ascii "["
	.ascii "] "
	.ascii "<type 13 "
	.ascii "\".math/big.divisor\" "
	.ascii "<type 14 "
	.ascii "struct { "
	.ascii ".math/big.bbb"
	.ascii " "
	.ascii "<type 4>"
	.ascii "; "
	.ascii ".math/big.nbits"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii ".math/big.ndigits"
	.ascii " "
	.ascii "<type -11>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.scan"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type 15 "
	.ascii "\"io.ByteScanner\" "
	.ascii "\""
	.ascii "io"
	.ascii "\" "
	.ascii "<type 16 "
	.ascii "interface { "
	.ascii "? "
	.ascii "<type 17 "
	.ascii "\"io.ByteReader\" "
	.ascii "<type 18 "
	.ascii "interface { "
	.ascii "ReadByte"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type -20>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii "UnreadByte"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "fracOk"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii " ("
	.ascii "res"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "count"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.div"
	.ascii " ("
	.ascii "z2"
	.ascii " "
	.ascii "<esc:0x82>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "u"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " ("
	.ascii "q"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "r"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.make"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.montgomery"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "k"
	.ascii " "
	.ascii "<type 6>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.random"
	.ascii " ("
	.ascii "rand"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 19 "
	.ascii "*"
	.ascii "<type 20 "
	.ascii "\"math/rand.Rand\" "
	.ascii "\""
	.ascii "rand"
	.ascii "\" "
	.ascii "<type 21 "
	.ascii "struct { "
	.ascii ".math/rand.src"
	.ascii " "
	.ascii "<type 22 "
	.ascii "\"math/rand.Source\" "
	.ascii "<type 23 "
	.ascii "interface { "
	.ascii "Int63"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -4>"
	.ascii "; "
	.ascii "Seed"
	.ascii " ("
	.ascii "seed"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".math/rand.s64"
	.ascii " "
	.ascii "<type 24 "
	.ascii "\"math/rand.Source64\" "
	.ascii "<type 25 "
	.ascii "interface { "
	.ascii "? "
	.ascii "<type 22>"
	.ascii "; "
	.ascii "Uint64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -8>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii "; "
	.ascii ".math/rand.readVal"
	.ascii " "
	.ascii "<type -4>"
	.ascii "; "
	.ascii ".math/rand.readPos"
	.ascii " "
	.ascii "<type -1>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26 "
	.ascii "*"
	.ascii "<type 20>"
	.ascii ">"
	.ascii ") "
	.ascii "Int63n"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type -4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "NormFloat64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -10>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii ".math/rand.int31n"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -3>"
	.ascii ")"
	.ascii " "
	.ascii "<type -3>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Int"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Intn"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Uint64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -8>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Uint32"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -7>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Float32"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -9>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Int63"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Float64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -10>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Perm"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 27 "
	.ascii "["
	.ascii "] "
	.ascii "<type -11>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Seed"
	.ascii " ("
	.ascii "seed"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Int31"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -3>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Read"
	.ascii " ("
	.ascii "p"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 28 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Int31n"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -3>"
	.ascii ")"
	.ascii " "
	.ascii "<type -3>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "Shuffle"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "swap"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 29 "
	.ascii "("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "j"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ">"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 26>"
	.ascii ") "
	.ascii "ExpFloat64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -10>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "limit"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.mul"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.mulRange"
	.ascii " ("
	.ascii "a"
	.ascii " "
	.ascii "<type -8>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -8>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.modW"
	.ascii " ("
	.ascii "d"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.setBit"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "i"
	.ascii " "
	.ascii "<type -12>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.divLarge"
	.ascii " ("
	.ascii "u"
	.ascii " "
	.ascii "<esc:0x82>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "uIn"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "v"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii " ("
	.ascii "q"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "r"
	.ascii " "
	.ascii "<type 4>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.divW"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii " ("
	.ascii "q"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "r"
	.ascii " "
	.ascii "<type 6>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.trailingZeroBits"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -12>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ") "
	.ascii ".math/big.shl"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 4>"
	.ascii ", "
	.ascii "s"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 4>"
	.ascii ";\n"
	.ascii ">"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30 "
	.ascii "*"
	.ascii "<type 2>"
	.ascii ">"
	.ascii ") "
	.ascii "ProbablyPrime"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "MarshalJSON"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 31 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "UnmarshalText"
	.ascii " ("
	.ascii "text"
	.ascii " "
	.ascii "<type 32 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "MarshalText"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "text"
	.ascii " "
	.ascii "<type 33 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "GobDecode"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 34 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "GobEncode"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 35 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Scan"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<type 36 "
	.ascii "\"fmt.ScanState\" "
	.ascii "\""
	.ascii "fmt"
	.ascii "\" "
	.ascii "<type 37 "
	.ascii "interface { "
	.ascii "ReadRune"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "r"
	.ascii " "
	.ascii "<type -21>"
	.ascii ", "
	.ascii "size"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii "; "
	.ascii "UnreadRune"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii "; "
	.ascii "SkipSpace"
	.ascii " ("
	.ascii ")"
	.ascii "; "
	.ascii "Token"
	.ascii " ("
	.ascii "skipSpace"
	.ascii " "
	.ascii "<type -15>"
	.ascii ", "
	.ascii "f"
	.ascii " "
	.ascii "<type 38 "
	.ascii "("
	.ascii "?"
	.ascii " "
	.ascii "<type -21>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "token"
	.ascii " "
	.ascii "<type 39 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii "; "
	.ascii "Width"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "wid"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "Read"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<type 40 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "ch"
	.ascii " "
	.ascii "<type -21>"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Append"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 41 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type 42 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Text"
	.ascii " ("
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Not"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "CmpAbs"
	.ascii " ("
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Format"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<type 43 "
	.ascii "\"fmt.State\" "
	.ascii "<type 44 "
	.ascii "interface { "
	.ascii "Write"
	.ascii " ("
	.ascii "b"
	.ascii " "
	.ascii "<type 45 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "n"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii "; "
	.ascii "Width"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "wid"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "Precision"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "("
	.ascii "prec"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "ok"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii "; "
	.ascii "Flag"
	.ascii " ("
	.ascii "c"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "ch"
	.ascii " "
	.ascii "<type -21>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Div"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Quo"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x22>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Bits"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 46 "
	.ascii "["
	.ascii "] "
	.ascii "<type 6>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii ".math/big.modSqrtTonelliShanks"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "p"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Binomial"
	.ascii " ("
	.ascii "n"
	.ascii " "
	.ascii "<type -4>"
	.ascii ", "
	.ascii "k"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "MulRange"
	.ascii " ("
	.ascii "a"
	.ascii " "
	.ascii "<type -4>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Mul"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Set"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "QuoRem"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "r"
	.ascii " "
	.ascii "<esc:0x8a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Abs"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Mod"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "ModSqrt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "p"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Bit"
	.ascii " ("
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -12>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Neg"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetBytes"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 47 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "UnmarshalJSON"
	.ascii " ("
	.ascii "text"
	.ascii " "
	.ascii "<type 48 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Int64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -4>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "DivMod"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x8a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "ModInverse"
	.ascii " ("
	.ascii "g"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Rsh"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Rem"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "BitLen"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetBits"
	.ascii " ("
	.ascii "abs"
	.ascii " "
	.ascii "<type 49 "
	.ascii "["
	.ascii "] "
	.ascii "<type 6>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Add"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetInt64"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii ".math/big.modSqrt3Mod4Prime"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "p"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Sub"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Cmp"
	.ascii " ("
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Uint64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -8>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii ".math/big.scan"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type 15>"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Sqrt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii ".math/big.setFromScanner"
	.ascii " ("
	.ascii "r"
	.ascii " "
	.ascii "<type 15>"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "IsInt64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "IsUint64"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Rand"
	.ascii " ("
	.ascii "rnd"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 19>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Bytes"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 50 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "GCD"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "a"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Xor"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "And"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii ".math/big.lehmerGCD"
	.ascii " ("
	.ascii "a"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Lsh"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "n"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetUint64"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -8>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetString"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<type -16>"
	.ascii ", "
	.ascii "base"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "SetBit"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "i"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -12>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Sign"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "AndNot"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Exp"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "m"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ") "
	.ascii "Or"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 30>"
	.ascii ")"
	.ascii " "
	.ascii "<type 30>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ")"
	.ascii " "
	.ascii "<type 1>"
	.ascii ";\n"
	.ascii "func "
	.ascii "MaxBigRat"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 51 "
	.ascii "*"
	.ascii "<type 52 "
	.ascii "\"math/big.Rat\" "
	.ascii "<type 53 "
	.ascii "struct { "
	.ascii ".math/big.a"
	.ascii " "
	.ascii "<type 2>"
	.ascii "; "
	.ascii ".math/big.b"
	.ascii " "
	.ascii "<type 2>"
	.ascii "; "
	.ascii "}"
	.ascii ">"
	.ascii "\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 54 "
	.ascii "*"
	.ascii "<type 52>"
	.ascii ">"
	.ascii ") "
	.ascii "UnmarshalText"
	.ascii " ("
	.ascii "text"
	.ascii " "
	.ascii "<type 55 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "MarshalText"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "text"
	.ascii " "
	.ascii "<type 56 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "err"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "GobDecode"
	.ascii " ("
	.ascii "buf"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 57 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "GobEncode"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 58 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -19>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "FloatString"
	.ascii " ("
	.ascii "prec"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "RatString"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Abs"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii ".math/big.marshal"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 59 "
	.ascii "["
	.ascii "] "
	.ascii "<type -20>"
	.ascii ">"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Num"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 1>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetInt64"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Sub"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Float32"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "f"
	.ascii " "
	.ascii "<type -9>"
	.ascii ", "
	.ascii "exact"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetFrac64"
	.ascii " ("
	.ascii "a"
	.ascii " "
	.ascii "<type -4>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<type -4>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "IsInt"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -15>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Float64"
	.ascii " ("
	.ascii ")"
	.ascii " ("
	.ascii "f"
	.ascii " "
	.ascii "<type -10>"
	.ascii ", "
	.ascii "exact"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetFloat64"
	.ascii " ("
	.ascii "f"
	.ascii " "
	.ascii "<type -10>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetFrac"
	.ascii " ("
	.ascii "a"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ", "
	.ascii "b"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Quo"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Sign"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Neg"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Cmp"
	.ascii " ("
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "String"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type -16>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "SetString"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<type -16>"
	.ascii ")"
	.ascii " ("
	.ascii "?"
	.ascii " "
	.ascii "<type 54>"
	.ascii ", "
	.ascii "?"
	.ascii " "
	.ascii "<type -15>"
	.ascii ")"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x9>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Scan"
	.ascii " ("
	.ascii "s"
	.ascii " "
	.ascii "<type 36>"
	.ascii ", "
	.ascii "ch"
	.ascii " "
	.ascii "<type -21>"
	.ascii ")"
	.ascii " "
	.ascii "<type -19>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Denom"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 1>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Inv"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Add"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Set"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii ".math/big.norm"
	.ascii " ("
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii " "
	.ascii "func "
	.ascii "("
	.ascii "z"
	.ascii " "
	.ascii "<esc:0x1a>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ") "
	.ascii "Mul"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x1>"
	.ascii " "
	.ascii "<type 54>"
	.ascii ")"
	.ascii " "
	.ascii "<type 54>"
	.ascii ";\n"
	.ascii ">"
	.ascii ">"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 51>"
	.ascii ")"
	.ascii " "
	.ascii "<type 51>"
	.ascii ";\n"
	.ascii "func "
	.ascii "MaxInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii "func "
	.ascii "MinBigInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 1>"
	.ascii ")"
	.ascii " "
	.ascii "<type 1>"
	.ascii ";\n"
	.ascii "func "
	.ascii "MinBigRat"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 51>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<esc:0x12>"
	.ascii " "
	.ascii "<type 51>"
	.ascii ")"
	.ascii " "
	.ascii "<type 51>"
	.ascii ";\n"
	.ascii "func "
	.ascii "MinInt"
	.ascii " ("
	.ascii "x"
	.ascii " "
	.ascii "<type -11>"
	.ascii ", "
	.ascii "y"
	.ascii " "
	.ascii "<type -11>"
	.ascii ")"
	.ascii " "
	.ascii "<type -11>"
	.ascii ";\n"
	.ascii "checksum EFDC5E5F656A4A14826FE62C21F97495F631E4C6;\n"
	.text


	.section	.text.command_line_arguments.MaxInt,"ax",@progbits
	.globl	command_line_arguments.MaxInt
	.p2align	4, 0x90
	.type	command_line_arguments.MaxInt,@function
command_line_arguments.MaxInt:
.Lfunc_begin0:
	.file	1 "./math.go"
	.loc	1 27 0
	.cfi_startproc
	.loc	1 28 7 prologue_end
	cmpq	%rsi, %rdi
	cmovgeq	%rdi, %rsi
.Ltmp0:
	.loc	1 29 3
	movq	%rsi, %rax
	retq
.Ltmp1:
.Lfunc_end0:
	.size	command_line_arguments.MaxInt, .Lfunc_end0-command_line_arguments.MaxInt
	.cfi_endproc

	.section	.text.command_line_arguments.MaxBigInt,"ax",@progbits
	.globl	command_line_arguments.MaxBigInt
	.p2align	4, 0x90
	.type	command_line_arguments.MaxBigInt,@function
command_line_arguments.MaxBigInt:
.Lfunc_begin1:
	.loc	1 35 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB1_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB1_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
.Ltmp2:
	movq	%rsi, %rbx
	movq	%rdi, %r14
.Ltmp3:
	.loc	1 36 6 prologue_end
	callq	math_big.Int.Cmp
	.loc	1 36 14 is_stmt 0
	testq	%rax, %rax
	cmovgq	%r14, %rbx
.Ltmp4:
	.loc	1 37 3 is_stmt 1
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp5:
	.cfi_def_cfa_offset 8
	retq
.Ltmp6:
.Lfunc_end1:
	.size	command_line_arguments.MaxBigInt, .Lfunc_end1-command_line_arguments.MaxBigInt
	.cfi_endproc

	.section	.text.command_line_arguments.MaxBigRat,"ax",@progbits
	.globl	command_line_arguments.MaxBigRat
	.p2align	4, 0x90
	.type	command_line_arguments.MaxBigRat,@function
command_line_arguments.MaxBigRat:
.Lfunc_begin2:
	.loc	1 43 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB2_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB2_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
.Ltmp7:
	movq	%rsi, %rbx
	movq	%rdi, %r14
.Ltmp8:
	.loc	1 44 6 prologue_end
	callq	math_big.Rat.Cmp
	.loc	1 44 14 is_stmt 0
	testq	%rax, %rax
	cmovgq	%r14, %rbx
.Ltmp9:
	.loc	1 45 3 is_stmt 1
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp10:
	.cfi_def_cfa_offset 8
	retq
.Ltmp11:
.Lfunc_end2:
	.size	command_line_arguments.MaxBigRat, .Lfunc_end2-command_line_arguments.MaxBigRat
	.cfi_endproc

	.section	.text.command_line_arguments.MinInt,"ax",@progbits
	.globl	command_line_arguments.MinInt
	.p2align	4, 0x90
	.type	command_line_arguments.MinInt,@function
command_line_arguments.MinInt:
.Lfunc_begin3:
	.loc	1 51 0
	.cfi_startproc
	.loc	1 52 7 prologue_end
	cmpq	%rsi, %rdi
	cmovleq	%rdi, %rsi
.Ltmp12:
	.loc	1 53 3
	movq	%rsi, %rax
	retq
.Ltmp13:
.Lfunc_end3:
	.size	command_line_arguments.MinInt, .Lfunc_end3-command_line_arguments.MinInt
	.cfi_endproc

	.section	.text.command_line_arguments.MinBigInt,"ax",@progbits
	.globl	command_line_arguments.MinBigInt
	.p2align	4, 0x90
	.type	command_line_arguments.MinBigInt,@function
command_line_arguments.MinBigInt:
.Lfunc_begin4:
	.loc	1 59 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB4_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB4_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
.Ltmp14:
	movq	%rsi, %rbx
	movq	%rdi, %r14
.Ltmp15:
	.loc	1 60 6 prologue_end
	callq	math_big.Int.Cmp
	.loc	1 60 14 is_stmt 0
	testq	%rax, %rax
	cmovsq	%r14, %rbx
.Ltmp16:
	.loc	1 61 3 is_stmt 1
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp17:
	.cfi_def_cfa_offset 8
	retq
.Ltmp18:
.Lfunc_end4:
	.size	command_line_arguments.MinBigInt, .Lfunc_end4-command_line_arguments.MinBigInt
	.cfi_endproc

	.section	.text.command_line_arguments.MinBigRat,"ax",@progbits
	.globl	command_line_arguments.MinBigRat
	.p2align	4, 0x90
	.type	command_line_arguments.MinBigRat,@function
command_line_arguments.MinBigRat:
.Lfunc_begin5:
	.loc	1 67 0
	.cfi_startproc
	cmpq	%fs:112, %rsp
	ja	.LBB5_2
	movq	%r10, %rax
	movabsq	$24, %r10
	movabsq	$0, %r11
	callq	__morestack
	retq
	movq	%rax, %r10
.LBB5_2:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
.Ltmp19:
	movq	%rsi, %rbx
	movq	%rdi, %r14
.Ltmp20:
	.loc	1 68 6 prologue_end
	callq	math_big.Rat.Cmp
	.loc	1 68 14 is_stmt 0
	testq	%rax, %rax
	cmovsq	%r14, %rbx
.Ltmp21:
	.loc	1 69 3 is_stmt 1
	movq	%rbx, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
.Ltmp22:
	.cfi_def_cfa_offset 8
	retq
.Ltmp23:
.Lfunc_end5:
	.size	command_line_arguments.MinBigRat, .Lfunc_end5-command_line_arguments.MinBigRat
	.cfi_endproc

	.type	command_line_arguments.MaxInt..f,@object
	.section	.rodata.command_line_arguments.MaxInt..f,"a",@progbits
	.globl	command_line_arguments.MaxInt..f
	.p2align	3
command_line_arguments.MaxInt..f:
	.quad	command_line_arguments.MaxInt
	.size	command_line_arguments.MaxInt..f, 8

	.type	command_line_arguments.MaxBigInt..f,@object
	.section	.rodata.command_line_arguments.MaxBigInt..f,"a",@progbits
	.globl	command_line_arguments.MaxBigInt..f
	.p2align	3
command_line_arguments.MaxBigInt..f:
	.quad	command_line_arguments.MaxBigInt
	.size	command_line_arguments.MaxBigInt..f, 8

	.type	command_line_arguments.MaxBigRat..f,@object
	.section	.rodata.command_line_arguments.MaxBigRat..f,"a",@progbits
	.globl	command_line_arguments.MaxBigRat..f
	.p2align	3
command_line_arguments.MaxBigRat..f:
	.quad	command_line_arguments.MaxBigRat
	.size	command_line_arguments.MaxBigRat..f, 8

	.type	command_line_arguments.MinInt..f,@object
	.section	.rodata.command_line_arguments.MinInt..f,"a",@progbits
	.globl	command_line_arguments.MinInt..f
	.p2align	3
command_line_arguments.MinInt..f:
	.quad	command_line_arguments.MinInt
	.size	command_line_arguments.MinInt..f, 8

	.type	command_line_arguments.MinBigInt..f,@object
	.section	.rodata.command_line_arguments.MinBigInt..f,"a",@progbits
	.globl	command_line_arguments.MinBigInt..f
	.p2align	3
command_line_arguments.MinBigInt..f:
	.quad	command_line_arguments.MinBigInt
	.size	command_line_arguments.MinBigInt..f, 8

	.type	command_line_arguments.MinBigRat..f,@object
	.section	.rodata.command_line_arguments.MinBigRat..f,"a",@progbits
	.globl	command_line_arguments.MinBigRat..f
	.p2align	3
command_line_arguments.MinBigRat..f:
	.quad	command_line_arguments.MinBigRat
	.size	command_line_arguments.MinBigRat..f, 8

	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"llvm-goc"
.Linfo_string1:
	.asciz	"./math.go"
.Linfo_string2:
	.asciz	"/home/wangcong/go_path/src/github.com/project-iris/iris/ext/mathext"
.Linfo_string3:
	.asciz	"command_line_arguments.MaxInt"
.Linfo_string4:
	.asciz	"mathext.MaxInt"
.Linfo_string5:
	.asciz	"int"
.Linfo_string6:
	.asciz	"command_line_arguments.MaxBigInt"
.Linfo_string7:
	.asciz	"mathext.MaxBigInt"
.Linfo_string8:
	.asciz	"neg"
.Linfo_string9:
	.asciz	"bool"
.Linfo_string10:
	.asciz	"abs"
.Linfo_string11:
	.asciz	"__values"
.Linfo_string12:
	.asciz	"Word"
.Linfo_string13:
	.asciz	"__count"
.Linfo_string14:
	.asciz	"__capacity"
.Linfo_string15:
	.asciz	".math/big.nat"
.Linfo_string16:
	.asciz	"Int"
.Linfo_string17:
	.asciz	"command_line_arguments.MaxBigRat"
.Linfo_string18:
	.asciz	"mathext.MaxBigRat"
.Linfo_string19:
	.asciz	"a"
.Linfo_string20:
	.asciz	"b"
.Linfo_string21:
	.asciz	"Rat"
.Linfo_string22:
	.asciz	"command_line_arguments.MinInt"
.Linfo_string23:
	.asciz	"mathext.MinInt"
.Linfo_string24:
	.asciz	"command_line_arguments.MinBigInt"
.Linfo_string25:
	.asciz	"mathext.MinBigInt"
.Linfo_string26:
	.asciz	"command_line_arguments.MinBigRat"
.Linfo_string27:
	.asciz	"mathext.MinBigRat"
.Linfo_string28:
	.asciz	"x"
.Linfo_string29:
	.asciz	"y"
.Linfo_string30:
	.asciz	"$ret0"
.Linfo_string31:
	.asciz	"$ret1"
.Linfo_string32:
	.asciz	"$ret2"
.Linfo_string33:
	.asciz	"$ret3"
.Linfo_string34:
	.asciz	"$ret4"
.Linfo_string35:
	.asciz	"$ret5"
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp0
	.short	1
	.byte	84
	.quad	0
	.quad	0
.Ldebug_loc1:
	.quad	.Lfunc_begin0
	.quad	.Lfunc_begin0
	.short	1
	.byte	85
	.quad	.Lfunc_begin0
	.quad	.Lfunc_end0
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin1
	.quad	.Ltmp3
	.short	1
	.byte	85
	.quad	.Ltmp3
	.quad	.Ltmp5
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Lfunc_begin1
	.quad	.Ltmp3
	.short	1
	.byte	84
	.quad	.Ltmp3
	.quad	.Ltmp4
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Ltmp2
	.quad	.Ltmp3
	.short	1
	.byte	85
	.quad	.Ltmp3
	.quad	.Ltmp5
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc5:
	.quad	.Lfunc_begin2
	.quad	.Ltmp8
	.short	1
	.byte	85
	.quad	.Ltmp8
	.quad	.Ltmp10
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin2
	.quad	.Ltmp8
	.short	1
	.byte	84
	.quad	.Ltmp8
	.quad	.Ltmp9
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc7:
	.quad	.Ltmp7
	.quad	.Ltmp8
	.short	1
	.byte	85
	.quad	.Ltmp8
	.quad	.Ltmp10
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin3
	.quad	.Ltmp12
	.short	1
	.byte	84
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Lfunc_begin3
	.quad	.Lfunc_begin3
	.short	1
	.byte	85
	.quad	.Lfunc_begin3
	.quad	.Lfunc_end3
	.short	3
	.byte	17
	.byte	0
	.byte	159
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Lfunc_begin4
	.quad	.Ltmp15
	.short	1
	.byte	85
	.quad	.Ltmp15
	.quad	.Ltmp17
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin4
	.quad	.Ltmp15
	.short	1
	.byte	84
	.quad	.Ltmp15
	.quad	.Ltmp16
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Ltmp14
	.quad	.Ltmp15
	.short	1
	.byte	85
	.quad	.Ltmp15
	.quad	.Ltmp17
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc13:
	.quad	.Lfunc_begin5
	.quad	.Ltmp20
	.short	1
	.byte	85
	.quad	.Ltmp20
	.quad	.Ltmp22
	.short	1
	.byte	94
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin5
	.quad	.Ltmp20
	.short	1
	.byte	84
	.quad	.Ltmp20
	.quad	.Ltmp21
	.short	1
	.byte	83
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Ltmp19
	.quad	.Ltmp20
	.short	1
	.byte	85
	.quad	.Ltmp20
	.quad	.Ltmp22
	.short	1
	.byte	94
	.quad	0
	.quad	0
	.section	.debug_abbrev,"",@progbits
	.byte	1
	.byte	17
	.byte	1
	.byte	37
	.byte	14
	.byte	19
	.byte	5
	.byte	3
	.byte	14
	.byte	16
	.byte	23
	.byte	27
	.byte	14
	.ascii	"\264B"
	.byte	25
	.byte	17
	.byte	1
	.byte	85
	.byte	23
	.byte	0
	.byte	0
	.byte	2
	.byte	46
	.byte	1
	.byte	17
	.byte	1
	.byte	18
	.byte	6
	.byte	64
	.byte	24
	.byte	110
	.byte	14
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	63
	.byte	25
	.byte	0
	.byte	0
	.byte	3
	.byte	5
	.byte	0
	.byte	2
	.byte	24
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	4
	.byte	5
	.byte	0
	.byte	2
	.byte	23
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	5
	.byte	52
	.byte	0
	.byte	2
	.byte	23
	.byte	3
	.byte	14
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	6
	.byte	36
	.byte	0
	.byte	3
	.byte	14
	.byte	62
	.byte	11
	.byte	11
	.byte	11
	.byte	0
	.byte	0
	.byte	7
	.byte	15
	.byte	0
	.byte	73
	.byte	19
	.byte	0
	.byte	0
	.byte	8
	.byte	19
	.byte	1
	.byte	3
	.byte	14
	.byte	11
	.byte	11
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.ascii	"\210\001"
	.byte	15
	.byte	0
	.byte	0
	.byte	9
	.byte	13
	.byte	0
	.byte	3
	.byte	14
	.byte	73
	.byte	19
	.byte	58
	.byte	11
	.byte	59
	.byte	11
	.ascii	"\210\001"
	.byte	15
	.byte	56
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	642
	.short	4
	.long	.debug_abbrev
	.byte	8
	.byte	1
	.long	.Linfo_string0
	.short	22
	.long	.Linfo_string1
	.long	.Lline_table_start0
	.long	.Linfo_string2

	.quad	0
	.long	.Ldebug_ranges0
	.byte	2
	.quad	.Lfunc_begin0
	.long	.Lfunc_end0-.Lfunc_begin0
	.byte	1
	.byte	87
	.long	.Linfo_string3
	.long	.Linfo_string4
	.byte	1
	.byte	27
	.long	488

	.byte	3
	.byte	1
	.byte	85
	.long	.Linfo_string28
	.byte	1
	.byte	27
	.long	488
	.byte	4
	.long	.Ldebug_loc0
	.long	.Linfo_string29
	.byte	1
	.byte	27
	.long	488
	.byte	5
	.long	.Ldebug_loc1
	.long	.Linfo_string30
	.byte	1
	.byte	27
	.long	488
	.byte	0
	.byte	2
	.quad	.Lfunc_begin1
	.long	.Lfunc_end1-.Lfunc_begin1
	.byte	1
	.byte	87
	.long	.Linfo_string6
	.long	.Linfo_string7
	.byte	1
	.byte	35
	.long	495

	.byte	4
	.long	.Ldebug_loc2
	.long	.Linfo_string28
	.byte	1
	.byte	35
	.long	495
	.byte	4
	.long	.Ldebug_loc3
	.long	.Linfo_string29
	.byte	1
	.byte	35
	.long	495
	.byte	5
	.long	.Ldebug_loc4
	.long	.Linfo_string31
	.byte	1
	.byte	35
	.long	495
	.byte	0
	.byte	2
	.quad	.Lfunc_begin2
	.long	.Lfunc_end2-.Lfunc_begin2
	.byte	1
	.byte	87
	.long	.Linfo_string17
	.long	.Linfo_string18
	.byte	1
	.byte	43
	.long	604

	.byte	4
	.long	.Ldebug_loc5
	.long	.Linfo_string28
	.byte	1
	.byte	43
	.long	604
	.byte	4
	.long	.Ldebug_loc6
	.long	.Linfo_string29
	.byte	1
	.byte	43
	.long	604
	.byte	5
	.long	.Ldebug_loc7
	.long	.Linfo_string32
	.byte	1
	.byte	43
	.long	604
	.byte	0
	.byte	2
	.quad	.Lfunc_begin3
	.long	.Lfunc_end3-.Lfunc_begin3
	.byte	1
	.byte	87
	.long	.Linfo_string22
	.long	.Linfo_string23
	.byte	1
	.byte	51
	.long	488

	.byte	3
	.byte	1
	.byte	85
	.long	.Linfo_string28
	.byte	1
	.byte	51
	.long	488
	.byte	4
	.long	.Ldebug_loc8
	.long	.Linfo_string29
	.byte	1
	.byte	51
	.long	488
	.byte	5
	.long	.Ldebug_loc9
	.long	.Linfo_string33
	.byte	1
	.byte	51
	.long	488
	.byte	0
	.byte	2
	.quad	.Lfunc_begin4
	.long	.Lfunc_end4-.Lfunc_begin4
	.byte	1
	.byte	87
	.long	.Linfo_string24
	.long	.Linfo_string25
	.byte	1
	.byte	59
	.long	495

	.byte	4
	.long	.Ldebug_loc10
	.long	.Linfo_string28
	.byte	1
	.byte	59
	.long	495
	.byte	4
	.long	.Ldebug_loc11
	.long	.Linfo_string29
	.byte	1
	.byte	59
	.long	495
	.byte	5
	.long	.Ldebug_loc12
	.long	.Linfo_string34
	.byte	1
	.byte	59
	.long	495
	.byte	0
	.byte	2
	.quad	.Lfunc_begin5
	.long	.Lfunc_end5-.Lfunc_begin5
	.byte	1
	.byte	87
	.long	.Linfo_string26
	.long	.Linfo_string27
	.byte	1
	.byte	67
	.long	604

	.byte	4
	.long	.Ldebug_loc13
	.long	.Linfo_string28
	.byte	1
	.byte	67
	.long	604
	.byte	4
	.long	.Ldebug_loc14
	.long	.Linfo_string29
	.byte	1
	.byte	67
	.long	604
	.byte	5
	.long	.Ldebug_loc15
	.long	.Linfo_string35
	.byte	1
	.byte	67
	.long	604
	.byte	0
	.byte	6
	.long	.Linfo_string5
	.byte	5
	.byte	8
	.byte	7
	.long	500
	.byte	8
	.long	.Linfo_string16
	.byte	32
	.byte	1
	.byte	23
	.byte	1
	.byte	9
	.long	.Linfo_string8
	.long	536
	.byte	1
	.byte	23
	.byte	1
	.byte	0
	.byte	9
	.long	.Linfo_string10
	.long	543
	.byte	1
	.byte	23
	.byte	8
	.byte	8
	.byte	0
	.byte	6
	.long	.Linfo_string9
	.byte	7
	.byte	1
	.byte	8
	.long	.Linfo_string15
	.byte	24
	.byte	1
	.byte	23
	.byte	1
	.byte	9
	.long	.Linfo_string11
	.long	592
	.byte	1
	.byte	1
	.byte	8
	.byte	0
	.byte	9
	.long	.Linfo_string13
	.long	488
	.byte	1
	.byte	1
	.byte	8
	.byte	8
	.byte	9
	.long	.Linfo_string14
	.long	488
	.byte	1
	.byte	1
	.byte	8
	.byte	16
	.byte	0
	.byte	7
	.long	597
	.byte	6
	.long	.Linfo_string12
	.byte	7
	.byte	8
	.byte	7
	.long	609
	.byte	8
	.long	.Linfo_string21
	.byte	64
	.byte	1
	.byte	23
	.byte	1
	.byte	9
	.long	.Linfo_string19
	.long	500
	.byte	1
	.byte	23
	.byte	8
	.byte	0
	.byte	9
	.long	.Linfo_string20
	.long	500
	.byte	1
	.byte	23
	.byte	8
	.byte	32
	.byte	0
	.byte	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.Lfunc_begin0
	.quad	.Lfunc_end0
	.quad	.Lfunc_begin1
	.quad	.Lfunc_end1
	.quad	.Lfunc_begin2
	.quad	.Lfunc_end2
	.quad	.Lfunc_begin3
	.quad	.Lfunc_end3
	.quad	.Lfunc_begin4
	.quad	.Lfunc_end4
	.quad	.Lfunc_begin5
	.quad	.Lfunc_end5
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
	.byte	0
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_begin0
.LpubNames_begin0:
	.short	2
	.long	.Lcu_begin0
	.long	646
	.long	413
	.asciz	"mathext.MinBigRat"
	.long	190
	.asciz	"mathext.MaxBigRat"
	.long	265
	.asciz	"mathext.MinInt"
	.long	42
	.asciz	"mathext.MaxInt"
	.long	338
	.asciz	"mathext.MinBigInt"
	.long	115
	.asciz	"mathext.MaxBigInt"
	.long	0
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_begin0
.LpubTypes_begin0:
	.short	2
	.long	.Lcu_begin0
	.long	646
	.long	609
	.asciz	"Rat"
	.long	543
	.asciz	".math/big.nat"
	.long	488
	.asciz	"int"
	.long	500
	.asciz	"Int"
	.long	536
	.asciz	"bool"
	.long	597
	.asciz	"Word"
	.long	0
.LpubTypes_end0:

	.section	".note.GNU-split-stack","",@progbits
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
