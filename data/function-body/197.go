{

	testData := []struct {
		desc                     string
		sigma, amount, threshold float32
		srcb, dstb               image.Rectangle
		srcPix, dstPix           []uint8
	}{
		{
			"unsharp mask (0.3, 1, 0)",
			0.3, 1, 0,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x60, 0xB0, 0xA0, 0xB0, 0x60,
				0x00, 0x80, 0x00, 0x80, 0x00,
			},
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x60, 0xB1, 0xA1, 0xB1, 0x60,
				0x00, 0x81, 0x00, 0x81, 0x00,
			},
		},
		{
			"unsharp mask (1, 1, 0)",
			1, 1, 0,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x60, 0xB0, 0xA0, 0xB0, 0x60,
				0x00, 0x80, 0x00, 0x80, 0x00,
			},
			[]uint8{
				0x00, 0x45, 0x00, 0x45, 0x00,
				0x82, 0xFF, 0xE4, 0xFF, 0x82,
				0x00, 0xB2, 0x00, 0xB2, 0x00,
			},
		},
		{
			"unsharp mask (1, 0.5, 0)",
			1, 0.5, 0,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x60, 0xB0, 0xA0, 0xB0, 0x60,
				0x00, 0x80, 0x00, 0x80, 0x00,
			},
			[]uint8{
				0x00, 0x42, 0x00, 0x42, 0x00,
				0x71, 0xDD, 0xC2, 0xDD, 0x71,
				0x00, 0x99, 0x00, 0x99, 0x00,
			},
		},
		{
			"unsharp mask (1, 1, 0.05)",
			1, 1, 0.05,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x60, 0xB0, 0xA0, 0xB0, 0x60,
				0x00, 0x80, 0x00, 0x80, 0x00,
			},
			[]uint8{
				0x00, 0x40, 0x00, 0x40, 0x00,
				0x82, 0xFF, 0xE4, 0xFF, 0x82,
				0x00, 0xB2, 0x00, 0xB2, 0x00,
			},
		},
	}

	for _, d := range testData {
		src := image.NewGray(d.srcb)
		src.Pix = d.srcPix

		f := UnsharpMask(d.sigma, d.amount, d.threshold)
		dst := image.NewGray(f.Bounds(src.Bounds()))
		f.Draw(dst, src, nil)

		if !checkBoundsAndPix(dst.Bounds(), d.dstb, dst.Pix, d.dstPix) {
			t.Errorf("test [%s] failed: %#v, %#v", d.desc, dst.Bounds(), dst.Pix)
		}
	}

	// check no panics
	UnsharpMask(0.5, 1, 0).Draw(image.NewGray(image.Rect(0, 0, 0, 0)), image.NewGray(image.Rect(0, 0, 0, 0)), nil)
}