{

	testData := []struct {
		desc           string
		sigma          float32
		srcb, dstb     image.Rectangle
		srcPix, dstPix []uint8
	}{
		{
			"blur (0)",
			0,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xC0, 0x00, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00,
			},
			[]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xC0, 0x00, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"blur (0.3)",
			0.3,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xC0, 0x00, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00,
			},
			[]uint8{
				0x00, 0x01, 0x00, 0x01, 0x00,
				0x01, 0xBD, 0x01, 0xBD, 0x01,
				0x00, 0x01, 0x00, 0x01, 0x00,
			},
		},
		{
			"blur (1)",
			1,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xC0, 0x00, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00,
			},
			[]uint8{
				0x0B, 0x15, 0x16, 0x15, 0x0B,
				0x13, 0x23, 0x25, 0x23, 0x13,
				0x0B, 0x15, 0x16, 0x15, 0x0B,
			},
		},
		{
			"blur (3)",
			3,
			image.Rect(-1, -1, 4, 2),
			image.Rect(0, 0, 5, 3),
			[]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xC0, 0x00, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00,
			},
			[]uint8{
				0x05, 0x06, 0x06, 0x06, 0x05,
				0x05, 0x06, 0x06, 0x06, 0x05,
				0x05, 0x06, 0x06, 0x06, 0x05,
			},
		},
	}

	for _, d := range testData {
		src := image.NewGray(d.srcb)
		src.Pix = d.srcPix

		f := GaussianBlur(d.sigma)
		dst := image.NewGray(f.Bounds(src.Bounds()))
		f.Draw(dst, src, nil)

		if !checkBoundsAndPix(dst.Bounds(), d.dstb, dst.Pix, d.dstPix) {
			t.Errorf("test [%s] failed: %#v, %#v", d.desc, dst.Bounds(), dst.Pix)
		}
	}

	// check no panics
	GaussianBlur(0.5).Draw(image.NewGray(image.Rect(0, 0, 0, 0)), image.NewGray(image.Rect(0, 0, 0, 0)), nil)
}