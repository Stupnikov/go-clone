{
	testData := []struct {
		desc           string
		w, h           int
		anchor         Anchor
		srcb, dstb     image.Rectangle
		srcPix, dstPix []uint8
	}{
		{
			"crop to size (0, 0, center)",
			0, 0, CenterAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 0, 0),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{},
		},
		{
			"crop to size (3, 3, center)",
			3, 3, CenterAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x06, 0x07, 0x08,
				0x0b, 0x0c, 0x0d,
				0x10, 0x11, 0x12,
			},
		},
		{
			"crop to size (3, 3, top-left)",
			3, 3, TopLeftAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x00, 0x01, 0x02,
				0x05, 0x06, 0x07,
				0x0a, 0x0b, 0x0c,
			},
		},
		{
			"crop to size (3, 3, top)",
			3, 3, TopAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x01, 0x02, 0x03,
				0x06, 0x07, 0x08,
				0x0b, 0x0c, 0x0d,
			},
		},
		{
			"crop to size (3, 3,, top-right)",
			3, 3, TopRightAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x02, 0x03, 0x04,
				0x07, 0x08, 0x09,
				0x0c, 0x0d, 0x0e,
			},
		},
		{
			"crop to size (3, 3, left)",
			3, 3, LeftAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x05, 0x06, 0x07,
				0x0a, 0x0b, 0x0c,
				0x0f, 0x10, 0x11,
			},
		},
		{
			"crop to size (3, 3, right)",
			3, 3, RightAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x07, 0x08, 0x09,
				0x0c, 0x0d, 0x0e,
				0x11, 0x12, 0x13,
			},
		},
		{
			"crop to size (3, 3, bottom-left)",
			3, 3, BottomLeftAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x0a, 0x0b, 0x0c,
				0x0f, 0x10, 0x11,
				0x14, 0x15, 0x16,
			},
		},
		{
			"crop to size (3, 3, bottom)",
			3, 3, BottomAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x0b, 0x0c, 0x0d,
				0x10, 0x11, 0x12,
				0x15, 0x16, 0x17,
			},
		},
		{
			"crop to size (3, 3, bottom-right)",
			3, 3, BottomRightAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 3, 3),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x0c, 0x0d, 0x0e,
				0x11, 0x12, 0x13,
				0x16, 0x17, 0x18,
			},
		},
		{
			"crop to size (100, 100, center)",
			100, 100, CenterAnchor,
			image.Rect(-1, -1, 4, 4),
			image.Rect(0, 0, 5, 5),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04,
				0x05, 0x06, 0x07, 0x08, 0x09,
				0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
				0x0f, 0x10, 0x11, 0x12, 0x13,
				0x14, 0x15, 0x16, 0x17, 0x18,
			},
		},
	}

	for _, d := range testData {
		src := image.NewGray(d.srcb)
		src.Pix = d.srcPix

		f := CropToSize(d.w, d.h, d.anchor)
		dst := image.NewGray(f.Bounds(src.Bounds()))
		f.Draw(dst, src, nil)

		if !checkBoundsAndPix(dst.Bounds(), d.dstb, dst.Pix, d.dstPix) {
			t.Errorf("test [%s] failed: %#v, %#v", d.desc, dst.Bounds(), dst.Pix)
		}
	}
}