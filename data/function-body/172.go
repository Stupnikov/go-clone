{
	testData := []struct {
		desc           string
		fn             func(r0, g0, b0, a0 float32) (r, g, b, a float32)
		srcb, dstb     image.Rectangle
		srcPix, dstPix []uint8
	}{

		{
			"color func 0x0",
			func(r0, g0, b0, a0 float32) (r, g, b, a float32) {
				return r0, g0, b0, a0
			},
			image.Rect(0, 0, 0, 0),
			image.Rect(0, 0, 0, 0),
			[]uint8{},
			[]uint8{},
		},
		{
			"color func swap channels",
			func(r0, g0, b0, a0 float32) (r, g, b, a float32) {
				return a0, b0, g0, r0
			},
			image.Rect(-1, -1, 1, 3),
			image.Rect(0, 0, 2, 4),
			[]uint8{
				0x00, 0x10, 0x20, 0x30, 0x99, 0x66, 0x33, 0xFF,
				0xF0, 0xE0, 0xD0, 0xC0, 0x11, 0x66, 0xBB, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
				0xE0, 0x50, 0xA0, 0x77, 0xEE, 0xFE, 0xEE, 0xFD,
			},
			[]uint8{
				0x30, 0x20, 0x10, 0x00, 0xFF, 0x33, 0x66, 0x99,
				0xC0, 0xD0, 0xE0, 0xF0, 0x00, 0xBB, 0x66, 0x11,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
				0x77, 0xA0, 0x50, 0xE0, 0xFD, 0xEE, 0xFE, 0xEE,
			},
		},

		{
			"color func invert all",
			func(r0, g0, b0, a0 float32) (r, g, b, a float32) {
				return 1 - r0, 1 - g0, 1 - b0, 1 - a0
			},
			image.Rect(-1, -1, 1, 3),
			image.Rect(0, 0, 2, 4),
			[]uint8{
				0x00, 0x10, 0x20, 0x30, 0x99, 0x66, 0x33, 0xFF,
				0xF0, 0xE0, 0xD0, 0xC0, 0x11, 0x66, 0xBB, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
				0xE0, 0x50, 0xA0, 0x77, 0xEE, 0xFE, 0xEE, 0xFD,
			},
			[]uint8{
				0xFF, 0xEF, 0xDF, 0xCF, 0x66, 0x99, 0xCC, 0x00,
				0x0F, 0x1F, 0x2F, 0x3F, 0xEE, 0x99, 0x44, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x1F, 0xAF, 0x5F, 0x88, 0x11, 0x01, 0x11, 0x02,
			},
		},
	}

	for _, d := range testData {
		src := image.NewNRGBA(d.srcb)
		src.Pix = d.srcPix

		f := ColorFunc(d.fn)
		dst := image.NewNRGBA(f.Bounds(src.Bounds()))
		f.Draw(dst, src, nil)

		if !checkBoundsAndPix(dst.Bounds(), d.dstb, dst.Pix, d.dstPix) {
			t.Errorf("test [%s] failed: %#v, %#v", d.desc, dst.Bounds(), dst.Pix)
		}
	}
}