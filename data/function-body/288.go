{
	testData := []struct {
		desc           string
		w, h           int
		r              Resampling
		anchor         Anchor
		srcb, dstb     image.Rectangle
		srcPix, dstPix []uint8
	}{
		{
			"resize to fill (0, 0, nearest, center)",
			0, 0, NearestNeighborResampling, CenterAnchor,
			image.Rect(-1, -1, 3, 1),
			image.Rect(0, 0, 0, 0),
			[]uint8{
				0x00, 0x01, 0x02, 0x03,
				0x04, 0x05, 0x06, 0x07,
			},
			[]uint8{},
		},
		{
			"resize to fill (4, 2, nearest, center)",
			4, 2, NearestNeighborResampling, CenterAnchor,
			image.Rect(-1, -1, 3, 1),
			image.Rect(0, 0, 4, 2),
			[]uint8{
				0x00, 0x01, 0x02, 0x03,
				0x04, 0x05, 0x06, 0x07,
			},
			[]uint8{
				0x00, 0x01, 0x02, 0x03,
				0x04, 0x05, 0x06, 0x07,
			},
		},
		{
			"resize to fill (4, 4, nearest, center)",
			4, 4, NearestNeighborResampling, CenterAnchor,
			image.Rect(-1, -1, 3, 1),
			image.Rect(0, 0, 4, 4),
			[]uint8{
				0x00, 0x01, 0x02, 0x03,
				0x04, 0x05, 0x06, 0x07,
			},
			[]uint8{
				0x01, 0x01, 0x02, 0x02,
				0x01, 0x01, 0x02, 0x02,
				0x05, 0x05, 0x06, 0x06,
				0x05, 0x05, 0x06, 0x06,
			},
		},
		{
			"resize to fill (4, 4, nearest, bottom-right)",
			4, 4, NearestNeighborResampling, BottomRightAnchor,
			image.Rect(-1, -1, 1, 3),
			image.Rect(0, 0, 4, 4),
			[]uint8{
				0x00, 0x01,
				0x02, 0x03,
				0x04, 0x05,
				0x06, 0x07,
			},
			[]uint8{
				0x04, 0x04, 0x05, 0x05,
				0x04, 0x04, 0x05, 0x05,
				0x06, 0x06, 0x07, 0x07,
				0x06, 0x06, 0x07, 0x07,
			},
		},
		{
			"resize to fill (2, 1, nearest, bottom)",
			2, 1, NearestNeighborResampling, BottomAnchor,
			image.Rect(-1, -1, 5, 5),
			image.Rect(0, 0, 2, 1),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
				0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
				0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
				0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
				0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
				0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
			},
			[]uint8{
				0xa7, 0xaa,
			},
		},
		{
			"resize to fill (2, 1, nearest, top)",
			2, 1, NearestNeighborResampling, TopAnchor,
			image.Rect(-1, -1, 5, 5),
			image.Rect(0, 0, 2, 1),
			[]uint8{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
				0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
				0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
				0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
				0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
				0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
			},
			[]uint8{
				0x07, 0x0a,
			},
		},
	}

	for _, d := range testData {
		src := image.NewGray(d.srcb)
		src.Pix = d.srcPix

		f := ResizeToFill(d.w, d.h, d.r, d.anchor)
		dst := image.NewGray(f.Bounds(src.Bounds()))
		f.Draw(dst, src, nil)

		if !checkBoundsAndPix(dst.Bounds(), d.dstb, dst.Pix, d.dstPix) {
			t.Errorf("test [%s] failed: %#v, %#v", d.desc, dst.Bounds(), dst.Pix)
		}
	}
}